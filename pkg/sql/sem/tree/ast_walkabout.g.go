// Code generated by github.com/cockroachdb/walkabout. DO NOT EDIT.
// source:
//+build !walkaboutAnalysis

package tree

import (
	"unsafe"

	e "github.com/cockroachdb/walkabout/engine"
)

// AstTypeId  is a lightweight type token.
type AstTypeId e.TypeId

// AstAbstract allows users to treat a Ast as an abstract
// tree of nodes. All visitable struct types will have generated methods
// which implement this interface.
type AstAbstract interface {
	// ChildAt returns the nth field of a struct or nth element of a
	// slice. If the child is a type which directly implements
	// AstAbstract, it will be returned. If the child is of a pointer or
	// interface type, the value will be automatically dereferenced if it
	// is non-nil. If the child is a slice type, a AstAbstract wrapper
	// around the slice will be returned.
	ChildAt(index int) AstAbstract
	// NumChildren returns the number of visitable fields in a struct,
	// or the length of a slice.
	NumChildren() int
	// TypeId returns a type token.
	TypeId() AstTypeId
}

var (
	_ AstAbstract = &AliasClause{}
	_ AstAbstract = &AllColumnsSelector{}
	_ AstAbstract = &AlterIndex{}
	_ AstAbstract = &AlterSequence{}
	_ AstAbstract = &AlterTable{}
	_ AstAbstract = &AlterUserSetPassword{}
	_ AstAbstract = &AndExpr{}
	_ AstAbstract = &AnnotateTypeExpr{}
	_ AstAbstract = &Array{}
	_ AstAbstract = &ArrayFlatten{}
	_ AstAbstract = &ArraySubscript{}
	_ AstAbstract = &AsOfClause{}
	_ AstAbstract = &Backup{}
	_ AstAbstract = &BeginTransaction{}
	_ AstAbstract = &BinaryExpr{}
	_ AstAbstract = &CTE{}
	_ AstAbstract = &CancelQueries{}
	_ AstAbstract = &CancelSessions{}
	_ AstAbstract = &CaseExpr{}
	_ AstAbstract = &CastExpr{}
	_ AstAbstract = &CoalesceExpr{}
	_ AstAbstract = &CollateExpr{}
	_ AstAbstract = &ColumnAccessExpr{}
	_ AstAbstract = &ColumnItem{}
	_ AstAbstract = &CommentOnTable{}
	_ AstAbstract = &CommitTransaction{}
	_ AstAbstract = &ComparisonExpr{}
	_ AstAbstract = &ControlJobs{}
	_ AstAbstract = &CopyFrom{}
	_ AstAbstract = &CreateChangefeed{}
	_ AstAbstract = &CreateDatabase{}
	_ AstAbstract = &CreateIndex{}
	_ AstAbstract = &CreateRole{}
	_ AstAbstract = &CreateSequence{}
	_ AstAbstract = &CreateStats{}
	_ AstAbstract = &CreateTable{}
	_ AstAbstract = &CreateUser{}
	_ AstAbstract = &CreateView{}
	_ AstAbstract = &DArray{}
	_ AstAbstract = &DBitArray{}
	_ AstAbstract = &DCollatedString{}
	_ AstAbstract = &DDecimal{}
	_ AstAbstract = &DIPAddr{}
	_ AstAbstract = &DInterval{}
	_ AstAbstract = &DJSON{}
	_ AstAbstract = &DOid{}
	_ AstAbstract = &DOidWrapper{}
	_ AstAbstract = &DTimestamp{}
	_ AstAbstract = &DTimestampTZ{}
	_ AstAbstract = &DTuple{}
	_ AstAbstract = &DUuid{}
	_ AstAbstract = &Deallocate{}
	_ AstAbstract = &DefaultVal{}
	_ AstAbstract = &Delete{}
	_ AstAbstract = &Discard{}
	_ AstAbstract = &DropDatabase{}
	_ AstAbstract = &DropIndex{}
	_ AstAbstract = &DropRole{}
	_ AstAbstract = &DropSequence{}
	_ AstAbstract = &DropTable{}
	_ AstAbstract = &DropUser{}
	_ AstAbstract = &DropView{}
	_ AstAbstract = &Execute{}
	_ AstAbstract = &Explain{}
	_ AstAbstract = &Export{}
	_ AstAbstract = &From{}
	_ AstAbstract = &FuncExpr{}
	_ AstAbstract = &Grant{}
	_ AstAbstract = &GrantRole{}
	_ AstAbstract = &IfErrExpr{}
	_ AstAbstract = &IfExpr{}
	_ AstAbstract = &Import{}
	_ AstAbstract = &IndexElem{}
	_ AstAbstract = &IndexedVar{}
	_ AstAbstract = &IndirectionExpr{}
	_ AstAbstract = &Insert{}
	_ AstAbstract = &InterleaveDef{}
	_ AstAbstract = &IsOfTypeExpr{}
	_ AstAbstract = &KVOption{}
	_ AstAbstract = &Limit{}
	_ AstAbstract = &ListPartition{}
	_ AstAbstract = &NotExpr{}
	_ AstAbstract = &NullIfExpr{}
	_ AstAbstract = &NumVal{}
	_ AstAbstract = &OnConflict{}
	_ AstAbstract = &OrExpr{}
	_ AstAbstract = &Order{}
	_ AstAbstract = &ParenExpr{}
	_ AstAbstract = &ParenSelect{}
	_ AstAbstract = &PartitionBy{}
	_ AstAbstract = &PartitionMaxVal{}
	_ AstAbstract = &PartitionMinVal{}
	_ AstAbstract = &Placeholder{}
	_ AstAbstract = &Prepare{}
	_ AstAbstract = &RangeCond{}
	_ AstAbstract = &RangePartition{}
	_ AstAbstract = &ReleaseSavepoint{}
	_ AstAbstract = &Relocate{}
	_ AstAbstract = &RenameColumn{}
	_ AstAbstract = &RenameDatabase{}
	_ AstAbstract = &RenameIndex{}
	_ AstAbstract = &RenameTable{}
	_ AstAbstract = &ResolvableFunctionReference{}
	_ AstAbstract = &Restore{}
	_ AstAbstract = &Revoke{}
	_ AstAbstract = &RevokeRole{}
	_ AstAbstract = &RollbackToSavepoint{}
	_ AstAbstract = &RollbackTransaction{}
	_ AstAbstract = &Savepoint{}
	_ AstAbstract = &Scatter{}
	_ AstAbstract = &Scrub{}
	_ AstAbstract = &Select{}
	_ AstAbstract = &SelectClause{}
	_ AstAbstract = &SelectExpr{}
	_ AstAbstract = &SequenceOption{}
	_ AstAbstract = &SetClusterSetting{}
	_ AstAbstract = &SetSessionCharacteristics{}
	_ AstAbstract = &SetTracing{}
	_ AstAbstract = &SetTransaction{}
	_ AstAbstract = &SetVar{}
	_ AstAbstract = &SetZoneConfig{}
	_ AstAbstract = &ShowBackup{}
	_ AstAbstract = &ShowClusterSetting{}
	_ AstAbstract = &ShowColumns{}
	_ AstAbstract = &ShowConstraints{}
	_ AstAbstract = &ShowCreate{}
	_ AstAbstract = &ShowDatabases{}
	_ AstAbstract = &ShowFingerprints{}
	_ AstAbstract = &ShowGrants{}
	_ AstAbstract = &ShowHistogram{}
	_ AstAbstract = &ShowIndex{}
	_ AstAbstract = &ShowJobs{}
	_ AstAbstract = &ShowQueries{}
	_ AstAbstract = &ShowRanges{}
	_ AstAbstract = &ShowRoleGrants{}
	_ AstAbstract = &ShowRoles{}
	_ AstAbstract = &ShowSchemas{}
	_ AstAbstract = &ShowSessions{}
	_ AstAbstract = &ShowSyntax{}
	_ AstAbstract = &ShowTableStats{}
	_ AstAbstract = &ShowTables{}
	_ AstAbstract = &ShowTraceForSession{}
	_ AstAbstract = &ShowTransactionStatus{}
	_ AstAbstract = &ShowUsers{}
	_ AstAbstract = &ShowVar{}
	_ AstAbstract = &ShowZoneConfig{}
	_ AstAbstract = &Split{}
	_ AstAbstract = &StrVal{}
	_ AstAbstract = &Subquery{}
	_ AstAbstract = &TableName{}
	_ AstAbstract = &TableNamePrefix{}
	_ AstAbstract = &TableNameWithIndex{}
	_ AstAbstract = &TargetList{}
	_ AstAbstract = &TransactionModes{}
	_ AstAbstract = &Truncate{}
	_ AstAbstract = &Tuple{}
	_ AstAbstract = &TupleStar{}
	_ AstAbstract = &UnaryExpr{}
	_ AstAbstract = &UnionClause{}
	_ AstAbstract = &UnqualifiedStar{}
	_ AstAbstract = &UnresolvedName{}
	_ AstAbstract = &Update{}
	_ AstAbstract = &UpdateExpr{}
	_ AstAbstract = &ValuesClause{}
	_ AstAbstract = &ValuesClauseWithNames{}
	_ AstAbstract = &When{}
	_ AstAbstract = &Where{}
	_ AstAbstract = &WindowDef{}
	_ AstAbstract = &WindowFrame{}
	_ AstAbstract = &WindowFrameBound{}
	_ AstAbstract = &WindowFrameBounds{}
	_ AstAbstract = &With{}
	_ AstAbstract = &ZoneSpecifier{}
)

// AstWalkerFn is used to implement a visitor pattern over
// types which implement Ast.
//
// Implementations of this function return a AstDecision, which
// allows the function to control traversal. The zero value of
// AstDecision means "continue". Other values can be obtained from the
// provided AstContext to stop or to return an error.
//
// A AstDecision can also specify a post-visit function to execute
// or can be used to replace the value being visited.
type AstWalkerFn func(ctx AstContext, x Ast) AstDecision

// AstContext is provided to AstWalkerFn and acts as a factory
// for constructing AstDecision instances.
type AstContext struct {
	impl e.ContextImpl
}

// Continue returns the zero-value of AstDecision. It exists only
// for cases where it improves the readability of code.
func (c *AstContext) Continue() AstDecision {
	return AstDecision{}
}

// Error returns a AstDecision which will cause the given error
// to be returned from the Walk() function. Post-visit functions
// will not be called.
func (c *AstContext) Error(err error) AstDecision {
	return AstDecision{impl: e.DecisionImpl{Error: err}}
}

// Halt will end a visitation early and return from the Walk() function.
// Any registered post-visit functions will be called.
func (c *AstContext) Halt() AstDecision {
	return AstDecision{impl: e.DecisionImpl{Halt: true}}
}

// Skip will not traverse the fields of the current object.
func (c *AstContext) Skip() AstDecision {
	return AstDecision{impl: e.DecisionImpl{Skip: true}}
}

// AstDecision is used by AstWalkerFn to control visitation.
type AstDecision struct {
	impl e.DecisionImpl
}

// Replace allows the currently-visited value to be replaced. All
// parent nodes will be cloned.
func (d AstDecision) Replace(x Ast) AstDecision {
	switch t := x.(type) {
	case *AliasClause:
		d.impl.ReplacementType = e.TypeId(AstTypeAliasClause)
		d.impl.Replacement = e.Ptr(t)
	case *AllColumnsSelector:
		d.impl.ReplacementType = e.TypeId(AstTypeAllColumnsSelector)
		d.impl.Replacement = e.Ptr(t)
	case *AlterIndex:
		d.impl.ReplacementType = e.TypeId(AstTypeAlterIndex)
		d.impl.Replacement = e.Ptr(t)
	case *AlterSequence:
		d.impl.ReplacementType = e.TypeId(AstTypeAlterSequence)
		d.impl.Replacement = e.Ptr(t)
	case *AlterTable:
		d.impl.ReplacementType = e.TypeId(AstTypeAlterTable)
		d.impl.Replacement = e.Ptr(t)
	case *AlterUserSetPassword:
		d.impl.ReplacementType = e.TypeId(AstTypeAlterUserSetPassword)
		d.impl.Replacement = e.Ptr(t)
	case *AndExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeAndExpr)
		d.impl.Replacement = e.Ptr(t)
	case *AnnotateTypeExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeAnnotateTypeExpr)
		d.impl.Replacement = e.Ptr(t)
	case *Array:
		d.impl.ReplacementType = e.TypeId(AstTypeArray)
		d.impl.Replacement = e.Ptr(t)
	case *ArrayFlatten:
		d.impl.ReplacementType = e.TypeId(AstTypeArrayFlatten)
		d.impl.Replacement = e.Ptr(t)
	case *ArraySubscript:
		d.impl.ReplacementType = e.TypeId(AstTypeArraySubscript)
		d.impl.Replacement = e.Ptr(t)
	case *AsOfClause:
		d.impl.ReplacementType = e.TypeId(AstTypeAsOfClause)
		d.impl.Replacement = e.Ptr(t)
	case *Backup:
		d.impl.ReplacementType = e.TypeId(AstTypeBackup)
		d.impl.Replacement = e.Ptr(t)
	case *BeginTransaction:
		d.impl.ReplacementType = e.TypeId(AstTypeBeginTransaction)
		d.impl.Replacement = e.Ptr(t)
	case *BinaryExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeBinaryExpr)
		d.impl.Replacement = e.Ptr(t)
	case *CTE:
		d.impl.ReplacementType = e.TypeId(AstTypeCTE)
		d.impl.Replacement = e.Ptr(t)
	case *CancelQueries:
		d.impl.ReplacementType = e.TypeId(AstTypeCancelQueries)
		d.impl.Replacement = e.Ptr(t)
	case *CancelSessions:
		d.impl.ReplacementType = e.TypeId(AstTypeCancelSessions)
		d.impl.Replacement = e.Ptr(t)
	case *CaseExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeCaseExpr)
		d.impl.Replacement = e.Ptr(t)
	case *CastExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeCastExpr)
		d.impl.Replacement = e.Ptr(t)
	case *CoalesceExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeCoalesceExpr)
		d.impl.Replacement = e.Ptr(t)
	case *CollateExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeCollateExpr)
		d.impl.Replacement = e.Ptr(t)
	case *ColumnAccessExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeColumnAccessExpr)
		d.impl.Replacement = e.Ptr(t)
	case *ColumnItem:
		d.impl.ReplacementType = e.TypeId(AstTypeColumnItem)
		d.impl.Replacement = e.Ptr(t)
	case *CommentOnTable:
		d.impl.ReplacementType = e.TypeId(AstTypeCommentOnTable)
		d.impl.Replacement = e.Ptr(t)
	case *CommitTransaction:
		d.impl.ReplacementType = e.TypeId(AstTypeCommitTransaction)
		d.impl.Replacement = e.Ptr(t)
	case *ComparisonExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeComparisonExpr)
		d.impl.Replacement = e.Ptr(t)
	case *ControlJobs:
		d.impl.ReplacementType = e.TypeId(AstTypeControlJobs)
		d.impl.Replacement = e.Ptr(t)
	case *CopyFrom:
		d.impl.ReplacementType = e.TypeId(AstTypeCopyFrom)
		d.impl.Replacement = e.Ptr(t)
	case *CreateChangefeed:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateChangefeed)
		d.impl.Replacement = e.Ptr(t)
	case *CreateDatabase:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateDatabase)
		d.impl.Replacement = e.Ptr(t)
	case *CreateIndex:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateIndex)
		d.impl.Replacement = e.Ptr(t)
	case *CreateRole:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateRole)
		d.impl.Replacement = e.Ptr(t)
	case *CreateSequence:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateSequence)
		d.impl.Replacement = e.Ptr(t)
	case *CreateStats:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateStats)
		d.impl.Replacement = e.Ptr(t)
	case *CreateTable:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateTable)
		d.impl.Replacement = e.Ptr(t)
	case *CreateUser:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateUser)
		d.impl.Replacement = e.Ptr(t)
	case *CreateView:
		d.impl.ReplacementType = e.TypeId(AstTypeCreateView)
		d.impl.Replacement = e.Ptr(t)
	case *DArray:
		d.impl.ReplacementType = e.TypeId(AstTypeDArray)
		d.impl.Replacement = e.Ptr(t)
	case *DBitArray:
		d.impl.ReplacementType = e.TypeId(AstTypeDBitArray)
		d.impl.Replacement = e.Ptr(t)
	case *DCollatedString:
		d.impl.ReplacementType = e.TypeId(AstTypeDCollatedString)
		d.impl.Replacement = e.Ptr(t)
	case *DDecimal:
		d.impl.ReplacementType = e.TypeId(AstTypeDDecimal)
		d.impl.Replacement = e.Ptr(t)
	case *DIPAddr:
		d.impl.ReplacementType = e.TypeId(AstTypeDIPAddr)
		d.impl.Replacement = e.Ptr(t)
	case *DInterval:
		d.impl.ReplacementType = e.TypeId(AstTypeDInterval)
		d.impl.Replacement = e.Ptr(t)
	case *DJSON:
		d.impl.ReplacementType = e.TypeId(AstTypeDJSON)
		d.impl.Replacement = e.Ptr(t)
	case *DOid:
		d.impl.ReplacementType = e.TypeId(AstTypeDOid)
		d.impl.Replacement = e.Ptr(t)
	case *DOidWrapper:
		d.impl.ReplacementType = e.TypeId(AstTypeDOidWrapper)
		d.impl.Replacement = e.Ptr(t)
	case *DTimestamp:
		d.impl.ReplacementType = e.TypeId(AstTypeDTimestamp)
		d.impl.Replacement = e.Ptr(t)
	case *DTimestampTZ:
		d.impl.ReplacementType = e.TypeId(AstTypeDTimestampTZ)
		d.impl.Replacement = e.Ptr(t)
	case *DTuple:
		d.impl.ReplacementType = e.TypeId(AstTypeDTuple)
		d.impl.Replacement = e.Ptr(t)
	case *DUuid:
		d.impl.ReplacementType = e.TypeId(AstTypeDUuid)
		d.impl.Replacement = e.Ptr(t)
	case *Deallocate:
		d.impl.ReplacementType = e.TypeId(AstTypeDeallocate)
		d.impl.Replacement = e.Ptr(t)
	case *DefaultVal:
		d.impl.ReplacementType = e.TypeId(AstTypeDefaultVal)
		d.impl.Replacement = e.Ptr(t)
	case *Delete:
		d.impl.ReplacementType = e.TypeId(AstTypeDelete)
		d.impl.Replacement = e.Ptr(t)
	case *Discard:
		d.impl.ReplacementType = e.TypeId(AstTypeDiscard)
		d.impl.Replacement = e.Ptr(t)
	case *DropDatabase:
		d.impl.ReplacementType = e.TypeId(AstTypeDropDatabase)
		d.impl.Replacement = e.Ptr(t)
	case *DropIndex:
		d.impl.ReplacementType = e.TypeId(AstTypeDropIndex)
		d.impl.Replacement = e.Ptr(t)
	case *DropRole:
		d.impl.ReplacementType = e.TypeId(AstTypeDropRole)
		d.impl.Replacement = e.Ptr(t)
	case *DropSequence:
		d.impl.ReplacementType = e.TypeId(AstTypeDropSequence)
		d.impl.Replacement = e.Ptr(t)
	case *DropTable:
		d.impl.ReplacementType = e.TypeId(AstTypeDropTable)
		d.impl.Replacement = e.Ptr(t)
	case *DropUser:
		d.impl.ReplacementType = e.TypeId(AstTypeDropUser)
		d.impl.Replacement = e.Ptr(t)
	case *DropView:
		d.impl.ReplacementType = e.TypeId(AstTypeDropView)
		d.impl.Replacement = e.Ptr(t)
	case *Execute:
		d.impl.ReplacementType = e.TypeId(AstTypeExecute)
		d.impl.Replacement = e.Ptr(t)
	case *Explain:
		d.impl.ReplacementType = e.TypeId(AstTypeExplain)
		d.impl.Replacement = e.Ptr(t)
	case *Export:
		d.impl.ReplacementType = e.TypeId(AstTypeExport)
		d.impl.Replacement = e.Ptr(t)
	case *From:
		d.impl.ReplacementType = e.TypeId(AstTypeFrom)
		d.impl.Replacement = e.Ptr(t)
	case *FuncExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeFuncExpr)
		d.impl.Replacement = e.Ptr(t)
	case *Grant:
		d.impl.ReplacementType = e.TypeId(AstTypeGrant)
		d.impl.Replacement = e.Ptr(t)
	case *GrantRole:
		d.impl.ReplacementType = e.TypeId(AstTypeGrantRole)
		d.impl.Replacement = e.Ptr(t)
	case *IfErrExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeIfErrExpr)
		d.impl.Replacement = e.Ptr(t)
	case *IfExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeIfExpr)
		d.impl.Replacement = e.Ptr(t)
	case *Import:
		d.impl.ReplacementType = e.TypeId(AstTypeImport)
		d.impl.Replacement = e.Ptr(t)
	case *IndexElem:
		d.impl.ReplacementType = e.TypeId(AstTypeIndexElem)
		d.impl.Replacement = e.Ptr(t)
	case *IndexedVar:
		d.impl.ReplacementType = e.TypeId(AstTypeIndexedVar)
		d.impl.Replacement = e.Ptr(t)
	case *IndirectionExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeIndirectionExpr)
		d.impl.Replacement = e.Ptr(t)
	case *Insert:
		d.impl.ReplacementType = e.TypeId(AstTypeInsert)
		d.impl.Replacement = e.Ptr(t)
	case *InterleaveDef:
		d.impl.ReplacementType = e.TypeId(AstTypeInterleaveDef)
		d.impl.Replacement = e.Ptr(t)
	case *IsOfTypeExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeIsOfTypeExpr)
		d.impl.Replacement = e.Ptr(t)
	case *KVOption:
		d.impl.ReplacementType = e.TypeId(AstTypeKVOption)
		d.impl.Replacement = e.Ptr(t)
	case *Limit:
		d.impl.ReplacementType = e.TypeId(AstTypeLimit)
		d.impl.Replacement = e.Ptr(t)
	case *ListPartition:
		d.impl.ReplacementType = e.TypeId(AstTypeListPartition)
		d.impl.Replacement = e.Ptr(t)
	case *NotExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeNotExpr)
		d.impl.Replacement = e.Ptr(t)
	case *NullIfExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeNullIfExpr)
		d.impl.Replacement = e.Ptr(t)
	case *NumVal:
		d.impl.ReplacementType = e.TypeId(AstTypeNumVal)
		d.impl.Replacement = e.Ptr(t)
	case *OnConflict:
		d.impl.ReplacementType = e.TypeId(AstTypeOnConflict)
		d.impl.Replacement = e.Ptr(t)
	case *OrExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeOrExpr)
		d.impl.Replacement = e.Ptr(t)
	case *Order:
		d.impl.ReplacementType = e.TypeId(AstTypeOrder)
		d.impl.Replacement = e.Ptr(t)
	case *ParenExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeParenExpr)
		d.impl.Replacement = e.Ptr(t)
	case *ParenSelect:
		d.impl.ReplacementType = e.TypeId(AstTypeParenSelect)
		d.impl.Replacement = e.Ptr(t)
	case *PartitionBy:
		d.impl.ReplacementType = e.TypeId(AstTypePartitionBy)
		d.impl.Replacement = e.Ptr(t)
	case *PartitionMaxVal:
		d.impl.ReplacementType = e.TypeId(AstTypePartitionMaxVal)
		d.impl.Replacement = e.Ptr(t)
	case *PartitionMinVal:
		d.impl.ReplacementType = e.TypeId(AstTypePartitionMinVal)
		d.impl.Replacement = e.Ptr(t)
	case *Placeholder:
		d.impl.ReplacementType = e.TypeId(AstTypePlaceholder)
		d.impl.Replacement = e.Ptr(t)
	case *Prepare:
		d.impl.ReplacementType = e.TypeId(AstTypePrepare)
		d.impl.Replacement = e.Ptr(t)
	case *RangeCond:
		d.impl.ReplacementType = e.TypeId(AstTypeRangeCond)
		d.impl.Replacement = e.Ptr(t)
	case *RangePartition:
		d.impl.ReplacementType = e.TypeId(AstTypeRangePartition)
		d.impl.Replacement = e.Ptr(t)
	case *ReleaseSavepoint:
		d.impl.ReplacementType = e.TypeId(AstTypeReleaseSavepoint)
		d.impl.Replacement = e.Ptr(t)
	case *Relocate:
		d.impl.ReplacementType = e.TypeId(AstTypeRelocate)
		d.impl.Replacement = e.Ptr(t)
	case *RenameColumn:
		d.impl.ReplacementType = e.TypeId(AstTypeRenameColumn)
		d.impl.Replacement = e.Ptr(t)
	case *RenameDatabase:
		d.impl.ReplacementType = e.TypeId(AstTypeRenameDatabase)
		d.impl.Replacement = e.Ptr(t)
	case *RenameIndex:
		d.impl.ReplacementType = e.TypeId(AstTypeRenameIndex)
		d.impl.Replacement = e.Ptr(t)
	case *RenameTable:
		d.impl.ReplacementType = e.TypeId(AstTypeRenameTable)
		d.impl.Replacement = e.Ptr(t)
	case *ResolvableFunctionReference:
		d.impl.ReplacementType = e.TypeId(AstTypeResolvableFunctionReference)
		d.impl.Replacement = e.Ptr(t)
	case *Restore:
		d.impl.ReplacementType = e.TypeId(AstTypeRestore)
		d.impl.Replacement = e.Ptr(t)
	case *Revoke:
		d.impl.ReplacementType = e.TypeId(AstTypeRevoke)
		d.impl.Replacement = e.Ptr(t)
	case *RevokeRole:
		d.impl.ReplacementType = e.TypeId(AstTypeRevokeRole)
		d.impl.Replacement = e.Ptr(t)
	case *RollbackToSavepoint:
		d.impl.ReplacementType = e.TypeId(AstTypeRollbackToSavepoint)
		d.impl.Replacement = e.Ptr(t)
	case *RollbackTransaction:
		d.impl.ReplacementType = e.TypeId(AstTypeRollbackTransaction)
		d.impl.Replacement = e.Ptr(t)
	case *Savepoint:
		d.impl.ReplacementType = e.TypeId(AstTypeSavepoint)
		d.impl.Replacement = e.Ptr(t)
	case *Scatter:
		d.impl.ReplacementType = e.TypeId(AstTypeScatter)
		d.impl.Replacement = e.Ptr(t)
	case *Scrub:
		d.impl.ReplacementType = e.TypeId(AstTypeScrub)
		d.impl.Replacement = e.Ptr(t)
	case *Select:
		d.impl.ReplacementType = e.TypeId(AstTypeSelect)
		d.impl.Replacement = e.Ptr(t)
	case *SelectClause:
		d.impl.ReplacementType = e.TypeId(AstTypeSelectClause)
		d.impl.Replacement = e.Ptr(t)
	case *SelectExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeSelectExpr)
		d.impl.Replacement = e.Ptr(t)
	case *SequenceOption:
		d.impl.ReplacementType = e.TypeId(AstTypeSequenceOption)
		d.impl.Replacement = e.Ptr(t)
	case *SetClusterSetting:
		d.impl.ReplacementType = e.TypeId(AstTypeSetClusterSetting)
		d.impl.Replacement = e.Ptr(t)
	case *SetSessionCharacteristics:
		d.impl.ReplacementType = e.TypeId(AstTypeSetSessionCharacteristics)
		d.impl.Replacement = e.Ptr(t)
	case *SetTracing:
		d.impl.ReplacementType = e.TypeId(AstTypeSetTracing)
		d.impl.Replacement = e.Ptr(t)
	case *SetTransaction:
		d.impl.ReplacementType = e.TypeId(AstTypeSetTransaction)
		d.impl.Replacement = e.Ptr(t)
	case *SetVar:
		d.impl.ReplacementType = e.TypeId(AstTypeSetVar)
		d.impl.Replacement = e.Ptr(t)
	case *SetZoneConfig:
		d.impl.ReplacementType = e.TypeId(AstTypeSetZoneConfig)
		d.impl.Replacement = e.Ptr(t)
	case *ShowBackup:
		d.impl.ReplacementType = e.TypeId(AstTypeShowBackup)
		d.impl.Replacement = e.Ptr(t)
	case *ShowClusterSetting:
		d.impl.ReplacementType = e.TypeId(AstTypeShowClusterSetting)
		d.impl.Replacement = e.Ptr(t)
	case *ShowColumns:
		d.impl.ReplacementType = e.TypeId(AstTypeShowColumns)
		d.impl.Replacement = e.Ptr(t)
	case *ShowConstraints:
		d.impl.ReplacementType = e.TypeId(AstTypeShowConstraints)
		d.impl.Replacement = e.Ptr(t)
	case *ShowCreate:
		d.impl.ReplacementType = e.TypeId(AstTypeShowCreate)
		d.impl.Replacement = e.Ptr(t)
	case *ShowDatabases:
		d.impl.ReplacementType = e.TypeId(AstTypeShowDatabases)
		d.impl.Replacement = e.Ptr(t)
	case *ShowFingerprints:
		d.impl.ReplacementType = e.TypeId(AstTypeShowFingerprints)
		d.impl.Replacement = e.Ptr(t)
	case *ShowGrants:
		d.impl.ReplacementType = e.TypeId(AstTypeShowGrants)
		d.impl.Replacement = e.Ptr(t)
	case *ShowHistogram:
		d.impl.ReplacementType = e.TypeId(AstTypeShowHistogram)
		d.impl.Replacement = e.Ptr(t)
	case *ShowIndex:
		d.impl.ReplacementType = e.TypeId(AstTypeShowIndex)
		d.impl.Replacement = e.Ptr(t)
	case *ShowJobs:
		d.impl.ReplacementType = e.TypeId(AstTypeShowJobs)
		d.impl.Replacement = e.Ptr(t)
	case *ShowQueries:
		d.impl.ReplacementType = e.TypeId(AstTypeShowQueries)
		d.impl.Replacement = e.Ptr(t)
	case *ShowRanges:
		d.impl.ReplacementType = e.TypeId(AstTypeShowRanges)
		d.impl.Replacement = e.Ptr(t)
	case *ShowRoleGrants:
		d.impl.ReplacementType = e.TypeId(AstTypeShowRoleGrants)
		d.impl.Replacement = e.Ptr(t)
	case *ShowRoles:
		d.impl.ReplacementType = e.TypeId(AstTypeShowRoles)
		d.impl.Replacement = e.Ptr(t)
	case *ShowSchemas:
		d.impl.ReplacementType = e.TypeId(AstTypeShowSchemas)
		d.impl.Replacement = e.Ptr(t)
	case *ShowSessions:
		d.impl.ReplacementType = e.TypeId(AstTypeShowSessions)
		d.impl.Replacement = e.Ptr(t)
	case *ShowSyntax:
		d.impl.ReplacementType = e.TypeId(AstTypeShowSyntax)
		d.impl.Replacement = e.Ptr(t)
	case *ShowTableStats:
		d.impl.ReplacementType = e.TypeId(AstTypeShowTableStats)
		d.impl.Replacement = e.Ptr(t)
	case *ShowTables:
		d.impl.ReplacementType = e.TypeId(AstTypeShowTables)
		d.impl.Replacement = e.Ptr(t)
	case *ShowTraceForSession:
		d.impl.ReplacementType = e.TypeId(AstTypeShowTraceForSession)
		d.impl.Replacement = e.Ptr(t)
	case *ShowTransactionStatus:
		d.impl.ReplacementType = e.TypeId(AstTypeShowTransactionStatus)
		d.impl.Replacement = e.Ptr(t)
	case *ShowUsers:
		d.impl.ReplacementType = e.TypeId(AstTypeShowUsers)
		d.impl.Replacement = e.Ptr(t)
	case *ShowVar:
		d.impl.ReplacementType = e.TypeId(AstTypeShowVar)
		d.impl.Replacement = e.Ptr(t)
	case *ShowZoneConfig:
		d.impl.ReplacementType = e.TypeId(AstTypeShowZoneConfig)
		d.impl.Replacement = e.Ptr(t)
	case *Split:
		d.impl.ReplacementType = e.TypeId(AstTypeSplit)
		d.impl.Replacement = e.Ptr(t)
	case *StrVal:
		d.impl.ReplacementType = e.TypeId(AstTypeStrVal)
		d.impl.Replacement = e.Ptr(t)
	case *Subquery:
		d.impl.ReplacementType = e.TypeId(AstTypeSubquery)
		d.impl.Replacement = e.Ptr(t)
	case *TableName:
		d.impl.ReplacementType = e.TypeId(AstTypeTableName)
		d.impl.Replacement = e.Ptr(t)
	case *TableNamePrefix:
		d.impl.ReplacementType = e.TypeId(AstTypeTableNamePrefix)
		d.impl.Replacement = e.Ptr(t)
	case *TableNameWithIndex:
		d.impl.ReplacementType = e.TypeId(AstTypeTableNameWithIndex)
		d.impl.Replacement = e.Ptr(t)
	case *TargetList:
		d.impl.ReplacementType = e.TypeId(AstTypeTargetList)
		d.impl.Replacement = e.Ptr(t)
	case *TransactionModes:
		d.impl.ReplacementType = e.TypeId(AstTypeTransactionModes)
		d.impl.Replacement = e.Ptr(t)
	case *Truncate:
		d.impl.ReplacementType = e.TypeId(AstTypeTruncate)
		d.impl.Replacement = e.Ptr(t)
	case *Tuple:
		d.impl.ReplacementType = e.TypeId(AstTypeTuple)
		d.impl.Replacement = e.Ptr(t)
	case *TupleStar:
		d.impl.ReplacementType = e.TypeId(AstTypeTupleStar)
		d.impl.Replacement = e.Ptr(t)
	case *UnaryExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeUnaryExpr)
		d.impl.Replacement = e.Ptr(t)
	case *UnionClause:
		d.impl.ReplacementType = e.TypeId(AstTypeUnionClause)
		d.impl.Replacement = e.Ptr(t)
	case *UnqualifiedStar:
		d.impl.ReplacementType = e.TypeId(AstTypeUnqualifiedStar)
		d.impl.Replacement = e.Ptr(t)
	case *UnresolvedName:
		d.impl.ReplacementType = e.TypeId(AstTypeUnresolvedName)
		d.impl.Replacement = e.Ptr(t)
	case *Update:
		d.impl.ReplacementType = e.TypeId(AstTypeUpdate)
		d.impl.Replacement = e.Ptr(t)
	case *UpdateExpr:
		d.impl.ReplacementType = e.TypeId(AstTypeUpdateExpr)
		d.impl.Replacement = e.Ptr(t)
	case *ValuesClause:
		d.impl.ReplacementType = e.TypeId(AstTypeValuesClause)
		d.impl.Replacement = e.Ptr(t)
	case *ValuesClauseWithNames:
		d.impl.ReplacementType = e.TypeId(AstTypeValuesClauseWithNames)
		d.impl.Replacement = e.Ptr(t)
	case *When:
		d.impl.ReplacementType = e.TypeId(AstTypeWhen)
		d.impl.Replacement = e.Ptr(t)
	case *Where:
		d.impl.ReplacementType = e.TypeId(AstTypeWhere)
		d.impl.Replacement = e.Ptr(t)
	case *WindowDef:
		d.impl.ReplacementType = e.TypeId(AstTypeWindowDef)
		d.impl.Replacement = e.Ptr(t)
	case *WindowFrame:
		d.impl.ReplacementType = e.TypeId(AstTypeWindowFrame)
		d.impl.Replacement = e.Ptr(t)
	case *WindowFrameBound:
		d.impl.ReplacementType = e.TypeId(AstTypeWindowFrameBound)
		d.impl.Replacement = e.Ptr(t)
	case *WindowFrameBounds:
		d.impl.ReplacementType = e.TypeId(AstTypeWindowFrameBounds)
		d.impl.Replacement = e.Ptr(t)
	case *With:
		d.impl.ReplacementType = e.TypeId(AstTypeWith)
		d.impl.Replacement = e.Ptr(t)
	case *ZoneSpecifier:
		d.impl.ReplacementType = e.TypeId(AstTypeZoneSpecifier)
		d.impl.Replacement = e.Ptr(t)
	default:
		panic("unhandled type passed to Replace(). Is the generated code out of date?")
	}
	return d
}

// Post registers a post-visit function, which will be called after the
// fields of the current object. The function can make another decision
// about the current value.
func (d AstDecision) Post(fn AstWalkerFn) AstDecision {
	d.impl.Post = fn
	return d
}

// astAbstract is a type-safe facade around e.Abstract.
type astAbstract struct {
	delegate *e.Abstract
}

var _ AstAbstract = &astAbstract{}

// ChildAt implements AstAbstract.
func (a *astAbstract) ChildAt(index int) (ret AstAbstract) {
	impl := a.delegate.ChildAt(index)
	if impl == nil {
		return nil
	}
	switch AstTypeId(impl.TypeId()) {
	case AstTypeAliasClause:
		ret = (*AliasClause)(impl.Ptr())
	case AstTypeAliasClausePtr:
		ret = *(**AliasClause)(impl.Ptr())
	case AstTypeAllColumnsSelector:
		ret = (*AllColumnsSelector)(impl.Ptr())
	case AstTypeAllColumnsSelectorPtr:
		ret = *(**AllColumnsSelector)(impl.Ptr())
	case AstTypeAlterIndex:
		ret = (*AlterIndex)(impl.Ptr())
	case AstTypeAlterIndexPtr:
		ret = *(**AlterIndex)(impl.Ptr())
	case AstTypeAlterSequence:
		ret = (*AlterSequence)(impl.Ptr())
	case AstTypeAlterSequencePtr:
		ret = *(**AlterSequence)(impl.Ptr())
	case AstTypeAlterTable:
		ret = (*AlterTable)(impl.Ptr())
	case AstTypeAlterTablePtr:
		ret = *(**AlterTable)(impl.Ptr())
	case AstTypeAlterUserSetPassword:
		ret = (*AlterUserSetPassword)(impl.Ptr())
	case AstTypeAlterUserSetPasswordPtr:
		ret = *(**AlterUserSetPassword)(impl.Ptr())
	case AstTypeAndExpr:
		ret = (*AndExpr)(impl.Ptr())
	case AstTypeAndExprPtr:
		ret = *(**AndExpr)(impl.Ptr())
	case AstTypeAnnotateTypeExpr:
		ret = (*AnnotateTypeExpr)(impl.Ptr())
	case AstTypeAnnotateTypeExprPtr:
		ret = *(**AnnotateTypeExpr)(impl.Ptr())
	case AstTypeArray:
		ret = (*Array)(impl.Ptr())
	case AstTypeArrayPtr:
		ret = *(**Array)(impl.Ptr())
	case AstTypeArrayFlatten:
		ret = (*ArrayFlatten)(impl.Ptr())
	case AstTypeArrayFlattenPtr:
		ret = *(**ArrayFlatten)(impl.Ptr())
	case AstTypeArraySubscript:
		ret = (*ArraySubscript)(impl.Ptr())
	case AstTypeArraySubscriptPtr:
		ret = *(**ArraySubscript)(impl.Ptr())
	case AstTypeAsOfClause:
		ret = (*AsOfClause)(impl.Ptr())
	case AstTypeAsOfClausePtr:
		ret = *(**AsOfClause)(impl.Ptr())
	case AstTypeBackup:
		ret = (*Backup)(impl.Ptr())
	case AstTypeBackupPtr:
		ret = *(**Backup)(impl.Ptr())
	case AstTypeBeginTransaction:
		ret = (*BeginTransaction)(impl.Ptr())
	case AstTypeBeginTransactionPtr:
		ret = *(**BeginTransaction)(impl.Ptr())
	case AstTypeBinaryExpr:
		ret = (*BinaryExpr)(impl.Ptr())
	case AstTypeBinaryExprPtr:
		ret = *(**BinaryExpr)(impl.Ptr())
	case AstTypeCTE:
		ret = (*CTE)(impl.Ptr())
	case AstTypeCTEPtr:
		ret = *(**CTE)(impl.Ptr())
	case AstTypeCancelQueries:
		ret = (*CancelQueries)(impl.Ptr())
	case AstTypeCancelQueriesPtr:
		ret = *(**CancelQueries)(impl.Ptr())
	case AstTypeCancelSessions:
		ret = (*CancelSessions)(impl.Ptr())
	case AstTypeCancelSessionsPtr:
		ret = *(**CancelSessions)(impl.Ptr())
	case AstTypeCaseExpr:
		ret = (*CaseExpr)(impl.Ptr())
	case AstTypeCaseExprPtr:
		ret = *(**CaseExpr)(impl.Ptr())
	case AstTypeCastExpr:
		ret = (*CastExpr)(impl.Ptr())
	case AstTypeCastExprPtr:
		ret = *(**CastExpr)(impl.Ptr())
	case AstTypeCoalesceExpr:
		ret = (*CoalesceExpr)(impl.Ptr())
	case AstTypeCoalesceExprPtr:
		ret = *(**CoalesceExpr)(impl.Ptr())
	case AstTypeCollateExpr:
		ret = (*CollateExpr)(impl.Ptr())
	case AstTypeCollateExprPtr:
		ret = *(**CollateExpr)(impl.Ptr())
	case AstTypeColumnAccessExpr:
		ret = (*ColumnAccessExpr)(impl.Ptr())
	case AstTypeColumnAccessExprPtr:
		ret = *(**ColumnAccessExpr)(impl.Ptr())
	case AstTypeColumnItem:
		ret = (*ColumnItem)(impl.Ptr())
	case AstTypeColumnItemPtr:
		ret = *(**ColumnItem)(impl.Ptr())
	case AstTypeCommentOnTable:
		ret = (*CommentOnTable)(impl.Ptr())
	case AstTypeCommentOnTablePtr:
		ret = *(**CommentOnTable)(impl.Ptr())
	case AstTypeCommitTransaction:
		ret = (*CommitTransaction)(impl.Ptr())
	case AstTypeCommitTransactionPtr:
		ret = *(**CommitTransaction)(impl.Ptr())
	case AstTypeComparisonExpr:
		ret = (*ComparisonExpr)(impl.Ptr())
	case AstTypeComparisonExprPtr:
		ret = *(**ComparisonExpr)(impl.Ptr())
	case AstTypeControlJobs:
		ret = (*ControlJobs)(impl.Ptr())
	case AstTypeControlJobsPtr:
		ret = *(**ControlJobs)(impl.Ptr())
	case AstTypeCopyFrom:
		ret = (*CopyFrom)(impl.Ptr())
	case AstTypeCopyFromPtr:
		ret = *(**CopyFrom)(impl.Ptr())
	case AstTypeCreateChangefeed:
		ret = (*CreateChangefeed)(impl.Ptr())
	case AstTypeCreateChangefeedPtr:
		ret = *(**CreateChangefeed)(impl.Ptr())
	case AstTypeCreateDatabase:
		ret = (*CreateDatabase)(impl.Ptr())
	case AstTypeCreateDatabasePtr:
		ret = *(**CreateDatabase)(impl.Ptr())
	case AstTypeCreateIndex:
		ret = (*CreateIndex)(impl.Ptr())
	case AstTypeCreateIndexPtr:
		ret = *(**CreateIndex)(impl.Ptr())
	case AstTypeCreateRole:
		ret = (*CreateRole)(impl.Ptr())
	case AstTypeCreateRolePtr:
		ret = *(**CreateRole)(impl.Ptr())
	case AstTypeCreateSequence:
		ret = (*CreateSequence)(impl.Ptr())
	case AstTypeCreateSequencePtr:
		ret = *(**CreateSequence)(impl.Ptr())
	case AstTypeCreateStats:
		ret = (*CreateStats)(impl.Ptr())
	case AstTypeCreateStatsPtr:
		ret = *(**CreateStats)(impl.Ptr())
	case AstTypeCreateTable:
		ret = (*CreateTable)(impl.Ptr())
	case AstTypeCreateTablePtr:
		ret = *(**CreateTable)(impl.Ptr())
	case AstTypeCreateUser:
		ret = (*CreateUser)(impl.Ptr())
	case AstTypeCreateUserPtr:
		ret = *(**CreateUser)(impl.Ptr())
	case AstTypeCreateView:
		ret = (*CreateView)(impl.Ptr())
	case AstTypeCreateViewPtr:
		ret = *(**CreateView)(impl.Ptr())
	case AstTypeDArray:
		ret = (*DArray)(impl.Ptr())
	case AstTypeDArrayPtr:
		ret = *(**DArray)(impl.Ptr())
	case AstTypeDBitArray:
		ret = (*DBitArray)(impl.Ptr())
	case AstTypeDBitArrayPtr:
		ret = *(**DBitArray)(impl.Ptr())
	case AstTypeDCollatedString:
		ret = (*DCollatedString)(impl.Ptr())
	case AstTypeDCollatedStringPtr:
		ret = *(**DCollatedString)(impl.Ptr())
	case AstTypeDDecimal:
		ret = (*DDecimal)(impl.Ptr())
	case AstTypeDDecimalPtr:
		ret = *(**DDecimal)(impl.Ptr())
	case AstTypeDIPAddr:
		ret = (*DIPAddr)(impl.Ptr())
	case AstTypeDIPAddrPtr:
		ret = *(**DIPAddr)(impl.Ptr())
	case AstTypeDInterval:
		ret = (*DInterval)(impl.Ptr())
	case AstTypeDIntervalPtr:
		ret = *(**DInterval)(impl.Ptr())
	case AstTypeDJSON:
		ret = (*DJSON)(impl.Ptr())
	case AstTypeDJSONPtr:
		ret = *(**DJSON)(impl.Ptr())
	case AstTypeDOid:
		ret = (*DOid)(impl.Ptr())
	case AstTypeDOidPtr:
		ret = *(**DOid)(impl.Ptr())
	case AstTypeDOidWrapper:
		ret = (*DOidWrapper)(impl.Ptr())
	case AstTypeDOidWrapperPtr:
		ret = *(**DOidWrapper)(impl.Ptr())
	case AstTypeDTimestamp:
		ret = (*DTimestamp)(impl.Ptr())
	case AstTypeDTimestampPtr:
		ret = *(**DTimestamp)(impl.Ptr())
	case AstTypeDTimestampTZ:
		ret = (*DTimestampTZ)(impl.Ptr())
	case AstTypeDTimestampTZPtr:
		ret = *(**DTimestampTZ)(impl.Ptr())
	case AstTypeDTuple:
		ret = (*DTuple)(impl.Ptr())
	case AstTypeDTuplePtr:
		ret = *(**DTuple)(impl.Ptr())
	case AstTypeDUuid:
		ret = (*DUuid)(impl.Ptr())
	case AstTypeDUuidPtr:
		ret = *(**DUuid)(impl.Ptr())
	case AstTypeDeallocate:
		ret = (*Deallocate)(impl.Ptr())
	case AstTypeDeallocatePtr:
		ret = *(**Deallocate)(impl.Ptr())
	case AstTypeDefaultVal:
		ret = (*DefaultVal)(impl.Ptr())
	case AstTypeDefaultValPtr:
		ret = *(**DefaultVal)(impl.Ptr())
	case AstTypeDelete:
		ret = (*Delete)(impl.Ptr())
	case AstTypeDeletePtr:
		ret = *(**Delete)(impl.Ptr())
	case AstTypeDiscard:
		ret = (*Discard)(impl.Ptr())
	case AstTypeDiscardPtr:
		ret = *(**Discard)(impl.Ptr())
	case AstTypeDropDatabase:
		ret = (*DropDatabase)(impl.Ptr())
	case AstTypeDropDatabasePtr:
		ret = *(**DropDatabase)(impl.Ptr())
	case AstTypeDropIndex:
		ret = (*DropIndex)(impl.Ptr())
	case AstTypeDropIndexPtr:
		ret = *(**DropIndex)(impl.Ptr())
	case AstTypeDropRole:
		ret = (*DropRole)(impl.Ptr())
	case AstTypeDropRolePtr:
		ret = *(**DropRole)(impl.Ptr())
	case AstTypeDropSequence:
		ret = (*DropSequence)(impl.Ptr())
	case AstTypeDropSequencePtr:
		ret = *(**DropSequence)(impl.Ptr())
	case AstTypeDropTable:
		ret = (*DropTable)(impl.Ptr())
	case AstTypeDropTablePtr:
		ret = *(**DropTable)(impl.Ptr())
	case AstTypeDropUser:
		ret = (*DropUser)(impl.Ptr())
	case AstTypeDropUserPtr:
		ret = *(**DropUser)(impl.Ptr())
	case AstTypeDropView:
		ret = (*DropView)(impl.Ptr())
	case AstTypeDropViewPtr:
		ret = *(**DropView)(impl.Ptr())
	case AstTypeExecute:
		ret = (*Execute)(impl.Ptr())
	case AstTypeExecutePtr:
		ret = *(**Execute)(impl.Ptr())
	case AstTypeExplain:
		ret = (*Explain)(impl.Ptr())
	case AstTypeExplainPtr:
		ret = *(**Explain)(impl.Ptr())
	case AstTypeExport:
		ret = (*Export)(impl.Ptr())
	case AstTypeExportPtr:
		ret = *(**Export)(impl.Ptr())
	case AstTypeFrom:
		ret = (*From)(impl.Ptr())
	case AstTypeFromPtr:
		ret = *(**From)(impl.Ptr())
	case AstTypeFuncExpr:
		ret = (*FuncExpr)(impl.Ptr())
	case AstTypeFuncExprPtr:
		ret = *(**FuncExpr)(impl.Ptr())
	case AstTypeGrant:
		ret = (*Grant)(impl.Ptr())
	case AstTypeGrantPtr:
		ret = *(**Grant)(impl.Ptr())
	case AstTypeGrantRole:
		ret = (*GrantRole)(impl.Ptr())
	case AstTypeGrantRolePtr:
		ret = *(**GrantRole)(impl.Ptr())
	case AstTypeIfErrExpr:
		ret = (*IfErrExpr)(impl.Ptr())
	case AstTypeIfErrExprPtr:
		ret = *(**IfErrExpr)(impl.Ptr())
	case AstTypeIfExpr:
		ret = (*IfExpr)(impl.Ptr())
	case AstTypeIfExprPtr:
		ret = *(**IfExpr)(impl.Ptr())
	case AstTypeImport:
		ret = (*Import)(impl.Ptr())
	case AstTypeImportPtr:
		ret = *(**Import)(impl.Ptr())
	case AstTypeIndexElem:
		ret = (*IndexElem)(impl.Ptr())
	case AstTypeIndexElemPtr:
		ret = *(**IndexElem)(impl.Ptr())
	case AstTypeIndexedVar:
		ret = (*IndexedVar)(impl.Ptr())
	case AstTypeIndexedVarPtr:
		ret = *(**IndexedVar)(impl.Ptr())
	case AstTypeIndirectionExpr:
		ret = (*IndirectionExpr)(impl.Ptr())
	case AstTypeIndirectionExprPtr:
		ret = *(**IndirectionExpr)(impl.Ptr())
	case AstTypeInsert:
		ret = (*Insert)(impl.Ptr())
	case AstTypeInsertPtr:
		ret = *(**Insert)(impl.Ptr())
	case AstTypeInterleaveDef:
		ret = (*InterleaveDef)(impl.Ptr())
	case AstTypeInterleaveDefPtr:
		ret = *(**InterleaveDef)(impl.Ptr())
	case AstTypeIsOfTypeExpr:
		ret = (*IsOfTypeExpr)(impl.Ptr())
	case AstTypeIsOfTypeExprPtr:
		ret = *(**IsOfTypeExpr)(impl.Ptr())
	case AstTypeKVOption:
		ret = (*KVOption)(impl.Ptr())
	case AstTypeKVOptionPtr:
		ret = *(**KVOption)(impl.Ptr())
	case AstTypeLimit:
		ret = (*Limit)(impl.Ptr())
	case AstTypeLimitPtr:
		ret = *(**Limit)(impl.Ptr())
	case AstTypeListPartition:
		ret = (*ListPartition)(impl.Ptr())
	case AstTypeListPartitionPtr:
		ret = *(**ListPartition)(impl.Ptr())
	case AstTypeNotExpr:
		ret = (*NotExpr)(impl.Ptr())
	case AstTypeNotExprPtr:
		ret = *(**NotExpr)(impl.Ptr())
	case AstTypeNullIfExpr:
		ret = (*NullIfExpr)(impl.Ptr())
	case AstTypeNullIfExprPtr:
		ret = *(**NullIfExpr)(impl.Ptr())
	case AstTypeNumVal:
		ret = (*NumVal)(impl.Ptr())
	case AstTypeNumValPtr:
		ret = *(**NumVal)(impl.Ptr())
	case AstTypeOnConflict:
		ret = (*OnConflict)(impl.Ptr())
	case AstTypeOnConflictPtr:
		ret = *(**OnConflict)(impl.Ptr())
	case AstTypeOrExpr:
		ret = (*OrExpr)(impl.Ptr())
	case AstTypeOrExprPtr:
		ret = *(**OrExpr)(impl.Ptr())
	case AstTypeOrder:
		ret = (*Order)(impl.Ptr())
	case AstTypeOrderPtr:
		ret = *(**Order)(impl.Ptr())
	case AstTypeParenExpr:
		ret = (*ParenExpr)(impl.Ptr())
	case AstTypeParenExprPtr:
		ret = *(**ParenExpr)(impl.Ptr())
	case AstTypeParenSelect:
		ret = (*ParenSelect)(impl.Ptr())
	case AstTypeParenSelectPtr:
		ret = *(**ParenSelect)(impl.Ptr())
	case AstTypePartitionBy:
		ret = (*PartitionBy)(impl.Ptr())
	case AstTypePartitionByPtr:
		ret = *(**PartitionBy)(impl.Ptr())
	case AstTypePartitionMaxVal:
		ret = (*PartitionMaxVal)(impl.Ptr())
	case AstTypePartitionMaxValPtr:
		ret = *(**PartitionMaxVal)(impl.Ptr())
	case AstTypePartitionMinVal:
		ret = (*PartitionMinVal)(impl.Ptr())
	case AstTypePartitionMinValPtr:
		ret = *(**PartitionMinVal)(impl.Ptr())
	case AstTypePlaceholder:
		ret = (*Placeholder)(impl.Ptr())
	case AstTypePlaceholderPtr:
		ret = *(**Placeholder)(impl.Ptr())
	case AstTypePrepare:
		ret = (*Prepare)(impl.Ptr())
	case AstTypePreparePtr:
		ret = *(**Prepare)(impl.Ptr())
	case AstTypeRangeCond:
		ret = (*RangeCond)(impl.Ptr())
	case AstTypeRangeCondPtr:
		ret = *(**RangeCond)(impl.Ptr())
	case AstTypeRangePartition:
		ret = (*RangePartition)(impl.Ptr())
	case AstTypeRangePartitionPtr:
		ret = *(**RangePartition)(impl.Ptr())
	case AstTypeReleaseSavepoint:
		ret = (*ReleaseSavepoint)(impl.Ptr())
	case AstTypeReleaseSavepointPtr:
		ret = *(**ReleaseSavepoint)(impl.Ptr())
	case AstTypeRelocate:
		ret = (*Relocate)(impl.Ptr())
	case AstTypeRelocatePtr:
		ret = *(**Relocate)(impl.Ptr())
	case AstTypeRenameColumn:
		ret = (*RenameColumn)(impl.Ptr())
	case AstTypeRenameColumnPtr:
		ret = *(**RenameColumn)(impl.Ptr())
	case AstTypeRenameDatabase:
		ret = (*RenameDatabase)(impl.Ptr())
	case AstTypeRenameDatabasePtr:
		ret = *(**RenameDatabase)(impl.Ptr())
	case AstTypeRenameIndex:
		ret = (*RenameIndex)(impl.Ptr())
	case AstTypeRenameIndexPtr:
		ret = *(**RenameIndex)(impl.Ptr())
	case AstTypeRenameTable:
		ret = (*RenameTable)(impl.Ptr())
	case AstTypeRenameTablePtr:
		ret = *(**RenameTable)(impl.Ptr())
	case AstTypeResolvableFunctionReference:
		ret = (*ResolvableFunctionReference)(impl.Ptr())
	case AstTypeResolvableFunctionReferencePtr:
		ret = *(**ResolvableFunctionReference)(impl.Ptr())
	case AstTypeRestore:
		ret = (*Restore)(impl.Ptr())
	case AstTypeRestorePtr:
		ret = *(**Restore)(impl.Ptr())
	case AstTypeRevoke:
		ret = (*Revoke)(impl.Ptr())
	case AstTypeRevokePtr:
		ret = *(**Revoke)(impl.Ptr())
	case AstTypeRevokeRole:
		ret = (*RevokeRole)(impl.Ptr())
	case AstTypeRevokeRolePtr:
		ret = *(**RevokeRole)(impl.Ptr())
	case AstTypeRollbackToSavepoint:
		ret = (*RollbackToSavepoint)(impl.Ptr())
	case AstTypeRollbackToSavepointPtr:
		ret = *(**RollbackToSavepoint)(impl.Ptr())
	case AstTypeRollbackTransaction:
		ret = (*RollbackTransaction)(impl.Ptr())
	case AstTypeRollbackTransactionPtr:
		ret = *(**RollbackTransaction)(impl.Ptr())
	case AstTypeSavepoint:
		ret = (*Savepoint)(impl.Ptr())
	case AstTypeSavepointPtr:
		ret = *(**Savepoint)(impl.Ptr())
	case AstTypeScatter:
		ret = (*Scatter)(impl.Ptr())
	case AstTypeScatterPtr:
		ret = *(**Scatter)(impl.Ptr())
	case AstTypeScrub:
		ret = (*Scrub)(impl.Ptr())
	case AstTypeScrubPtr:
		ret = *(**Scrub)(impl.Ptr())
	case AstTypeSelect:
		ret = (*Select)(impl.Ptr())
	case AstTypeSelectPtr:
		ret = *(**Select)(impl.Ptr())
	case AstTypeSelectClause:
		ret = (*SelectClause)(impl.Ptr())
	case AstTypeSelectClausePtr:
		ret = *(**SelectClause)(impl.Ptr())
	case AstTypeSelectExpr:
		ret = (*SelectExpr)(impl.Ptr())
	case AstTypeSelectExprPtr:
		ret = *(**SelectExpr)(impl.Ptr())
	case AstTypeSequenceOption:
		ret = (*SequenceOption)(impl.Ptr())
	case AstTypeSequenceOptionPtr:
		ret = *(**SequenceOption)(impl.Ptr())
	case AstTypeSetClusterSetting:
		ret = (*SetClusterSetting)(impl.Ptr())
	case AstTypeSetClusterSettingPtr:
		ret = *(**SetClusterSetting)(impl.Ptr())
	case AstTypeSetSessionCharacteristics:
		ret = (*SetSessionCharacteristics)(impl.Ptr())
	case AstTypeSetSessionCharacteristicsPtr:
		ret = *(**SetSessionCharacteristics)(impl.Ptr())
	case AstTypeSetTracing:
		ret = (*SetTracing)(impl.Ptr())
	case AstTypeSetTracingPtr:
		ret = *(**SetTracing)(impl.Ptr())
	case AstTypeSetTransaction:
		ret = (*SetTransaction)(impl.Ptr())
	case AstTypeSetTransactionPtr:
		ret = *(**SetTransaction)(impl.Ptr())
	case AstTypeSetVar:
		ret = (*SetVar)(impl.Ptr())
	case AstTypeSetVarPtr:
		ret = *(**SetVar)(impl.Ptr())
	case AstTypeSetZoneConfig:
		ret = (*SetZoneConfig)(impl.Ptr())
	case AstTypeSetZoneConfigPtr:
		ret = *(**SetZoneConfig)(impl.Ptr())
	case AstTypeShowBackup:
		ret = (*ShowBackup)(impl.Ptr())
	case AstTypeShowBackupPtr:
		ret = *(**ShowBackup)(impl.Ptr())
	case AstTypeShowClusterSetting:
		ret = (*ShowClusterSetting)(impl.Ptr())
	case AstTypeShowClusterSettingPtr:
		ret = *(**ShowClusterSetting)(impl.Ptr())
	case AstTypeShowColumns:
		ret = (*ShowColumns)(impl.Ptr())
	case AstTypeShowColumnsPtr:
		ret = *(**ShowColumns)(impl.Ptr())
	case AstTypeShowConstraints:
		ret = (*ShowConstraints)(impl.Ptr())
	case AstTypeShowConstraintsPtr:
		ret = *(**ShowConstraints)(impl.Ptr())
	case AstTypeShowCreate:
		ret = (*ShowCreate)(impl.Ptr())
	case AstTypeShowCreatePtr:
		ret = *(**ShowCreate)(impl.Ptr())
	case AstTypeShowDatabases:
		ret = (*ShowDatabases)(impl.Ptr())
	case AstTypeShowDatabasesPtr:
		ret = *(**ShowDatabases)(impl.Ptr())
	case AstTypeShowFingerprints:
		ret = (*ShowFingerprints)(impl.Ptr())
	case AstTypeShowFingerprintsPtr:
		ret = *(**ShowFingerprints)(impl.Ptr())
	case AstTypeShowGrants:
		ret = (*ShowGrants)(impl.Ptr())
	case AstTypeShowGrantsPtr:
		ret = *(**ShowGrants)(impl.Ptr())
	case AstTypeShowHistogram:
		ret = (*ShowHistogram)(impl.Ptr())
	case AstTypeShowHistogramPtr:
		ret = *(**ShowHistogram)(impl.Ptr())
	case AstTypeShowIndex:
		ret = (*ShowIndex)(impl.Ptr())
	case AstTypeShowIndexPtr:
		ret = *(**ShowIndex)(impl.Ptr())
	case AstTypeShowJobs:
		ret = (*ShowJobs)(impl.Ptr())
	case AstTypeShowJobsPtr:
		ret = *(**ShowJobs)(impl.Ptr())
	case AstTypeShowQueries:
		ret = (*ShowQueries)(impl.Ptr())
	case AstTypeShowQueriesPtr:
		ret = *(**ShowQueries)(impl.Ptr())
	case AstTypeShowRanges:
		ret = (*ShowRanges)(impl.Ptr())
	case AstTypeShowRangesPtr:
		ret = *(**ShowRanges)(impl.Ptr())
	case AstTypeShowRoleGrants:
		ret = (*ShowRoleGrants)(impl.Ptr())
	case AstTypeShowRoleGrantsPtr:
		ret = *(**ShowRoleGrants)(impl.Ptr())
	case AstTypeShowRoles:
		ret = (*ShowRoles)(impl.Ptr())
	case AstTypeShowRolesPtr:
		ret = *(**ShowRoles)(impl.Ptr())
	case AstTypeShowSchemas:
		ret = (*ShowSchemas)(impl.Ptr())
	case AstTypeShowSchemasPtr:
		ret = *(**ShowSchemas)(impl.Ptr())
	case AstTypeShowSessions:
		ret = (*ShowSessions)(impl.Ptr())
	case AstTypeShowSessionsPtr:
		ret = *(**ShowSessions)(impl.Ptr())
	case AstTypeShowSyntax:
		ret = (*ShowSyntax)(impl.Ptr())
	case AstTypeShowSyntaxPtr:
		ret = *(**ShowSyntax)(impl.Ptr())
	case AstTypeShowTableStats:
		ret = (*ShowTableStats)(impl.Ptr())
	case AstTypeShowTableStatsPtr:
		ret = *(**ShowTableStats)(impl.Ptr())
	case AstTypeShowTables:
		ret = (*ShowTables)(impl.Ptr())
	case AstTypeShowTablesPtr:
		ret = *(**ShowTables)(impl.Ptr())
	case AstTypeShowTraceForSession:
		ret = (*ShowTraceForSession)(impl.Ptr())
	case AstTypeShowTraceForSessionPtr:
		ret = *(**ShowTraceForSession)(impl.Ptr())
	case AstTypeShowTransactionStatus:
		ret = (*ShowTransactionStatus)(impl.Ptr())
	case AstTypeShowTransactionStatusPtr:
		ret = *(**ShowTransactionStatus)(impl.Ptr())
	case AstTypeShowUsers:
		ret = (*ShowUsers)(impl.Ptr())
	case AstTypeShowUsersPtr:
		ret = *(**ShowUsers)(impl.Ptr())
	case AstTypeShowVar:
		ret = (*ShowVar)(impl.Ptr())
	case AstTypeShowVarPtr:
		ret = *(**ShowVar)(impl.Ptr())
	case AstTypeShowZoneConfig:
		ret = (*ShowZoneConfig)(impl.Ptr())
	case AstTypeShowZoneConfigPtr:
		ret = *(**ShowZoneConfig)(impl.Ptr())
	case AstTypeSplit:
		ret = (*Split)(impl.Ptr())
	case AstTypeSplitPtr:
		ret = *(**Split)(impl.Ptr())
	case AstTypeStrVal:
		ret = (*StrVal)(impl.Ptr())
	case AstTypeStrValPtr:
		ret = *(**StrVal)(impl.Ptr())
	case AstTypeSubquery:
		ret = (*Subquery)(impl.Ptr())
	case AstTypeSubqueryPtr:
		ret = *(**Subquery)(impl.Ptr())
	case AstTypeTableName:
		ret = (*TableName)(impl.Ptr())
	case AstTypeTableNamePtr:
		ret = *(**TableName)(impl.Ptr())
	case AstTypeTableNamePrefix:
		ret = (*TableNamePrefix)(impl.Ptr())
	case AstTypeTableNamePrefixPtr:
		ret = *(**TableNamePrefix)(impl.Ptr())
	case AstTypeTableNameWithIndex:
		ret = (*TableNameWithIndex)(impl.Ptr())
	case AstTypeTableNameWithIndexPtr:
		ret = *(**TableNameWithIndex)(impl.Ptr())
	case AstTypeTargetList:
		ret = (*TargetList)(impl.Ptr())
	case AstTypeTargetListPtr:
		ret = *(**TargetList)(impl.Ptr())
	case AstTypeTransactionModes:
		ret = (*TransactionModes)(impl.Ptr())
	case AstTypeTransactionModesPtr:
		ret = *(**TransactionModes)(impl.Ptr())
	case AstTypeTruncate:
		ret = (*Truncate)(impl.Ptr())
	case AstTypeTruncatePtr:
		ret = *(**Truncate)(impl.Ptr())
	case AstTypeTuple:
		ret = (*Tuple)(impl.Ptr())
	case AstTypeTuplePtr:
		ret = *(**Tuple)(impl.Ptr())
	case AstTypeTupleStar:
		ret = (*TupleStar)(impl.Ptr())
	case AstTypeTupleStarPtr:
		ret = *(**TupleStar)(impl.Ptr())
	case AstTypeUnaryExpr:
		ret = (*UnaryExpr)(impl.Ptr())
	case AstTypeUnaryExprPtr:
		ret = *(**UnaryExpr)(impl.Ptr())
	case AstTypeUnionClause:
		ret = (*UnionClause)(impl.Ptr())
	case AstTypeUnionClausePtr:
		ret = *(**UnionClause)(impl.Ptr())
	case AstTypeUnqualifiedStar:
		ret = (*UnqualifiedStar)(impl.Ptr())
	case AstTypeUnqualifiedStarPtr:
		ret = *(**UnqualifiedStar)(impl.Ptr())
	case AstTypeUnresolvedName:
		ret = (*UnresolvedName)(impl.Ptr())
	case AstTypeUnresolvedNamePtr:
		ret = *(**UnresolvedName)(impl.Ptr())
	case AstTypeUpdate:
		ret = (*Update)(impl.Ptr())
	case AstTypeUpdatePtr:
		ret = *(**Update)(impl.Ptr())
	case AstTypeUpdateExpr:
		ret = (*UpdateExpr)(impl.Ptr())
	case AstTypeUpdateExprPtr:
		ret = *(**UpdateExpr)(impl.Ptr())
	case AstTypeValuesClause:
		ret = (*ValuesClause)(impl.Ptr())
	case AstTypeValuesClausePtr:
		ret = *(**ValuesClause)(impl.Ptr())
	case AstTypeValuesClauseWithNames:
		ret = (*ValuesClauseWithNames)(impl.Ptr())
	case AstTypeValuesClauseWithNamesPtr:
		ret = *(**ValuesClauseWithNames)(impl.Ptr())
	case AstTypeWhen:
		ret = (*When)(impl.Ptr())
	case AstTypeWhenPtr:
		ret = *(**When)(impl.Ptr())
	case AstTypeWhere:
		ret = (*Where)(impl.Ptr())
	case AstTypeWherePtr:
		ret = *(**Where)(impl.Ptr())
	case AstTypeWindowDef:
		ret = (*WindowDef)(impl.Ptr())
	case AstTypeWindowDefPtr:
		ret = *(**WindowDef)(impl.Ptr())
	case AstTypeWindowFrame:
		ret = (*WindowFrame)(impl.Ptr())
	case AstTypeWindowFramePtr:
		ret = *(**WindowFrame)(impl.Ptr())
	case AstTypeWindowFrameBound:
		ret = (*WindowFrameBound)(impl.Ptr())
	case AstTypeWindowFrameBoundPtr:
		ret = *(**WindowFrameBound)(impl.Ptr())
	case AstTypeWindowFrameBounds:
		ret = (*WindowFrameBounds)(impl.Ptr())
	case AstTypeWindowFrameBoundsPtr:
		ret = *(**WindowFrameBounds)(impl.Ptr())
	case AstTypeWith:
		ret = (*With)(impl.Ptr())
	case AstTypeWithPtr:
		ret = *(**With)(impl.Ptr())
	case AstTypeZoneSpecifier:
		ret = (*ZoneSpecifier)(impl.Ptr())
	case AstTypeZoneSpecifierPtr:
		ret = *(**ZoneSpecifier)(impl.Ptr())
	default:
		ret = &astAbstract{impl}
	}
	return
}

// NumChildren implements AstAbstract.
func (a *astAbstract) NumChildren() int {
	return a.delegate.NumChildren()
}

// TypeId implements AstAbstract.
func (a *astAbstract) TypeId() AstTypeId {
	return AstTypeId(a.delegate.TypeId())
}

// ChildAt implements AstAbstract.
func (x *AliasClause) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAliasClause), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *AliasClause) NumChildren() int { return 0 }

// TypeId returns AstTypeAliasClause.
func (*AliasClause) TypeId() AstTypeId { return AstTypeAliasClause }

// WalkAst visits the receiver with the provided callback.
func (x *AliasClause) WalkAst(fn AstWalkerFn) (_ *AliasClause, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAliasClause), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AliasClause)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AllColumnsSelector) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAllColumnsSelector), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *AllColumnsSelector) NumChildren() int { return 1 }

// TypeId returns AstTypeAllColumnsSelector.
func (*AllColumnsSelector) TypeId() AstTypeId { return AstTypeAllColumnsSelector }

// WalkAst visits the receiver with the provided callback.
func (x *AllColumnsSelector) WalkAst(
	fn AstWalkerFn,
) (_ *AllColumnsSelector, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAllColumnsSelector), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AllColumnsSelector)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AlterIndex) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAlterIndex), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *AlterIndex) NumChildren() int { return 2 }

// TypeId returns AstTypeAlterIndex.
func (*AlterIndex) TypeId() AstTypeId { return AstTypeAlterIndex }

// WalkAst visits the receiver with the provided callback.
func (x *AlterIndex) WalkAst(fn AstWalkerFn) (_ *AlterIndex, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAlterIndex), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AlterIndex)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AlterSequence) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAlterSequence), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *AlterSequence) NumChildren() int { return 2 }

// TypeId returns AstTypeAlterSequence.
func (*AlterSequence) TypeId() AstTypeId { return AstTypeAlterSequence }

// WalkAst visits the receiver with the provided callback.
func (x *AlterSequence) WalkAst(fn AstWalkerFn) (_ *AlterSequence, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAlterSequence), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AlterSequence)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AlterTable) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAlterTable), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *AlterTable) NumChildren() int { return 2 }

// TypeId returns AstTypeAlterTable.
func (*AlterTable) TypeId() AstTypeId { return AstTypeAlterTable }

// WalkAst visits the receiver with the provided callback.
func (x *AlterTable) WalkAst(fn AstWalkerFn) (_ *AlterTable, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAlterTable), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AlterTable)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AlterUserSetPassword) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAlterUserSetPassword), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *AlterUserSetPassword) NumChildren() int { return 2 }

// TypeId returns AstTypeAlterUserSetPassword.
func (*AlterUserSetPassword) TypeId() AstTypeId { return AstTypeAlterUserSetPassword }

// WalkAst visits the receiver with the provided callback.
func (x *AlterUserSetPassword) WalkAst(
	fn AstWalkerFn,
) (_ *AlterUserSetPassword, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAlterUserSetPassword), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AlterUserSetPassword)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AndExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAndExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *AndExpr) NumChildren() int { return 2 }

// TypeId returns AstTypeAndExpr.
func (*AndExpr) TypeId() AstTypeId { return AstTypeAndExpr }

// WalkAst visits the receiver with the provided callback.
func (x *AndExpr) WalkAst(fn AstWalkerFn) (_ *AndExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAndExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AndExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AnnotateTypeExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAnnotateTypeExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *AnnotateTypeExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeAnnotateTypeExpr.
func (*AnnotateTypeExpr) TypeId() AstTypeId { return AstTypeAnnotateTypeExpr }

// WalkAst visits the receiver with the provided callback.
func (x *AnnotateTypeExpr) WalkAst(fn AstWalkerFn) (_ *AnnotateTypeExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAnnotateTypeExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AnnotateTypeExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Array) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeArray), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Array) NumChildren() int { return 1 }

// TypeId returns AstTypeArray.
func (*Array) TypeId() AstTypeId { return AstTypeArray }

// WalkAst visits the receiver with the provided callback.
func (x *Array) WalkAst(fn AstWalkerFn) (_ *Array, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeArray), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Array)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ArrayFlatten) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeArrayFlatten), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ArrayFlatten) NumChildren() int { return 1 }

// TypeId returns AstTypeArrayFlatten.
func (*ArrayFlatten) TypeId() AstTypeId { return AstTypeArrayFlatten }

// WalkAst visits the receiver with the provided callback.
func (x *ArrayFlatten) WalkAst(fn AstWalkerFn) (_ *ArrayFlatten, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeArrayFlatten), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ArrayFlatten)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ArraySubscript) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeArraySubscript), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *ArraySubscript) NumChildren() int { return 2 }

// TypeId returns AstTypeArraySubscript.
func (*ArraySubscript) TypeId() AstTypeId { return AstTypeArraySubscript }

// WalkAst visits the receiver with the provided callback.
func (x *ArraySubscript) WalkAst(fn AstWalkerFn) (_ *ArraySubscript, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeArraySubscript), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ArraySubscript)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *AsOfClause) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeAsOfClause), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *AsOfClause) NumChildren() int { return 1 }

// TypeId returns AstTypeAsOfClause.
func (*AsOfClause) TypeId() AstTypeId { return AstTypeAsOfClause }

// WalkAst visits the receiver with the provided callback.
func (x *AsOfClause) WalkAst(fn AstWalkerFn) (_ *AsOfClause, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAsOfClause), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*AsOfClause)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Backup) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeBackup), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 5.
func (x *Backup) NumChildren() int { return 5 }

// TypeId returns AstTypeBackup.
func (*Backup) TypeId() AstTypeId { return AstTypeBackup }

// WalkAst visits the receiver with the provided callback.
func (x *Backup) WalkAst(fn AstWalkerFn) (_ *Backup, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeBackup), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Backup)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *BeginTransaction) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeBeginTransaction), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *BeginTransaction) NumChildren() int { return 1 }

// TypeId returns AstTypeBeginTransaction.
func (*BeginTransaction) TypeId() AstTypeId { return AstTypeBeginTransaction }

// WalkAst visits the receiver with the provided callback.
func (x *BeginTransaction) WalkAst(fn AstWalkerFn) (_ *BeginTransaction, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeBeginTransaction), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*BeginTransaction)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *BinaryExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeBinaryExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *BinaryExpr) NumChildren() int { return 2 }

// TypeId returns AstTypeBinaryExpr.
func (*BinaryExpr) TypeId() AstTypeId { return AstTypeBinaryExpr }

// WalkAst visits the receiver with the provided callback.
func (x *BinaryExpr) WalkAst(fn AstWalkerFn) (_ *BinaryExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeBinaryExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*BinaryExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CTE) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCTE), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *CTE) NumChildren() int { return 2 }

// TypeId returns AstTypeCTE.
func (*CTE) TypeId() AstTypeId { return AstTypeCTE }

// WalkAst visits the receiver with the provided callback.
func (x *CTE) WalkAst(fn AstWalkerFn) (_ *CTE, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCTE), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CTE)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CancelQueries) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCancelQueries), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CancelQueries) NumChildren() int { return 1 }

// TypeId returns AstTypeCancelQueries.
func (*CancelQueries) TypeId() AstTypeId { return AstTypeCancelQueries }

// WalkAst visits the receiver with the provided callback.
func (x *CancelQueries) WalkAst(fn AstWalkerFn) (_ *CancelQueries, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCancelQueries), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CancelQueries)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CancelSessions) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCancelSessions), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CancelSessions) NumChildren() int { return 1 }

// TypeId returns AstTypeCancelSessions.
func (*CancelSessions) TypeId() AstTypeId { return AstTypeCancelSessions }

// WalkAst visits the receiver with the provided callback.
func (x *CancelSessions) WalkAst(fn AstWalkerFn) (_ *CancelSessions, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCancelSessions), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CancelSessions)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CaseExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCaseExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *CaseExpr) NumChildren() int { return 3 }

// TypeId returns AstTypeCaseExpr.
func (*CaseExpr) TypeId() AstTypeId { return AstTypeCaseExpr }

// WalkAst visits the receiver with the provided callback.
func (x *CaseExpr) WalkAst(fn AstWalkerFn) (_ *CaseExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCaseExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CaseExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CastExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCastExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CastExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeCastExpr.
func (*CastExpr) TypeId() AstTypeId { return AstTypeCastExpr }

// WalkAst visits the receiver with the provided callback.
func (x *CastExpr) WalkAst(fn AstWalkerFn) (_ *CastExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCastExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CastExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CoalesceExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCoalesceExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CoalesceExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeCoalesceExpr.
func (*CoalesceExpr) TypeId() AstTypeId { return AstTypeCoalesceExpr }

// WalkAst visits the receiver with the provided callback.
func (x *CoalesceExpr) WalkAst(fn AstWalkerFn) (_ *CoalesceExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCoalesceExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CoalesceExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CollateExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCollateExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CollateExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeCollateExpr.
func (*CollateExpr) TypeId() AstTypeId { return AstTypeCollateExpr }

// WalkAst visits the receiver with the provided callback.
func (x *CollateExpr) WalkAst(fn AstWalkerFn) (_ *CollateExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCollateExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CollateExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ColumnAccessExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeColumnAccessExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ColumnAccessExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeColumnAccessExpr.
func (*ColumnAccessExpr) TypeId() AstTypeId { return AstTypeColumnAccessExpr }

// WalkAst visits the receiver with the provided callback.
func (x *ColumnAccessExpr) WalkAst(fn AstWalkerFn) (_ *ColumnAccessExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeColumnAccessExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ColumnAccessExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ColumnItem) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeColumnItem), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ColumnItem) NumChildren() int { return 1 }

// TypeId returns AstTypeColumnItem.
func (*ColumnItem) TypeId() AstTypeId { return AstTypeColumnItem }

// WalkAst visits the receiver with the provided callback.
func (x *ColumnItem) WalkAst(fn AstWalkerFn) (_ *ColumnItem, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeColumnItem), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ColumnItem)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CommentOnTable) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCommentOnTable), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CommentOnTable) NumChildren() int { return 1 }

// TypeId returns AstTypeCommentOnTable.
func (*CommentOnTable) TypeId() AstTypeId { return AstTypeCommentOnTable }

// WalkAst visits the receiver with the provided callback.
func (x *CommentOnTable) WalkAst(fn AstWalkerFn) (_ *CommentOnTable, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCommentOnTable), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CommentOnTable)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CommitTransaction) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCommitTransaction), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *CommitTransaction) NumChildren() int { return 0 }

// TypeId returns AstTypeCommitTransaction.
func (*CommitTransaction) TypeId() AstTypeId { return AstTypeCommitTransaction }

// WalkAst visits the receiver with the provided callback.
func (x *CommitTransaction) WalkAst(
	fn AstWalkerFn,
) (_ *CommitTransaction, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCommitTransaction), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CommitTransaction)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ComparisonExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeComparisonExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *ComparisonExpr) NumChildren() int { return 2 }

// TypeId returns AstTypeComparisonExpr.
func (*ComparisonExpr) TypeId() AstTypeId { return AstTypeComparisonExpr }

// WalkAst visits the receiver with the provided callback.
func (x *ComparisonExpr) WalkAst(fn AstWalkerFn) (_ *ComparisonExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeComparisonExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ComparisonExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ControlJobs) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeControlJobs), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ControlJobs) NumChildren() int { return 1 }

// TypeId returns AstTypeControlJobs.
func (*ControlJobs) TypeId() AstTypeId { return AstTypeControlJobs }

// WalkAst visits the receiver with the provided callback.
func (x *ControlJobs) WalkAst(fn AstWalkerFn) (_ *ControlJobs, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeControlJobs), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ControlJobs)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CopyFrom) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCopyFrom), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CopyFrom) NumChildren() int { return 1 }

// TypeId returns AstTypeCopyFrom.
func (*CopyFrom) TypeId() AstTypeId { return AstTypeCopyFrom }

// WalkAst visits the receiver with the provided callback.
func (x *CopyFrom) WalkAst(fn AstWalkerFn) (_ *CopyFrom, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCopyFrom), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CopyFrom)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateChangefeed) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateChangefeed), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *CreateChangefeed) NumChildren() int { return 3 }

// TypeId returns AstTypeCreateChangefeed.
func (*CreateChangefeed) TypeId() AstTypeId { return AstTypeCreateChangefeed }

// WalkAst visits the receiver with the provided callback.
func (x *CreateChangefeed) WalkAst(fn AstWalkerFn) (_ *CreateChangefeed, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateChangefeed), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateChangefeed)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateDatabase) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateDatabase), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *CreateDatabase) NumChildren() int { return 0 }

// TypeId returns AstTypeCreateDatabase.
func (*CreateDatabase) TypeId() AstTypeId { return AstTypeCreateDatabase }

// WalkAst visits the receiver with the provided callback.
func (x *CreateDatabase) WalkAst(fn AstWalkerFn) (_ *CreateDatabase, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateDatabase), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateDatabase)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateIndex) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateIndex), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 4.
func (x *CreateIndex) NumChildren() int { return 4 }

// TypeId returns AstTypeCreateIndex.
func (*CreateIndex) TypeId() AstTypeId { return AstTypeCreateIndex }

// WalkAst visits the receiver with the provided callback.
func (x *CreateIndex) WalkAst(fn AstWalkerFn) (_ *CreateIndex, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateIndex), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateIndex)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateRole) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateRole), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *CreateRole) NumChildren() int { return 1 }

// TypeId returns AstTypeCreateRole.
func (*CreateRole) TypeId() AstTypeId { return AstTypeCreateRole }

// WalkAst visits the receiver with the provided callback.
func (x *CreateRole) WalkAst(fn AstWalkerFn) (_ *CreateRole, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateRole), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateRole)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateSequence) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateSequence), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *CreateSequence) NumChildren() int { return 2 }

// TypeId returns AstTypeCreateSequence.
func (*CreateSequence) TypeId() AstTypeId { return AstTypeCreateSequence }

// WalkAst visits the receiver with the provided callback.
func (x *CreateSequence) WalkAst(fn AstWalkerFn) (_ *CreateSequence, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateSequence), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateSequence)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateStats) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateStats), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *CreateStats) NumChildren() int { return 2 }

// TypeId returns AstTypeCreateStats.
func (*CreateStats) TypeId() AstTypeId { return AstTypeCreateStats }

// WalkAst visits the receiver with the provided callback.
func (x *CreateStats) WalkAst(fn AstWalkerFn) (_ *CreateStats, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateStats), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateStats)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateTable) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateTable), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 5.
func (x *CreateTable) NumChildren() int { return 5 }

// TypeId returns AstTypeCreateTable.
func (*CreateTable) TypeId() AstTypeId { return AstTypeCreateTable }

// WalkAst visits the receiver with the provided callback.
func (x *CreateTable) WalkAst(fn AstWalkerFn) (_ *CreateTable, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateTable), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateTable)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateUser) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateUser), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *CreateUser) NumChildren() int { return 2 }

// TypeId returns AstTypeCreateUser.
func (*CreateUser) TypeId() AstTypeId { return AstTypeCreateUser }

// WalkAst visits the receiver with the provided callback.
func (x *CreateUser) WalkAst(fn AstWalkerFn) (_ *CreateUser, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateUser), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateUser)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *CreateView) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeCreateView), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *CreateView) NumChildren() int { return 2 }

// TypeId returns AstTypeCreateView.
func (*CreateView) TypeId() AstTypeId { return AstTypeCreateView }

// WalkAst visits the receiver with the provided callback.
func (x *CreateView) WalkAst(fn AstWalkerFn) (_ *CreateView, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeCreateView), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*CreateView)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DArray) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDArray), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DArray) NumChildren() int { return 1 }

// TypeId returns AstTypeDArray.
func (*DArray) TypeId() AstTypeId { return AstTypeDArray }

// WalkAst visits the receiver with the provided callback.
func (x *DArray) WalkAst(fn AstWalkerFn) (_ *DArray, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDArray), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DArray)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DBitArray) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDBitArray), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DBitArray) NumChildren() int { return 0 }

// TypeId returns AstTypeDBitArray.
func (*DBitArray) TypeId() AstTypeId { return AstTypeDBitArray }

// WalkAst visits the receiver with the provided callback.
func (x *DBitArray) WalkAst(fn AstWalkerFn) (_ *DBitArray, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDBitArray), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DBitArray)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DCollatedString) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDCollatedString), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DCollatedString) NumChildren() int { return 0 }

// TypeId returns AstTypeDCollatedString.
func (*DCollatedString) TypeId() AstTypeId { return AstTypeDCollatedString }

// WalkAst visits the receiver with the provided callback.
func (x *DCollatedString) WalkAst(fn AstWalkerFn) (_ *DCollatedString, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDCollatedString), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DCollatedString)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DDecimal) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDDecimal), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DDecimal) NumChildren() int { return 0 }

// TypeId returns AstTypeDDecimal.
func (*DDecimal) TypeId() AstTypeId { return AstTypeDDecimal }

// WalkAst visits the receiver with the provided callback.
func (x *DDecimal) WalkAst(fn AstWalkerFn) (_ *DDecimal, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDDecimal), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DDecimal)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DIPAddr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDIPAddr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DIPAddr) NumChildren() int { return 0 }

// TypeId returns AstTypeDIPAddr.
func (*DIPAddr) TypeId() AstTypeId { return AstTypeDIPAddr }

// WalkAst visits the receiver with the provided callback.
func (x *DIPAddr) WalkAst(fn AstWalkerFn) (_ *DIPAddr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDIPAddr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DIPAddr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DInterval) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDInterval), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DInterval) NumChildren() int { return 0 }

// TypeId returns AstTypeDInterval.
func (*DInterval) TypeId() AstTypeId { return AstTypeDInterval }

// WalkAst visits the receiver with the provided callback.
func (x *DInterval) WalkAst(fn AstWalkerFn) (_ *DInterval, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDInterval), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DInterval)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DJSON) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDJSON), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DJSON) NumChildren() int { return 0 }

// TypeId returns AstTypeDJSON.
func (*DJSON) TypeId() AstTypeId { return AstTypeDJSON }

// WalkAst visits the receiver with the provided callback.
func (x *DJSON) WalkAst(fn AstWalkerFn) (_ *DJSON, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDJSON), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DJSON)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DOid) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDOid), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DOid) NumChildren() int { return 0 }

// TypeId returns AstTypeDOid.
func (*DOid) TypeId() AstTypeId { return AstTypeDOid }

// WalkAst visits the receiver with the provided callback.
func (x *DOid) WalkAst(fn AstWalkerFn) (_ *DOid, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDOid), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DOid)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DOidWrapper) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDOidWrapper), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DOidWrapper) NumChildren() int { return 1 }

// TypeId returns AstTypeDOidWrapper.
func (*DOidWrapper) TypeId() AstTypeId { return AstTypeDOidWrapper }

// WalkAst visits the receiver with the provided callback.
func (x *DOidWrapper) WalkAst(fn AstWalkerFn) (_ *DOidWrapper, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDOidWrapper), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DOidWrapper)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DTimestamp) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDTimestamp), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DTimestamp) NumChildren() int { return 0 }

// TypeId returns AstTypeDTimestamp.
func (*DTimestamp) TypeId() AstTypeId { return AstTypeDTimestamp }

// WalkAst visits the receiver with the provided callback.
func (x *DTimestamp) WalkAst(fn AstWalkerFn) (_ *DTimestamp, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDTimestamp), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DTimestamp)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DTimestampTZ) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDTimestampTZ), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DTimestampTZ) NumChildren() int { return 0 }

// TypeId returns AstTypeDTimestampTZ.
func (*DTimestampTZ) TypeId() AstTypeId { return AstTypeDTimestampTZ }

// WalkAst visits the receiver with the provided callback.
func (x *DTimestampTZ) WalkAst(fn AstWalkerFn) (_ *DTimestampTZ, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDTimestampTZ), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DTimestampTZ)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DTuple) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDTuple), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DTuple) NumChildren() int { return 1 }

// TypeId returns AstTypeDTuple.
func (*DTuple) TypeId() AstTypeId { return AstTypeDTuple }

// WalkAst visits the receiver with the provided callback.
func (x *DTuple) WalkAst(fn AstWalkerFn) (_ *DTuple, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDTuple), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DTuple)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DUuid) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDUuid), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DUuid) NumChildren() int { return 0 }

// TypeId returns AstTypeDUuid.
func (*DUuid) TypeId() AstTypeId { return AstTypeDUuid }

// WalkAst visits the receiver with the provided callback.
func (x *DUuid) WalkAst(fn AstWalkerFn) (_ *DUuid, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDUuid), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DUuid)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Deallocate) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDeallocate), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *Deallocate) NumChildren() int { return 0 }

// TypeId returns AstTypeDeallocate.
func (*Deallocate) TypeId() AstTypeId { return AstTypeDeallocate }

// WalkAst visits the receiver with the provided callback.
func (x *Deallocate) WalkAst(fn AstWalkerFn) (_ *Deallocate, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDeallocate), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Deallocate)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DefaultVal) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDefaultVal), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DefaultVal) NumChildren() int { return 0 }

// TypeId returns AstTypeDefaultVal.
func (*DefaultVal) TypeId() AstTypeId { return AstTypeDefaultVal }

// WalkAst visits the receiver with the provided callback.
func (x *DefaultVal) WalkAst(fn AstWalkerFn) (_ *DefaultVal, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDefaultVal), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DefaultVal)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Delete) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDelete), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 6.
func (x *Delete) NumChildren() int { return 6 }

// TypeId returns AstTypeDelete.
func (*Delete) TypeId() AstTypeId { return AstTypeDelete }

// WalkAst visits the receiver with the provided callback.
func (x *Delete) WalkAst(fn AstWalkerFn) (_ *Delete, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDelete), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Delete)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Discard) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDiscard), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *Discard) NumChildren() int { return 0 }

// TypeId returns AstTypeDiscard.
func (*Discard) TypeId() AstTypeId { return AstTypeDiscard }

// WalkAst visits the receiver with the provided callback.
func (x *Discard) WalkAst(fn AstWalkerFn) (_ *Discard, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDiscard), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Discard)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DropDatabase) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDropDatabase), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *DropDatabase) NumChildren() int { return 0 }

// TypeId returns AstTypeDropDatabase.
func (*DropDatabase) TypeId() AstTypeId { return AstTypeDropDatabase }

// WalkAst visits the receiver with the provided callback.
func (x *DropDatabase) WalkAst(fn AstWalkerFn) (_ *DropDatabase, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDropDatabase), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DropDatabase)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DropIndex) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDropIndex), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DropIndex) NumChildren() int { return 1 }

// TypeId returns AstTypeDropIndex.
func (*DropIndex) TypeId() AstTypeId { return AstTypeDropIndex }

// WalkAst visits the receiver with the provided callback.
func (x *DropIndex) WalkAst(fn AstWalkerFn) (_ *DropIndex, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDropIndex), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DropIndex)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DropRole) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDropRole), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DropRole) NumChildren() int { return 1 }

// TypeId returns AstTypeDropRole.
func (*DropRole) TypeId() AstTypeId { return AstTypeDropRole }

// WalkAst visits the receiver with the provided callback.
func (x *DropRole) WalkAst(fn AstWalkerFn) (_ *DropRole, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDropRole), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DropRole)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DropSequence) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDropSequence), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DropSequence) NumChildren() int { return 1 }

// TypeId returns AstTypeDropSequence.
func (*DropSequence) TypeId() AstTypeId { return AstTypeDropSequence }

// WalkAst visits the receiver with the provided callback.
func (x *DropSequence) WalkAst(fn AstWalkerFn) (_ *DropSequence, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDropSequence), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DropSequence)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DropTable) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDropTable), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DropTable) NumChildren() int { return 1 }

// TypeId returns AstTypeDropTable.
func (*DropTable) TypeId() AstTypeId { return AstTypeDropTable }

// WalkAst visits the receiver with the provided callback.
func (x *DropTable) WalkAst(fn AstWalkerFn) (_ *DropTable, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDropTable), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DropTable)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DropUser) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDropUser), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DropUser) NumChildren() int { return 1 }

// TypeId returns AstTypeDropUser.
func (*DropUser) TypeId() AstTypeId { return AstTypeDropUser }

// WalkAst visits the receiver with the provided callback.
func (x *DropUser) WalkAst(fn AstWalkerFn) (_ *DropUser, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDropUser), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DropUser)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *DropView) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeDropView), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *DropView) NumChildren() int { return 1 }

// TypeId returns AstTypeDropView.
func (*DropView) TypeId() AstTypeId { return AstTypeDropView }

// WalkAst visits the receiver with the provided callback.
func (x *DropView) WalkAst(fn AstWalkerFn) (_ *DropView, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeDropView), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*DropView)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Execute) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeExecute), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Execute) NumChildren() int { return 1 }

// TypeId returns AstTypeExecute.
func (*Execute) TypeId() AstTypeId { return AstTypeExecute }

// WalkAst visits the receiver with the provided callback.
func (x *Execute) WalkAst(fn AstWalkerFn) (_ *Execute, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeExecute), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Execute)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Explain) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeExplain), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Explain) NumChildren() int { return 1 }

// TypeId returns AstTypeExplain.
func (*Explain) TypeId() AstTypeId { return AstTypeExplain }

// WalkAst visits the receiver with the provided callback.
func (x *Explain) WalkAst(fn AstWalkerFn) (_ *Explain, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeExplain), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Explain)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Export) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeExport), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *Export) NumChildren() int { return 3 }

// TypeId returns AstTypeExport.
func (*Export) TypeId() AstTypeId { return AstTypeExport }

// WalkAst visits the receiver with the provided callback.
func (x *Export) WalkAst(fn AstWalkerFn) (_ *Export, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeExport), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Export)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *From) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeFrom), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *From) NumChildren() int { return 2 }

// TypeId returns AstTypeFrom.
func (*From) TypeId() AstTypeId { return AstTypeFrom }

// WalkAst visits the receiver with the provided callback.
func (x *From) WalkAst(fn AstWalkerFn) (_ *From, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeFrom), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*From)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *FuncExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeFuncExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 4.
func (x *FuncExpr) NumChildren() int { return 4 }

// TypeId returns AstTypeFuncExpr.
func (*FuncExpr) TypeId() AstTypeId { return AstTypeFuncExpr }

// WalkAst visits the receiver with the provided callback.
func (x *FuncExpr) WalkAst(fn AstWalkerFn) (_ *FuncExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeFuncExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*FuncExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Grant) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeGrant), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Grant) NumChildren() int { return 1 }

// TypeId returns AstTypeGrant.
func (*Grant) TypeId() AstTypeId { return AstTypeGrant }

// WalkAst visits the receiver with the provided callback.
func (x *Grant) WalkAst(fn AstWalkerFn) (_ *Grant, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeGrant), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Grant)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *GrantRole) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeGrantRole), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *GrantRole) NumChildren() int { return 0 }

// TypeId returns AstTypeGrantRole.
func (*GrantRole) TypeId() AstTypeId { return AstTypeGrantRole }

// WalkAst visits the receiver with the provided callback.
func (x *GrantRole) WalkAst(fn AstWalkerFn) (_ *GrantRole, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeGrantRole), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*GrantRole)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *IfErrExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeIfErrExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *IfErrExpr) NumChildren() int { return 3 }

// TypeId returns AstTypeIfErrExpr.
func (*IfErrExpr) TypeId() AstTypeId { return AstTypeIfErrExpr }

// WalkAst visits the receiver with the provided callback.
func (x *IfErrExpr) WalkAst(fn AstWalkerFn) (_ *IfErrExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeIfErrExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*IfErrExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *IfExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeIfExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *IfExpr) NumChildren() int { return 3 }

// TypeId returns AstTypeIfExpr.
func (*IfExpr) TypeId() AstTypeId { return AstTypeIfExpr }

// WalkAst visits the receiver with the provided callback.
func (x *IfExpr) WalkAst(fn AstWalkerFn) (_ *IfExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeIfExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*IfExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Import) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeImport), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 5.
func (x *Import) NumChildren() int { return 5 }

// TypeId returns AstTypeImport.
func (*Import) TypeId() AstTypeId { return AstTypeImport }

// WalkAst visits the receiver with the provided callback.
func (x *Import) WalkAst(fn AstWalkerFn) (_ *Import, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeImport), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Import)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *IndexElem) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeIndexElem), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *IndexElem) NumChildren() int { return 0 }

// TypeId returns AstTypeIndexElem.
func (*IndexElem) TypeId() AstTypeId { return AstTypeIndexElem }

// WalkAst visits the receiver with the provided callback.
func (x *IndexElem) WalkAst(fn AstWalkerFn) (_ *IndexElem, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeIndexElem), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*IndexElem)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *IndexedVar) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeIndexedVar), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *IndexedVar) NumChildren() int { return 0 }

// TypeId returns AstTypeIndexedVar.
func (*IndexedVar) TypeId() AstTypeId { return AstTypeIndexedVar }

// WalkAst visits the receiver with the provided callback.
func (x *IndexedVar) WalkAst(fn AstWalkerFn) (_ *IndexedVar, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeIndexedVar), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*IndexedVar)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *IndirectionExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeIndirectionExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *IndirectionExpr) NumChildren() int { return 2 }

// TypeId returns AstTypeIndirectionExpr.
func (*IndirectionExpr) TypeId() AstTypeId { return AstTypeIndirectionExpr }

// WalkAst visits the receiver with the provided callback.
func (x *IndirectionExpr) WalkAst(fn AstWalkerFn) (_ *IndirectionExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeIndirectionExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*IndirectionExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Insert) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeInsert), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 5.
func (x *Insert) NumChildren() int { return 5 }

// TypeId returns AstTypeInsert.
func (*Insert) TypeId() AstTypeId { return AstTypeInsert }

// WalkAst visits the receiver with the provided callback.
func (x *Insert) WalkAst(fn AstWalkerFn) (_ *Insert, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeInsert), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Insert)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *InterleaveDef) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeInterleaveDef), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *InterleaveDef) NumChildren() int { return 1 }

// TypeId returns AstTypeInterleaveDef.
func (*InterleaveDef) TypeId() AstTypeId { return AstTypeInterleaveDef }

// WalkAst visits the receiver with the provided callback.
func (x *InterleaveDef) WalkAst(fn AstWalkerFn) (_ *InterleaveDef, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeInterleaveDef), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*InterleaveDef)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *IsOfTypeExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeIsOfTypeExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *IsOfTypeExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeIsOfTypeExpr.
func (*IsOfTypeExpr) TypeId() AstTypeId { return AstTypeIsOfTypeExpr }

// WalkAst visits the receiver with the provided callback.
func (x *IsOfTypeExpr) WalkAst(fn AstWalkerFn) (_ *IsOfTypeExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeIsOfTypeExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*IsOfTypeExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *KVOption) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeKVOption), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *KVOption) NumChildren() int { return 1 }

// TypeId returns AstTypeKVOption.
func (*KVOption) TypeId() AstTypeId { return AstTypeKVOption }

// WalkAst visits the receiver with the provided callback.
func (x *KVOption) WalkAst(fn AstWalkerFn) (_ *KVOption, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeKVOption), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*KVOption)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Limit) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeLimit), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *Limit) NumChildren() int { return 2 }

// TypeId returns AstTypeLimit.
func (*Limit) TypeId() AstTypeId { return AstTypeLimit }

// WalkAst visits the receiver with the provided callback.
func (x *Limit) WalkAst(fn AstWalkerFn) (_ *Limit, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeLimit), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Limit)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ListPartition) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeListPartition), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *ListPartition) NumChildren() int { return 2 }

// TypeId returns AstTypeListPartition.
func (*ListPartition) TypeId() AstTypeId { return AstTypeListPartition }

// WalkAst visits the receiver with the provided callback.
func (x *ListPartition) WalkAst(fn AstWalkerFn) (_ *ListPartition, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeListPartition), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ListPartition)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *NotExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeNotExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *NotExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeNotExpr.
func (*NotExpr) TypeId() AstTypeId { return AstTypeNotExpr }

// WalkAst visits the receiver with the provided callback.
func (x *NotExpr) WalkAst(fn AstWalkerFn) (_ *NotExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeNotExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*NotExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *NullIfExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeNullIfExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *NullIfExpr) NumChildren() int { return 2 }

// TypeId returns AstTypeNullIfExpr.
func (*NullIfExpr) TypeId() AstTypeId { return AstTypeNullIfExpr }

// WalkAst visits the receiver with the provided callback.
func (x *NullIfExpr) WalkAst(fn AstWalkerFn) (_ *NullIfExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeNullIfExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*NullIfExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *NumVal) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeNumVal), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *NumVal) NumChildren() int { return 0 }

// TypeId returns AstTypeNumVal.
func (*NumVal) TypeId() AstTypeId { return AstTypeNumVal }

// WalkAst visits the receiver with the provided callback.
func (x *NumVal) WalkAst(fn AstWalkerFn) (_ *NumVal, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeNumVal), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*NumVal)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *OnConflict) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeOnConflict), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *OnConflict) NumChildren() int { return 2 }

// TypeId returns AstTypeOnConflict.
func (*OnConflict) TypeId() AstTypeId { return AstTypeOnConflict }

// WalkAst visits the receiver with the provided callback.
func (x *OnConflict) WalkAst(fn AstWalkerFn) (_ *OnConflict, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeOnConflict), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*OnConflict)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *OrExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeOrExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *OrExpr) NumChildren() int { return 2 }

// TypeId returns AstTypeOrExpr.
func (*OrExpr) TypeId() AstTypeId { return AstTypeOrExpr }

// WalkAst visits the receiver with the provided callback.
func (x *OrExpr) WalkAst(fn AstWalkerFn) (_ *OrExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeOrExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*OrExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Order) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeOrder), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *Order) NumChildren() int { return 2 }

// TypeId returns AstTypeOrder.
func (*Order) TypeId() AstTypeId { return AstTypeOrder }

// WalkAst visits the receiver with the provided callback.
func (x *Order) WalkAst(fn AstWalkerFn) (_ *Order, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeOrder), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Order)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ParenExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeParenExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ParenExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeParenExpr.
func (*ParenExpr) TypeId() AstTypeId { return AstTypeParenExpr }

// WalkAst visits the receiver with the provided callback.
func (x *ParenExpr) WalkAst(fn AstWalkerFn) (_ *ParenExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeParenExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ParenExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ParenSelect) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeParenSelect), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ParenSelect) NumChildren() int { return 1 }

// TypeId returns AstTypeParenSelect.
func (*ParenSelect) TypeId() AstTypeId { return AstTypeParenSelect }

// WalkAst visits the receiver with the provided callback.
func (x *ParenSelect) WalkAst(fn AstWalkerFn) (_ *ParenSelect, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeParenSelect), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ParenSelect)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *PartitionBy) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypePartitionBy), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *PartitionBy) NumChildren() int { return 2 }

// TypeId returns AstTypePartitionBy.
func (*PartitionBy) TypeId() AstTypeId { return AstTypePartitionBy }

// WalkAst visits the receiver with the provided callback.
func (x *PartitionBy) WalkAst(fn AstWalkerFn) (_ *PartitionBy, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypePartitionBy), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*PartitionBy)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *PartitionMaxVal) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypePartitionMaxVal), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *PartitionMaxVal) NumChildren() int { return 0 }

// TypeId returns AstTypePartitionMaxVal.
func (*PartitionMaxVal) TypeId() AstTypeId { return AstTypePartitionMaxVal }

// WalkAst visits the receiver with the provided callback.
func (x *PartitionMaxVal) WalkAst(fn AstWalkerFn) (_ *PartitionMaxVal, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypePartitionMaxVal), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*PartitionMaxVal)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *PartitionMinVal) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypePartitionMinVal), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *PartitionMinVal) NumChildren() int { return 0 }

// TypeId returns AstTypePartitionMinVal.
func (*PartitionMinVal) TypeId() AstTypeId { return AstTypePartitionMinVal }

// WalkAst visits the receiver with the provided callback.
func (x *PartitionMinVal) WalkAst(fn AstWalkerFn) (_ *PartitionMinVal, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypePartitionMinVal), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*PartitionMinVal)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Placeholder) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypePlaceholder), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *Placeholder) NumChildren() int { return 0 }

// TypeId returns AstTypePlaceholder.
func (*Placeholder) TypeId() AstTypeId { return AstTypePlaceholder }

// WalkAst visits the receiver with the provided callback.
func (x *Placeholder) WalkAst(fn AstWalkerFn) (_ *Placeholder, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypePlaceholder), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Placeholder)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Prepare) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypePrepare), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Prepare) NumChildren() int { return 1 }

// TypeId returns AstTypePrepare.
func (*Prepare) TypeId() AstTypeId { return AstTypePrepare }

// WalkAst visits the receiver with the provided callback.
func (x *Prepare) WalkAst(fn AstWalkerFn) (_ *Prepare, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypePrepare), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Prepare)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RangeCond) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRangeCond), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *RangeCond) NumChildren() int { return 3 }

// TypeId returns AstTypeRangeCond.
func (*RangeCond) TypeId() AstTypeId { return AstTypeRangeCond }

// WalkAst visits the receiver with the provided callback.
func (x *RangeCond) WalkAst(fn AstWalkerFn) (_ *RangeCond, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRangeCond), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RangeCond)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RangePartition) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRangePartition), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *RangePartition) NumChildren() int { return 3 }

// TypeId returns AstTypeRangePartition.
func (*RangePartition) TypeId() AstTypeId { return AstTypeRangePartition }

// WalkAst visits the receiver with the provided callback.
func (x *RangePartition) WalkAst(fn AstWalkerFn) (_ *RangePartition, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRangePartition), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RangePartition)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ReleaseSavepoint) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeReleaseSavepoint), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ReleaseSavepoint) NumChildren() int { return 0 }

// TypeId returns AstTypeReleaseSavepoint.
func (*ReleaseSavepoint) TypeId() AstTypeId { return AstTypeReleaseSavepoint }

// WalkAst visits the receiver with the provided callback.
func (x *ReleaseSavepoint) WalkAst(fn AstWalkerFn) (_ *ReleaseSavepoint, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeReleaseSavepoint), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ReleaseSavepoint)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Relocate) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRelocate), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *Relocate) NumChildren() int { return 3 }

// TypeId returns AstTypeRelocate.
func (*Relocate) TypeId() AstTypeId { return AstTypeRelocate }

// WalkAst visits the receiver with the provided callback.
func (x *Relocate) WalkAst(fn AstWalkerFn) (_ *Relocate, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRelocate), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Relocate)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RenameColumn) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRenameColumn), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *RenameColumn) NumChildren() int { return 1 }

// TypeId returns AstTypeRenameColumn.
func (*RenameColumn) TypeId() AstTypeId { return AstTypeRenameColumn }

// WalkAst visits the receiver with the provided callback.
func (x *RenameColumn) WalkAst(fn AstWalkerFn) (_ *RenameColumn, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRenameColumn), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RenameColumn)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RenameDatabase) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRenameDatabase), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *RenameDatabase) NumChildren() int { return 0 }

// TypeId returns AstTypeRenameDatabase.
func (*RenameDatabase) TypeId() AstTypeId { return AstTypeRenameDatabase }

// WalkAst visits the receiver with the provided callback.
func (x *RenameDatabase) WalkAst(fn AstWalkerFn) (_ *RenameDatabase, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRenameDatabase), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RenameDatabase)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RenameIndex) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRenameIndex), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *RenameIndex) NumChildren() int { return 1 }

// TypeId returns AstTypeRenameIndex.
func (*RenameIndex) TypeId() AstTypeId { return AstTypeRenameIndex }

// WalkAst visits the receiver with the provided callback.
func (x *RenameIndex) WalkAst(fn AstWalkerFn) (_ *RenameIndex, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRenameIndex), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RenameIndex)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RenameTable) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRenameTable), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *RenameTable) NumChildren() int { return 2 }

// TypeId returns AstTypeRenameTable.
func (*RenameTable) TypeId() AstTypeId { return AstTypeRenameTable }

// WalkAst visits the receiver with the provided callback.
func (x *RenameTable) WalkAst(fn AstWalkerFn) (_ *RenameTable, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRenameTable), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RenameTable)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ResolvableFunctionReference) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeResolvableFunctionReference), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ResolvableFunctionReference) NumChildren() int { return 1 }

// TypeId returns AstTypeResolvableFunctionReference.
func (*ResolvableFunctionReference) TypeId() AstTypeId { return AstTypeResolvableFunctionReference }

// WalkAst visits the receiver with the provided callback.
func (x *ResolvableFunctionReference) WalkAst(
	fn AstWalkerFn,
) (_ *ResolvableFunctionReference, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeResolvableFunctionReference), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ResolvableFunctionReference)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Restore) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRestore), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 4.
func (x *Restore) NumChildren() int { return 4 }

// TypeId returns AstTypeRestore.
func (*Restore) TypeId() AstTypeId { return AstTypeRestore }

// WalkAst visits the receiver with the provided callback.
func (x *Restore) WalkAst(fn AstWalkerFn) (_ *Restore, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRestore), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Restore)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Revoke) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRevoke), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Revoke) NumChildren() int { return 1 }

// TypeId returns AstTypeRevoke.
func (*Revoke) TypeId() AstTypeId { return AstTypeRevoke }

// WalkAst visits the receiver with the provided callback.
func (x *Revoke) WalkAst(fn AstWalkerFn) (_ *Revoke, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRevoke), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Revoke)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RevokeRole) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRevokeRole), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *RevokeRole) NumChildren() int { return 0 }

// TypeId returns AstTypeRevokeRole.
func (*RevokeRole) TypeId() AstTypeId { return AstTypeRevokeRole }

// WalkAst visits the receiver with the provided callback.
func (x *RevokeRole) WalkAst(fn AstWalkerFn) (_ *RevokeRole, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRevokeRole), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RevokeRole)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RollbackToSavepoint) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRollbackToSavepoint), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *RollbackToSavepoint) NumChildren() int { return 0 }

// TypeId returns AstTypeRollbackToSavepoint.
func (*RollbackToSavepoint) TypeId() AstTypeId { return AstTypeRollbackToSavepoint }

// WalkAst visits the receiver with the provided callback.
func (x *RollbackToSavepoint) WalkAst(
	fn AstWalkerFn,
) (_ *RollbackToSavepoint, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRollbackToSavepoint), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RollbackToSavepoint)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *RollbackTransaction) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeRollbackTransaction), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *RollbackTransaction) NumChildren() int { return 0 }

// TypeId returns AstTypeRollbackTransaction.
func (*RollbackTransaction) TypeId() AstTypeId { return AstTypeRollbackTransaction }

// WalkAst visits the receiver with the provided callback.
func (x *RollbackTransaction) WalkAst(
	fn AstWalkerFn,
) (_ *RollbackTransaction, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeRollbackTransaction), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*RollbackTransaction)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Savepoint) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSavepoint), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *Savepoint) NumChildren() int { return 0 }

// TypeId returns AstTypeSavepoint.
func (*Savepoint) TypeId() AstTypeId { return AstTypeSavepoint }

// WalkAst visits the receiver with the provided callback.
func (x *Savepoint) WalkAst(fn AstWalkerFn) (_ *Savepoint, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSavepoint), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Savepoint)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Scatter) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeScatter), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 4.
func (x *Scatter) NumChildren() int { return 4 }

// TypeId returns AstTypeScatter.
func (*Scatter) TypeId() AstTypeId { return AstTypeScatter }

// WalkAst visits the receiver with the provided callback.
func (x *Scatter) WalkAst(fn AstWalkerFn) (_ *Scatter, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeScatter), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Scatter)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Scrub) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeScrub), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *Scrub) NumChildren() int { return 3 }

// TypeId returns AstTypeScrub.
func (*Scrub) TypeId() AstTypeId { return AstTypeScrub }

// WalkAst visits the receiver with the provided callback.
func (x *Scrub) WalkAst(fn AstWalkerFn) (_ *Scrub, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeScrub), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Scrub)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Select) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSelect), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 4.
func (x *Select) NumChildren() int { return 4 }

// TypeId returns AstTypeSelect.
func (*Select) TypeId() AstTypeId { return AstTypeSelect }

// WalkAst visits the receiver with the provided callback.
func (x *Select) WalkAst(fn AstWalkerFn) (_ *Select, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSelect), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Select)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SelectClause) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSelectClause), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 7.
func (x *SelectClause) NumChildren() int { return 7 }

// TypeId returns AstTypeSelectClause.
func (*SelectClause) TypeId() AstTypeId { return AstTypeSelectClause }

// WalkAst visits the receiver with the provided callback.
func (x *SelectClause) WalkAst(fn AstWalkerFn) (_ *SelectClause, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSelectClause), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SelectClause)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SelectExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSelectExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *SelectExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeSelectExpr.
func (*SelectExpr) TypeId() AstTypeId { return AstTypeSelectExpr }

// WalkAst visits the receiver with the provided callback.
func (x *SelectExpr) WalkAst(fn AstWalkerFn) (_ *SelectExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSelectExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SelectExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SequenceOption) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSequenceOption), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *SequenceOption) NumChildren() int { return 0 }

// TypeId returns AstTypeSequenceOption.
func (*SequenceOption) TypeId() AstTypeId { return AstTypeSequenceOption }

// WalkAst visits the receiver with the provided callback.
func (x *SequenceOption) WalkAst(fn AstWalkerFn) (_ *SequenceOption, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSequenceOption), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SequenceOption)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SetClusterSetting) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSetClusterSetting), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *SetClusterSetting) NumChildren() int { return 1 }

// TypeId returns AstTypeSetClusterSetting.
func (*SetClusterSetting) TypeId() AstTypeId { return AstTypeSetClusterSetting }

// WalkAst visits the receiver with the provided callback.
func (x *SetClusterSetting) WalkAst(
	fn AstWalkerFn,
) (_ *SetClusterSetting, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSetClusterSetting), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SetClusterSetting)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SetSessionCharacteristics) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSetSessionCharacteristics), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *SetSessionCharacteristics) NumChildren() int { return 1 }

// TypeId returns AstTypeSetSessionCharacteristics.
func (*SetSessionCharacteristics) TypeId() AstTypeId { return AstTypeSetSessionCharacteristics }

// WalkAst visits the receiver with the provided callback.
func (x *SetSessionCharacteristics) WalkAst(
	fn AstWalkerFn,
) (_ *SetSessionCharacteristics, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSetSessionCharacteristics), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SetSessionCharacteristics)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SetTracing) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSetTracing), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *SetTracing) NumChildren() int { return 1 }

// TypeId returns AstTypeSetTracing.
func (*SetTracing) TypeId() AstTypeId { return AstTypeSetTracing }

// WalkAst visits the receiver with the provided callback.
func (x *SetTracing) WalkAst(fn AstWalkerFn) (_ *SetTracing, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSetTracing), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SetTracing)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SetTransaction) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSetTransaction), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *SetTransaction) NumChildren() int { return 1 }

// TypeId returns AstTypeSetTransaction.
func (*SetTransaction) TypeId() AstTypeId { return AstTypeSetTransaction }

// WalkAst visits the receiver with the provided callback.
func (x *SetTransaction) WalkAst(fn AstWalkerFn) (_ *SetTransaction, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSetTransaction), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SetTransaction)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SetVar) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSetVar), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *SetVar) NumChildren() int { return 1 }

// TypeId returns AstTypeSetVar.
func (*SetVar) TypeId() AstTypeId { return AstTypeSetVar }

// WalkAst visits the receiver with the provided callback.
func (x *SetVar) WalkAst(fn AstWalkerFn) (_ *SetVar, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSetVar), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SetVar)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *SetZoneConfig) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSetZoneConfig), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *SetZoneConfig) NumChildren() int { return 3 }

// TypeId returns AstTypeSetZoneConfig.
func (*SetZoneConfig) TypeId() AstTypeId { return AstTypeSetZoneConfig }

// WalkAst visits the receiver with the provided callback.
func (x *SetZoneConfig) WalkAst(fn AstWalkerFn) (_ *SetZoneConfig, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSetZoneConfig), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*SetZoneConfig)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowBackup) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowBackup), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowBackup) NumChildren() int { return 1 }

// TypeId returns AstTypeShowBackup.
func (*ShowBackup) TypeId() AstTypeId { return AstTypeShowBackup }

// WalkAst visits the receiver with the provided callback.
func (x *ShowBackup) WalkAst(fn AstWalkerFn) (_ *ShowBackup, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowBackup), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowBackup)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowClusterSetting) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowClusterSetting), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowClusterSetting) NumChildren() int { return 0 }

// TypeId returns AstTypeShowClusterSetting.
func (*ShowClusterSetting) TypeId() AstTypeId { return AstTypeShowClusterSetting }

// WalkAst visits the receiver with the provided callback.
func (x *ShowClusterSetting) WalkAst(
	fn AstWalkerFn,
) (_ *ShowClusterSetting, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowClusterSetting), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowClusterSetting)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowColumns) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowColumns), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowColumns) NumChildren() int { return 1 }

// TypeId returns AstTypeShowColumns.
func (*ShowColumns) TypeId() AstTypeId { return AstTypeShowColumns }

// WalkAst visits the receiver with the provided callback.
func (x *ShowColumns) WalkAst(fn AstWalkerFn) (_ *ShowColumns, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowColumns), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowColumns)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowConstraints) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowConstraints), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowConstraints) NumChildren() int { return 1 }

// TypeId returns AstTypeShowConstraints.
func (*ShowConstraints) TypeId() AstTypeId { return AstTypeShowConstraints }

// WalkAst visits the receiver with the provided callback.
func (x *ShowConstraints) WalkAst(fn AstWalkerFn) (_ *ShowConstraints, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowConstraints), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowConstraints)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowCreate) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowCreate), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowCreate) NumChildren() int { return 1 }

// TypeId returns AstTypeShowCreate.
func (*ShowCreate) TypeId() AstTypeId { return AstTypeShowCreate }

// WalkAst visits the receiver with the provided callback.
func (x *ShowCreate) WalkAst(fn AstWalkerFn) (_ *ShowCreate, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowCreate), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowCreate)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowDatabases) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowDatabases), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowDatabases) NumChildren() int { return 0 }

// TypeId returns AstTypeShowDatabases.
func (*ShowDatabases) TypeId() AstTypeId { return AstTypeShowDatabases }

// WalkAst visits the receiver with the provided callback.
func (x *ShowDatabases) WalkAst(fn AstWalkerFn) (_ *ShowDatabases, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowDatabases), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowDatabases)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowFingerprints) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowFingerprints), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowFingerprints) NumChildren() int { return 1 }

// TypeId returns AstTypeShowFingerprints.
func (*ShowFingerprints) TypeId() AstTypeId { return AstTypeShowFingerprints }

// WalkAst visits the receiver with the provided callback.
func (x *ShowFingerprints) WalkAst(fn AstWalkerFn) (_ *ShowFingerprints, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowFingerprints), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowFingerprints)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowGrants) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowGrants), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowGrants) NumChildren() int { return 1 }

// TypeId returns AstTypeShowGrants.
func (*ShowGrants) TypeId() AstTypeId { return AstTypeShowGrants }

// WalkAst visits the receiver with the provided callback.
func (x *ShowGrants) WalkAst(fn AstWalkerFn) (_ *ShowGrants, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowGrants), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowGrants)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowHistogram) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowHistogram), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowHistogram) NumChildren() int { return 0 }

// TypeId returns AstTypeShowHistogram.
func (*ShowHistogram) TypeId() AstTypeId { return AstTypeShowHistogram }

// WalkAst visits the receiver with the provided callback.
func (x *ShowHistogram) WalkAst(fn AstWalkerFn) (_ *ShowHistogram, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowHistogram), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowHistogram)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowIndex) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowIndex), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowIndex) NumChildren() int { return 1 }

// TypeId returns AstTypeShowIndex.
func (*ShowIndex) TypeId() AstTypeId { return AstTypeShowIndex }

// WalkAst visits the receiver with the provided callback.
func (x *ShowIndex) WalkAst(fn AstWalkerFn) (_ *ShowIndex, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowIndex), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowIndex)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowJobs) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowJobs), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowJobs) NumChildren() int { return 0 }

// TypeId returns AstTypeShowJobs.
func (*ShowJobs) TypeId() AstTypeId { return AstTypeShowJobs }

// WalkAst visits the receiver with the provided callback.
func (x *ShowJobs) WalkAst(fn AstWalkerFn) (_ *ShowJobs, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowJobs), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowJobs)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowQueries) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowQueries), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowQueries) NumChildren() int { return 0 }

// TypeId returns AstTypeShowQueries.
func (*ShowQueries) TypeId() AstTypeId { return AstTypeShowQueries }

// WalkAst visits the receiver with the provided callback.
func (x *ShowQueries) WalkAst(fn AstWalkerFn) (_ *ShowQueries, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowQueries), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowQueries)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowRanges) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowRanges), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *ShowRanges) NumChildren() int { return 2 }

// TypeId returns AstTypeShowRanges.
func (*ShowRanges) TypeId() AstTypeId { return AstTypeShowRanges }

// WalkAst visits the receiver with the provided callback.
func (x *ShowRanges) WalkAst(fn AstWalkerFn) (_ *ShowRanges, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowRanges), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowRanges)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowRoleGrants) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowRoleGrants), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowRoleGrants) NumChildren() int { return 0 }

// TypeId returns AstTypeShowRoleGrants.
func (*ShowRoleGrants) TypeId() AstTypeId { return AstTypeShowRoleGrants }

// WalkAst visits the receiver with the provided callback.
func (x *ShowRoleGrants) WalkAst(fn AstWalkerFn) (_ *ShowRoleGrants, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowRoleGrants), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowRoleGrants)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowRoles) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowRoles), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowRoles) NumChildren() int { return 0 }

// TypeId returns AstTypeShowRoles.
func (*ShowRoles) TypeId() AstTypeId { return AstTypeShowRoles }

// WalkAst visits the receiver with the provided callback.
func (x *ShowRoles) WalkAst(fn AstWalkerFn) (_ *ShowRoles, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowRoles), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowRoles)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowSchemas) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowSchemas), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowSchemas) NumChildren() int { return 0 }

// TypeId returns AstTypeShowSchemas.
func (*ShowSchemas) TypeId() AstTypeId { return AstTypeShowSchemas }

// WalkAst visits the receiver with the provided callback.
func (x *ShowSchemas) WalkAst(fn AstWalkerFn) (_ *ShowSchemas, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowSchemas), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowSchemas)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowSessions) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowSessions), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowSessions) NumChildren() int { return 0 }

// TypeId returns AstTypeShowSessions.
func (*ShowSessions) TypeId() AstTypeId { return AstTypeShowSessions }

// WalkAst visits the receiver with the provided callback.
func (x *ShowSessions) WalkAst(fn AstWalkerFn) (_ *ShowSessions, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowSessions), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowSessions)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowSyntax) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowSyntax), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowSyntax) NumChildren() int { return 0 }

// TypeId returns AstTypeShowSyntax.
func (*ShowSyntax) TypeId() AstTypeId { return AstTypeShowSyntax }

// WalkAst visits the receiver with the provided callback.
func (x *ShowSyntax) WalkAst(fn AstWalkerFn) (_ *ShowSyntax, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowSyntax), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowSyntax)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowTableStats) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowTableStats), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowTableStats) NumChildren() int { return 1 }

// TypeId returns AstTypeShowTableStats.
func (*ShowTableStats) TypeId() AstTypeId { return AstTypeShowTableStats }

// WalkAst visits the receiver with the provided callback.
func (x *ShowTableStats) WalkAst(fn AstWalkerFn) (_ *ShowTableStats, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowTableStats), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowTableStats)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowTables) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowTables), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowTables) NumChildren() int { return 1 }

// TypeId returns AstTypeShowTables.
func (*ShowTables) TypeId() AstTypeId { return AstTypeShowTables }

// WalkAst visits the receiver with the provided callback.
func (x *ShowTables) WalkAst(fn AstWalkerFn) (_ *ShowTables, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowTables), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowTables)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowTraceForSession) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowTraceForSession), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowTraceForSession) NumChildren() int { return 0 }

// TypeId returns AstTypeShowTraceForSession.
func (*ShowTraceForSession) TypeId() AstTypeId { return AstTypeShowTraceForSession }

// WalkAst visits the receiver with the provided callback.
func (x *ShowTraceForSession) WalkAst(
	fn AstWalkerFn,
) (_ *ShowTraceForSession, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowTraceForSession), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowTraceForSession)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowTransactionStatus) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowTransactionStatus), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowTransactionStatus) NumChildren() int { return 0 }

// TypeId returns AstTypeShowTransactionStatus.
func (*ShowTransactionStatus) TypeId() AstTypeId { return AstTypeShowTransactionStatus }

// WalkAst visits the receiver with the provided callback.
func (x *ShowTransactionStatus) WalkAst(
	fn AstWalkerFn,
) (_ *ShowTransactionStatus, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowTransactionStatus), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowTransactionStatus)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowUsers) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowUsers), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowUsers) NumChildren() int { return 0 }

// TypeId returns AstTypeShowUsers.
func (*ShowUsers) TypeId() AstTypeId { return AstTypeShowUsers }

// WalkAst visits the receiver with the provided callback.
func (x *ShowUsers) WalkAst(fn AstWalkerFn) (_ *ShowUsers, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowUsers), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowUsers)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowVar) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowVar), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *ShowVar) NumChildren() int { return 0 }

// TypeId returns AstTypeShowVar.
func (*ShowVar) TypeId() AstTypeId { return AstTypeShowVar }

// WalkAst visits the receiver with the provided callback.
func (x *ShowVar) WalkAst(fn AstWalkerFn) (_ *ShowVar, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowVar), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowVar)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ShowZoneConfig) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeShowZoneConfig), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ShowZoneConfig) NumChildren() int { return 1 }

// TypeId returns AstTypeShowZoneConfig.
func (*ShowZoneConfig) TypeId() AstTypeId { return AstTypeShowZoneConfig }

// WalkAst visits the receiver with the provided callback.
func (x *ShowZoneConfig) WalkAst(fn AstWalkerFn) (_ *ShowZoneConfig, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeShowZoneConfig), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ShowZoneConfig)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Split) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSplit), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *Split) NumChildren() int { return 3 }

// TypeId returns AstTypeSplit.
func (*Split) TypeId() AstTypeId { return AstTypeSplit }

// WalkAst visits the receiver with the provided callback.
func (x *Split) WalkAst(fn AstWalkerFn) (_ *Split, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSplit), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Split)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *StrVal) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeStrVal), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *StrVal) NumChildren() int { return 0 }

// TypeId returns AstTypeStrVal.
func (*StrVal) TypeId() AstTypeId { return AstTypeStrVal }

// WalkAst visits the receiver with the provided callback.
func (x *StrVal) WalkAst(fn AstWalkerFn) (_ *StrVal, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeStrVal), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*StrVal)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Subquery) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeSubquery), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Subquery) NumChildren() int { return 1 }

// TypeId returns AstTypeSubquery.
func (*Subquery) TypeId() AstTypeId { return AstTypeSubquery }

// WalkAst visits the receiver with the provided callback.
func (x *Subquery) WalkAst(fn AstWalkerFn) (_ *Subquery, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeSubquery), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Subquery)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *TableName) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTableName), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *TableName) NumChildren() int { return 0 }

// TypeId returns AstTypeTableName.
func (*TableName) TypeId() AstTypeId { return AstTypeTableName }

// WalkAst visits the receiver with the provided callback.
func (x *TableName) WalkAst(fn AstWalkerFn) (_ *TableName, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTableName), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*TableName)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *TableNamePrefix) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTableNamePrefix), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *TableNamePrefix) NumChildren() int { return 0 }

// TypeId returns AstTypeTableNamePrefix.
func (*TableNamePrefix) TypeId() AstTypeId { return AstTypeTableNamePrefix }

// WalkAst visits the receiver with the provided callback.
func (x *TableNamePrefix) WalkAst(fn AstWalkerFn) (_ *TableNamePrefix, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTableNamePrefix), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*TableNamePrefix)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *TableNameWithIndex) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTableNameWithIndex), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *TableNameWithIndex) NumChildren() int { return 1 }

// TypeId returns AstTypeTableNameWithIndex.
func (*TableNameWithIndex) TypeId() AstTypeId { return AstTypeTableNameWithIndex }

// WalkAst visits the receiver with the provided callback.
func (x *TableNameWithIndex) WalkAst(
	fn AstWalkerFn,
) (_ *TableNameWithIndex, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTableNameWithIndex), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*TableNameWithIndex)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *TargetList) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTargetList), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *TargetList) NumChildren() int { return 1 }

// TypeId returns AstTypeTargetList.
func (*TargetList) TypeId() AstTypeId { return AstTypeTargetList }

// WalkAst visits the receiver with the provided callback.
func (x *TargetList) WalkAst(fn AstWalkerFn) (_ *TargetList, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTargetList), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*TargetList)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *TransactionModes) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTransactionModes), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *TransactionModes) NumChildren() int { return 0 }

// TypeId returns AstTypeTransactionModes.
func (*TransactionModes) TypeId() AstTypeId { return AstTypeTransactionModes }

// WalkAst visits the receiver with the provided callback.
func (x *TransactionModes) WalkAst(fn AstWalkerFn) (_ *TransactionModes, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTransactionModes), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*TransactionModes)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Truncate) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTruncate), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Truncate) NumChildren() int { return 1 }

// TypeId returns AstTypeTruncate.
func (*Truncate) TypeId() AstTypeId { return AstTypeTruncate }

// WalkAst visits the receiver with the provided callback.
func (x *Truncate) WalkAst(fn AstWalkerFn) (_ *Truncate, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTruncate), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Truncate)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Tuple) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTuple), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Tuple) NumChildren() int { return 1 }

// TypeId returns AstTypeTuple.
func (*Tuple) TypeId() AstTypeId { return AstTypeTuple }

// WalkAst visits the receiver with the provided callback.
func (x *Tuple) WalkAst(fn AstWalkerFn) (_ *Tuple, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTuple), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Tuple)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *TupleStar) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeTupleStar), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *TupleStar) NumChildren() int { return 1 }

// TypeId returns AstTypeTupleStar.
func (*TupleStar) TypeId() AstTypeId { return AstTypeTupleStar }

// WalkAst visits the receiver with the provided callback.
func (x *TupleStar) WalkAst(fn AstWalkerFn) (_ *TupleStar, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeTupleStar), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*TupleStar)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *UnaryExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeUnaryExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *UnaryExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeUnaryExpr.
func (*UnaryExpr) TypeId() AstTypeId { return AstTypeUnaryExpr }

// WalkAst visits the receiver with the provided callback.
func (x *UnaryExpr) WalkAst(fn AstWalkerFn) (_ *UnaryExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeUnaryExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*UnaryExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *UnionClause) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeUnionClause), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *UnionClause) NumChildren() int { return 2 }

// TypeId returns AstTypeUnionClause.
func (*UnionClause) TypeId() AstTypeId { return AstTypeUnionClause }

// WalkAst visits the receiver with the provided callback.
func (x *UnionClause) WalkAst(fn AstWalkerFn) (_ *UnionClause, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeUnionClause), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*UnionClause)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *UnqualifiedStar) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeUnqualifiedStar), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *UnqualifiedStar) NumChildren() int { return 0 }

// TypeId returns AstTypeUnqualifiedStar.
func (*UnqualifiedStar) TypeId() AstTypeId { return AstTypeUnqualifiedStar }

// WalkAst visits the receiver with the provided callback.
func (x *UnqualifiedStar) WalkAst(fn AstWalkerFn) (_ *UnqualifiedStar, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeUnqualifiedStar), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*UnqualifiedStar)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *UnresolvedName) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeUnresolvedName), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 0.
func (x *UnresolvedName) NumChildren() int { return 0 }

// TypeId returns AstTypeUnresolvedName.
func (*UnresolvedName) TypeId() AstTypeId { return AstTypeUnresolvedName }

// WalkAst visits the receiver with the provided callback.
func (x *UnresolvedName) WalkAst(fn AstWalkerFn) (_ *UnresolvedName, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeUnresolvedName), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*UnresolvedName)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Update) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeUpdate), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 7.
func (x *Update) NumChildren() int { return 7 }

// TypeId returns AstTypeUpdate.
func (*Update) TypeId() AstTypeId { return AstTypeUpdate }

// WalkAst visits the receiver with the provided callback.
func (x *Update) WalkAst(fn AstWalkerFn) (_ *Update, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeUpdate), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Update)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *UpdateExpr) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeUpdateExpr), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *UpdateExpr) NumChildren() int { return 1 }

// TypeId returns AstTypeUpdateExpr.
func (*UpdateExpr) TypeId() AstTypeId { return AstTypeUpdateExpr }

// WalkAst visits the receiver with the provided callback.
func (x *UpdateExpr) WalkAst(fn AstWalkerFn) (_ *UpdateExpr, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeUpdateExpr), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*UpdateExpr)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ValuesClause) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeValuesClause), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ValuesClause) NumChildren() int { return 1 }

// TypeId returns AstTypeValuesClause.
func (*ValuesClause) TypeId() AstTypeId { return AstTypeValuesClause }

// WalkAst visits the receiver with the provided callback.
func (x *ValuesClause) WalkAst(fn AstWalkerFn) (_ *ValuesClause, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeValuesClause), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ValuesClause)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ValuesClauseWithNames) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeValuesClauseWithNames), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ValuesClauseWithNames) NumChildren() int { return 1 }

// TypeId returns AstTypeValuesClauseWithNames.
func (*ValuesClauseWithNames) TypeId() AstTypeId { return AstTypeValuesClauseWithNames }

// WalkAst visits the receiver with the provided callback.
func (x *ValuesClauseWithNames) WalkAst(
	fn AstWalkerFn,
) (_ *ValuesClauseWithNames, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeValuesClauseWithNames), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ValuesClauseWithNames)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *When) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeWhen), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *When) NumChildren() int { return 2 }

// TypeId returns AstTypeWhen.
func (*When) TypeId() AstTypeId { return AstTypeWhen }

// WalkAst visits the receiver with the provided callback.
func (x *When) WalkAst(fn AstWalkerFn) (_ *When, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeWhen), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*When)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *Where) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeWhere), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *Where) NumChildren() int { return 1 }

// TypeId returns AstTypeWhere.
func (*Where) TypeId() AstTypeId { return AstTypeWhere }

// WalkAst visits the receiver with the provided callback.
func (x *Where) WalkAst(fn AstWalkerFn) (_ *Where, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeWhere), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*Where)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *WindowDef) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeWindowDef), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 3.
func (x *WindowDef) NumChildren() int { return 3 }

// TypeId returns AstTypeWindowDef.
func (*WindowDef) TypeId() AstTypeId { return AstTypeWindowDef }

// WalkAst visits the receiver with the provided callback.
func (x *WindowDef) WalkAst(fn AstWalkerFn) (_ *WindowDef, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeWindowDef), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*WindowDef)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *WindowFrame) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeWindowFrame), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *WindowFrame) NumChildren() int { return 1 }

// TypeId returns AstTypeWindowFrame.
func (*WindowFrame) TypeId() AstTypeId { return AstTypeWindowFrame }

// WalkAst visits the receiver with the provided callback.
func (x *WindowFrame) WalkAst(fn AstWalkerFn) (_ *WindowFrame, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeWindowFrame), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*WindowFrame)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *WindowFrameBound) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeWindowFrameBound), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *WindowFrameBound) NumChildren() int { return 1 }

// TypeId returns AstTypeWindowFrameBound.
func (*WindowFrameBound) TypeId() AstTypeId { return AstTypeWindowFrameBound }

// WalkAst visits the receiver with the provided callback.
func (x *WindowFrameBound) WalkAst(fn AstWalkerFn) (_ *WindowFrameBound, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeWindowFrameBound), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*WindowFrameBound)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *WindowFrameBounds) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeWindowFrameBounds), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 2.
func (x *WindowFrameBounds) NumChildren() int { return 2 }

// TypeId returns AstTypeWindowFrameBounds.
func (*WindowFrameBounds) TypeId() AstTypeId { return AstTypeWindowFrameBounds }

// WalkAst visits the receiver with the provided callback.
func (x *WindowFrameBounds) WalkAst(
	fn AstWalkerFn,
) (_ *WindowFrameBounds, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeWindowFrameBounds), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*WindowFrameBounds)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *With) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeWith), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *With) NumChildren() int { return 1 }

// TypeId returns AstTypeWith.
func (*With) TypeId() AstTypeId { return AstTypeWith }

// WalkAst visits the receiver with the provided callback.
func (x *With) WalkAst(fn AstWalkerFn) (_ *With, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeWith), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*With)(y), changed, nil
}

// ChildAt implements AstAbstract.
func (x *ZoneSpecifier) ChildAt(index int) AstAbstract {
	self := &astAbstract{astEngine.Abstract(e.TypeId(AstTypeZoneSpecifier), e.Ptr(x))}
	return self.ChildAt(index)
}

// NumChildren returns 1.
func (x *ZoneSpecifier) NumChildren() int { return 1 }

// TypeId returns AstTypeZoneSpecifier.
func (*ZoneSpecifier) TypeId() AstTypeId { return AstTypeZoneSpecifier }

// WalkAst visits the receiver with the provided callback.
func (x *ZoneSpecifier) WalkAst(fn AstWalkerFn) (_ *ZoneSpecifier, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeZoneSpecifier), e.Ptr(x))
	if err != nil {
		return nil, false, err
	}
	return (*ZoneSpecifier)(y), changed, nil
}

// WalkAst visits the receiver with the provided callback.
func WalkAst(x Ast, fn AstWalkerFn) (_ Ast, changed bool, err error) {
	var y e.Ptr
	y, changed, err = astEngine.Execute(fn, e.TypeId(AstTypeAst), e.Ptr(&x))
	if err != nil {
		return nil, false, err
	}
	return *(*Ast)(y), changed, nil
}

var astEngine = e.New(e.TypeMap{
	// ------ Structs ------
	AstTypeAliasClause: {
		Copy: func(dest, from e.Ptr) { *(*AliasClause)(dest) = *(*AliasClause)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AliasClause)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&AliasClause{}) },
		SizeOf:    unsafe.Sizeof(AliasClause{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAliasClause),
	},
	AstTypeAllColumnsSelector: {
		Copy: func(dest, from e.Ptr) { *(*AllColumnsSelector)(dest) = *(*AllColumnsSelector)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AllColumnsSelector)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "TableName", Offset: unsafe.Offsetof(AllColumnsSelector{}.TableName), Target: e.TypeId(AstTypeUnresolvedName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AllColumnsSelector{}) },
		SizeOf:    unsafe.Sizeof(AllColumnsSelector{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAllColumnsSelector),
	},
	AstTypeAlterIndex: {
		Copy: func(dest, from e.Ptr) { *(*AlterIndex)(dest) = *(*AlterIndex)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AlterIndex)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Index", Offset: unsafe.Offsetof(AlterIndex{}.Index), Target: e.TypeId(AstTypeTableNameWithIndexPtr)},
			{Name: "Cmds", Offset: unsafe.Offsetof(AlterIndex{}.Cmds), Target: e.TypeId(AstTypeAlterIndexCmdSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AlterIndex{}) },
		SizeOf:    unsafe.Sizeof(AlterIndex{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAlterIndex),
	},
	AstTypeAlterSequence: {
		Copy: func(dest, from e.Ptr) { *(*AlterSequence)(dest) = *(*AlterSequence)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AlterSequence)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(AlterSequence{}.Name), Target: e.TypeId(AstTypeTableName)},
			{Name: "Options", Offset: unsafe.Offsetof(AlterSequence{}.Options), Target: e.TypeId(AstTypeSequenceOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AlterSequence{}) },
		SizeOf:    unsafe.Sizeof(AlterSequence{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAlterSequence),
	},
	AstTypeAlterTable: {
		Copy: func(dest, from e.Ptr) { *(*AlterTable)(dest) = *(*AlterTable)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AlterTable)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(AlterTable{}.Table), Target: e.TypeId(AstTypeTableName)},
			{Name: "Cmds", Offset: unsafe.Offsetof(AlterTable{}.Cmds), Target: e.TypeId(AstTypeAlterTableCmdSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AlterTable{}) },
		SizeOf:    unsafe.Sizeof(AlterTable{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAlterTable),
	},
	AstTypeAlterUserSetPassword: {
		Copy: func(dest, from e.Ptr) { *(*AlterUserSetPassword)(dest) = *(*AlterUserSetPassword)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AlterUserSetPassword)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(AlterUserSetPassword{}.Name), Target: e.TypeId(AstTypeExpr)},
			{Name: "Password", Offset: unsafe.Offsetof(AlterUserSetPassword{}.Password), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AlterUserSetPassword{}) },
		SizeOf:    unsafe.Sizeof(AlterUserSetPassword{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAlterUserSetPassword),
	},
	AstTypeAndExpr: {
		Copy: func(dest, from e.Ptr) { *(*AndExpr)(dest) = *(*AndExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AndExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Left", Offset: unsafe.Offsetof(AndExpr{}.Left), Target: e.TypeId(AstTypeExpr)},
			{Name: "Right", Offset: unsafe.Offsetof(AndExpr{}.Right), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AndExpr{}) },
		SizeOf:    unsafe.Sizeof(AndExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAndExpr),
	},
	AstTypeAnnotateTypeExpr: {
		Copy: func(dest, from e.Ptr) { *(*AnnotateTypeExpr)(dest) = *(*AnnotateTypeExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AnnotateTypeExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(AnnotateTypeExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AnnotateTypeExpr{}) },
		SizeOf:    unsafe.Sizeof(AnnotateTypeExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAnnotateTypeExpr),
	},
	AstTypeArray: {
		Copy: func(dest, from e.Ptr) { *(*Array)(dest) = *(*Array)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Array)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Exprs", Offset: unsafe.Offsetof(Array{}.Exprs), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Array{}) },
		SizeOf:    unsafe.Sizeof(Array{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeArray),
	},
	AstTypeArrayFlatten: {
		Copy: func(dest, from e.Ptr) { *(*ArrayFlatten)(dest) = *(*ArrayFlatten)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ArrayFlatten)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Subquery", Offset: unsafe.Offsetof(ArrayFlatten{}.Subquery), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ArrayFlatten{}) },
		SizeOf:    unsafe.Sizeof(ArrayFlatten{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeArrayFlatten),
	},
	AstTypeArraySubscript: {
		Copy: func(dest, from e.Ptr) { *(*ArraySubscript)(dest) = *(*ArraySubscript)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ArraySubscript)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Begin", Offset: unsafe.Offsetof(ArraySubscript{}.Begin), Target: e.TypeId(AstTypeExpr)},
			{Name: "End", Offset: unsafe.Offsetof(ArraySubscript{}.End), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ArraySubscript{}) },
		SizeOf:    unsafe.Sizeof(ArraySubscript{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeArraySubscript),
	},
	AstTypeAsOfClause: {
		Copy: func(dest, from e.Ptr) { *(*AsOfClause)(dest) = *(*AsOfClause)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*AsOfClause)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(AsOfClause{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&AsOfClause{}) },
		SizeOf:    unsafe.Sizeof(AsOfClause{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeAsOfClause),
	},
	AstTypeBackup: {
		Copy: func(dest, from e.Ptr) { *(*Backup)(dest) = *(*Backup)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Backup)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Targets", Offset: unsafe.Offsetof(Backup{}.Targets), Target: e.TypeId(AstTypeTargetList)},
			{Name: "To", Offset: unsafe.Offsetof(Backup{}.To), Target: e.TypeId(AstTypeExpr)},
			{Name: "IncrementalFrom", Offset: unsafe.Offsetof(Backup{}.IncrementalFrom), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "AsOf", Offset: unsafe.Offsetof(Backup{}.AsOf), Target: e.TypeId(AstTypeAsOfClause)},
			{Name: "Options", Offset: unsafe.Offsetof(Backup{}.Options), Target: e.TypeId(AstTypeKVOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Backup{}) },
		SizeOf:    unsafe.Sizeof(Backup{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeBackup),
	},
	AstTypeBeginTransaction: {
		Copy: func(dest, from e.Ptr) { *(*BeginTransaction)(dest) = *(*BeginTransaction)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*BeginTransaction)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Modes", Offset: unsafe.Offsetof(BeginTransaction{}.Modes), Target: e.TypeId(AstTypeTransactionModes)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&BeginTransaction{}) },
		SizeOf:    unsafe.Sizeof(BeginTransaction{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeBeginTransaction),
	},
	AstTypeBinaryExpr: {
		Copy: func(dest, from e.Ptr) { *(*BinaryExpr)(dest) = *(*BinaryExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*BinaryExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Left", Offset: unsafe.Offsetof(BinaryExpr{}.Left), Target: e.TypeId(AstTypeExpr)},
			{Name: "Right", Offset: unsafe.Offsetof(BinaryExpr{}.Right), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&BinaryExpr{}) },
		SizeOf:    unsafe.Sizeof(BinaryExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeBinaryExpr),
	},
	AstTypeCTE: {
		Copy: func(dest, from e.Ptr) { *(*CTE)(dest) = *(*CTE)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CTE)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(CTE{}.Name), Target: e.TypeId(AstTypeAliasClause)},
			{Name: "Stmt", Offset: unsafe.Offsetof(CTE{}.Stmt), Target: e.TypeId(AstTypeStatement)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CTE{}) },
		SizeOf:    unsafe.Sizeof(CTE{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCTE),
	},
	AstTypeCancelQueries: {
		Copy: func(dest, from e.Ptr) { *(*CancelQueries)(dest) = *(*CancelQueries)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CancelQueries)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Queries", Offset: unsafe.Offsetof(CancelQueries{}.Queries), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CancelQueries{}) },
		SizeOf:    unsafe.Sizeof(CancelQueries{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCancelQueries),
	},
	AstTypeCancelSessions: {
		Copy: func(dest, from e.Ptr) { *(*CancelSessions)(dest) = *(*CancelSessions)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CancelSessions)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Sessions", Offset: unsafe.Offsetof(CancelSessions{}.Sessions), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CancelSessions{}) },
		SizeOf:    unsafe.Sizeof(CancelSessions{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCancelSessions),
	},
	AstTypeCaseExpr: {
		Copy: func(dest, from e.Ptr) { *(*CaseExpr)(dest) = *(*CaseExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CaseExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(CaseExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
			{Name: "Whens", Offset: unsafe.Offsetof(CaseExpr{}.Whens), Target: e.TypeId(AstTypeWhenPtrSlice)},
			{Name: "Else", Offset: unsafe.Offsetof(CaseExpr{}.Else), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CaseExpr{}) },
		SizeOf:    unsafe.Sizeof(CaseExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCaseExpr),
	},
	AstTypeCastExpr: {
		Copy: func(dest, from e.Ptr) { *(*CastExpr)(dest) = *(*CastExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CastExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(CastExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CastExpr{}) },
		SizeOf:    unsafe.Sizeof(CastExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCastExpr),
	},
	AstTypeCoalesceExpr: {
		Copy: func(dest, from e.Ptr) { *(*CoalesceExpr)(dest) = *(*CoalesceExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CoalesceExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Exprs", Offset: unsafe.Offsetof(CoalesceExpr{}.Exprs), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CoalesceExpr{}) },
		SizeOf:    unsafe.Sizeof(CoalesceExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCoalesceExpr),
	},
	AstTypeCollateExpr: {
		Copy: func(dest, from e.Ptr) { *(*CollateExpr)(dest) = *(*CollateExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CollateExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(CollateExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CollateExpr{}) },
		SizeOf:    unsafe.Sizeof(CollateExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCollateExpr),
	},
	AstTypeColumnAccessExpr: {
		Copy: func(dest, from e.Ptr) { *(*ColumnAccessExpr)(dest) = *(*ColumnAccessExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ColumnAccessExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(ColumnAccessExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ColumnAccessExpr{}) },
		SizeOf:    unsafe.Sizeof(ColumnAccessExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeColumnAccessExpr),
	},
	AstTypeColumnItem: {
		Copy: func(dest, from e.Ptr) { *(*ColumnItem)(dest) = *(*ColumnItem)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ColumnItem)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "TableName", Offset: unsafe.Offsetof(ColumnItem{}.TableName), Target: e.TypeId(AstTypeUnresolvedName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ColumnItem{}) },
		SizeOf:    unsafe.Sizeof(ColumnItem{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeColumnItem),
	},
	AstTypeCommentOnTable: {
		Copy: func(dest, from e.Ptr) { *(*CommentOnTable)(dest) = *(*CommentOnTable)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CommentOnTable)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(CommentOnTable{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CommentOnTable{}) },
		SizeOf:    unsafe.Sizeof(CommentOnTable{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCommentOnTable),
	},
	AstTypeCommitTransaction: {
		Copy: func(dest, from e.Ptr) { *(*CommitTransaction)(dest) = *(*CommitTransaction)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CommitTransaction)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&CommitTransaction{}) },
		SizeOf:    unsafe.Sizeof(CommitTransaction{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCommitTransaction),
	},
	AstTypeComparisonExpr: {
		Copy: func(dest, from e.Ptr) { *(*ComparisonExpr)(dest) = *(*ComparisonExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ComparisonExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Left", Offset: unsafe.Offsetof(ComparisonExpr{}.Left), Target: e.TypeId(AstTypeExpr)},
			{Name: "Right", Offset: unsafe.Offsetof(ComparisonExpr{}.Right), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ComparisonExpr{}) },
		SizeOf:    unsafe.Sizeof(ComparisonExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeComparisonExpr),
	},
	AstTypeControlJobs: {
		Copy: func(dest, from e.Ptr) { *(*ControlJobs)(dest) = *(*ControlJobs)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ControlJobs)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Jobs", Offset: unsafe.Offsetof(ControlJobs{}.Jobs), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ControlJobs{}) },
		SizeOf:    unsafe.Sizeof(ControlJobs{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeControlJobs),
	},
	AstTypeCopyFrom: {
		Copy: func(dest, from e.Ptr) { *(*CopyFrom)(dest) = *(*CopyFrom)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CopyFrom)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(CopyFrom{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CopyFrom{}) },
		SizeOf:    unsafe.Sizeof(CopyFrom{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCopyFrom),
	},
	AstTypeCreateChangefeed: {
		Copy: func(dest, from e.Ptr) { *(*CreateChangefeed)(dest) = *(*CreateChangefeed)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateChangefeed)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Targets", Offset: unsafe.Offsetof(CreateChangefeed{}.Targets), Target: e.TypeId(AstTypeTargetList)},
			{Name: "SinkURI", Offset: unsafe.Offsetof(CreateChangefeed{}.SinkURI), Target: e.TypeId(AstTypeExpr)},
			{Name: "Options", Offset: unsafe.Offsetof(CreateChangefeed{}.Options), Target: e.TypeId(AstTypeKVOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateChangefeed{}) },
		SizeOf:    unsafe.Sizeof(CreateChangefeed{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateChangefeed),
	},
	AstTypeCreateDatabase: {
		Copy: func(dest, from e.Ptr) { *(*CreateDatabase)(dest) = *(*CreateDatabase)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateDatabase)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateDatabase{}) },
		SizeOf:    unsafe.Sizeof(CreateDatabase{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateDatabase),
	},
	AstTypeCreateIndex: {
		Copy: func(dest, from e.Ptr) { *(*CreateIndex)(dest) = *(*CreateIndex)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateIndex)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(CreateIndex{}.Table), Target: e.TypeId(AstTypeTableName)},
			{Name: "Columns", Offset: unsafe.Offsetof(CreateIndex{}.Columns), Target: e.TypeId(AstTypeIndexElemSlice)},
			{Name: "Interleave", Offset: unsafe.Offsetof(CreateIndex{}.Interleave), Target: e.TypeId(AstTypeInterleaveDefPtr)},
			{Name: "PartitionBy", Offset: unsafe.Offsetof(CreateIndex{}.PartitionBy), Target: e.TypeId(AstTypePartitionByPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateIndex{}) },
		SizeOf:    unsafe.Sizeof(CreateIndex{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateIndex),
	},
	AstTypeCreateRole: {
		Copy: func(dest, from e.Ptr) { *(*CreateRole)(dest) = *(*CreateRole)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateRole)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(CreateRole{}.Name), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateRole{}) },
		SizeOf:    unsafe.Sizeof(CreateRole{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateRole),
	},
	AstTypeCreateSequence: {
		Copy: func(dest, from e.Ptr) { *(*CreateSequence)(dest) = *(*CreateSequence)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateSequence)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(CreateSequence{}.Name), Target: e.TypeId(AstTypeTableName)},
			{Name: "Options", Offset: unsafe.Offsetof(CreateSequence{}.Options), Target: e.TypeId(AstTypeSequenceOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateSequence{}) },
		SizeOf:    unsafe.Sizeof(CreateSequence{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateSequence),
	},
	AstTypeCreateStats: {
		Copy: func(dest, from e.Ptr) { *(*CreateStats)(dest) = *(*CreateStats)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateStats)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(CreateStats{}.Table), Target: e.TypeId(AstTypeTableExpr)},
			{Name: "AsOf", Offset: unsafe.Offsetof(CreateStats{}.AsOf), Target: e.TypeId(AstTypeAsOfClause)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateStats{}) },
		SizeOf:    unsafe.Sizeof(CreateStats{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateStats),
	},
	AstTypeCreateTable: {
		Copy: func(dest, from e.Ptr) { *(*CreateTable)(dest) = *(*CreateTable)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateTable)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(CreateTable{}.Table), Target: e.TypeId(AstTypeTableName)},
			{Name: "Interleave", Offset: unsafe.Offsetof(CreateTable{}.Interleave), Target: e.TypeId(AstTypeInterleaveDefPtr)},
			{Name: "PartitionBy", Offset: unsafe.Offsetof(CreateTable{}.PartitionBy), Target: e.TypeId(AstTypePartitionByPtr)},
			{Name: "Defs", Offset: unsafe.Offsetof(CreateTable{}.Defs), Target: e.TypeId(AstTypeTableDefSlice)},
			{Name: "AsSource", Offset: unsafe.Offsetof(CreateTable{}.AsSource), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateTable{}) },
		SizeOf:    unsafe.Sizeof(CreateTable{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateTable),
	},
	AstTypeCreateUser: {
		Copy: func(dest, from e.Ptr) { *(*CreateUser)(dest) = *(*CreateUser)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateUser)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(CreateUser{}.Name), Target: e.TypeId(AstTypeExpr)},
			{Name: "Password", Offset: unsafe.Offsetof(CreateUser{}.Password), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateUser{}) },
		SizeOf:    unsafe.Sizeof(CreateUser{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateUser),
	},
	AstTypeCreateView: {
		Copy: func(dest, from e.Ptr) { *(*CreateView)(dest) = *(*CreateView)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*CreateView)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(CreateView{}.Name), Target: e.TypeId(AstTypeTableName)},
			{Name: "AsSource", Offset: unsafe.Offsetof(CreateView{}.AsSource), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&CreateView{}) },
		SizeOf:    unsafe.Sizeof(CreateView{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeCreateView),
	},
	AstTypeDArray: {
		Copy: func(dest, from e.Ptr) { *(*DArray)(dest) = *(*DArray)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DArray)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Array", Offset: unsafe.Offsetof(DArray{}.Array), Target: e.TypeId(AstTypeDatumSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DArray{}) },
		SizeOf:    unsafe.Sizeof(DArray{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDArray),
	},
	AstTypeDBitArray: {
		Copy: func(dest, from e.Ptr) { *(*DBitArray)(dest) = *(*DBitArray)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DBitArray)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DBitArray{}) },
		SizeOf:    unsafe.Sizeof(DBitArray{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDBitArray),
	},
	AstTypeDCollatedString: {
		Copy: func(dest, from e.Ptr) { *(*DCollatedString)(dest) = *(*DCollatedString)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DCollatedString)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DCollatedString{}) },
		SizeOf:    unsafe.Sizeof(DCollatedString{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDCollatedString),
	},
	AstTypeDDecimal: {
		Copy: func(dest, from e.Ptr) { *(*DDecimal)(dest) = *(*DDecimal)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DDecimal)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DDecimal{}) },
		SizeOf:    unsafe.Sizeof(DDecimal{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDDecimal),
	},
	AstTypeDIPAddr: {
		Copy: func(dest, from e.Ptr) { *(*DIPAddr)(dest) = *(*DIPAddr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DIPAddr)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DIPAddr{}) },
		SizeOf:    unsafe.Sizeof(DIPAddr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDIPAddr),
	},
	AstTypeDInterval: {
		Copy: func(dest, from e.Ptr) { *(*DInterval)(dest) = *(*DInterval)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DInterval)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DInterval{}) },
		SizeOf:    unsafe.Sizeof(DInterval{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDInterval),
	},
	AstTypeDJSON: {
		Copy: func(dest, from e.Ptr) { *(*DJSON)(dest) = *(*DJSON)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DJSON)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DJSON{}) },
		SizeOf:    unsafe.Sizeof(DJSON{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDJSON),
	},
	AstTypeDOid: {
		Copy: func(dest, from e.Ptr) { *(*DOid)(dest) = *(*DOid)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DOid)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DOid{}) },
		SizeOf:    unsafe.Sizeof(DOid{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDOid),
	},
	AstTypeDOidWrapper: {
		Copy: func(dest, from e.Ptr) { *(*DOidWrapper)(dest) = *(*DOidWrapper)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DOidWrapper)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Wrapped", Offset: unsafe.Offsetof(DOidWrapper{}.Wrapped), Target: e.TypeId(AstTypeDatum)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DOidWrapper{}) },
		SizeOf:    unsafe.Sizeof(DOidWrapper{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDOidWrapper),
	},
	AstTypeDTimestamp: {
		Copy: func(dest, from e.Ptr) { *(*DTimestamp)(dest) = *(*DTimestamp)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DTimestamp)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DTimestamp{}) },
		SizeOf:    unsafe.Sizeof(DTimestamp{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDTimestamp),
	},
	AstTypeDTimestampTZ: {
		Copy: func(dest, from e.Ptr) { *(*DTimestampTZ)(dest) = *(*DTimestampTZ)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DTimestampTZ)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DTimestampTZ{}) },
		SizeOf:    unsafe.Sizeof(DTimestampTZ{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDTimestampTZ),
	},
	AstTypeDTuple: {
		Copy: func(dest, from e.Ptr) { *(*DTuple)(dest) = *(*DTuple)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DTuple)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "D", Offset: unsafe.Offsetof(DTuple{}.D), Target: e.TypeId(AstTypeDatumSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DTuple{}) },
		SizeOf:    unsafe.Sizeof(DTuple{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDTuple),
	},
	AstTypeDUuid: {
		Copy: func(dest, from e.Ptr) { *(*DUuid)(dest) = *(*DUuid)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DUuid)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DUuid{}) },
		SizeOf:    unsafe.Sizeof(DUuid{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDUuid),
	},
	AstTypeDeallocate: {
		Copy: func(dest, from e.Ptr) { *(*Deallocate)(dest) = *(*Deallocate)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Deallocate)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&Deallocate{}) },
		SizeOf:    unsafe.Sizeof(Deallocate{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDeallocate),
	},
	AstTypeDefaultVal: {
		Copy: func(dest, from e.Ptr) { *(*DefaultVal)(dest) = *(*DefaultVal)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DefaultVal)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DefaultVal{}) },
		SizeOf:    unsafe.Sizeof(DefaultVal{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDefaultVal),
	},
	AstTypeDelete: {
		Copy: func(dest, from e.Ptr) { *(*Delete)(dest) = *(*Delete)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Delete)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "With", Offset: unsafe.Offsetof(Delete{}.With), Target: e.TypeId(AstTypeWithPtr)},
			{Name: "Table", Offset: unsafe.Offsetof(Delete{}.Table), Target: e.TypeId(AstTypeTableExpr)},
			{Name: "Where", Offset: unsafe.Offsetof(Delete{}.Where), Target: e.TypeId(AstTypeWherePtr)},
			{Name: "OrderBy", Offset: unsafe.Offsetof(Delete{}.OrderBy), Target: e.TypeId(AstTypeOrderPtrSlice)},
			{Name: "Limit", Offset: unsafe.Offsetof(Delete{}.Limit), Target: e.TypeId(AstTypeLimitPtr)},
			{Name: "Returning", Offset: unsafe.Offsetof(Delete{}.Returning), Target: e.TypeId(AstTypeReturningClause)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Delete{}) },
		SizeOf:    unsafe.Sizeof(Delete{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDelete),
	},
	AstTypeDiscard: {
		Copy: func(dest, from e.Ptr) { *(*Discard)(dest) = *(*Discard)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Discard)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&Discard{}) },
		SizeOf:    unsafe.Sizeof(Discard{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDiscard),
	},
	AstTypeDropDatabase: {
		Copy: func(dest, from e.Ptr) { *(*DropDatabase)(dest) = *(*DropDatabase)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DropDatabase)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&DropDatabase{}) },
		SizeOf:    unsafe.Sizeof(DropDatabase{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDropDatabase),
	},
	AstTypeDropIndex: {
		Copy: func(dest, from e.Ptr) { *(*DropIndex)(dest) = *(*DropIndex)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DropIndex)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "IndexList", Offset: unsafe.Offsetof(DropIndex{}.IndexList), Target: e.TypeId(AstTypeTableNameWithIndexPtrSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DropIndex{}) },
		SizeOf:    unsafe.Sizeof(DropIndex{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDropIndex),
	},
	AstTypeDropRole: {
		Copy: func(dest, from e.Ptr) { *(*DropRole)(dest) = *(*DropRole)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DropRole)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Names", Offset: unsafe.Offsetof(DropRole{}.Names), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DropRole{}) },
		SizeOf:    unsafe.Sizeof(DropRole{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDropRole),
	},
	AstTypeDropSequence: {
		Copy: func(dest, from e.Ptr) { *(*DropSequence)(dest) = *(*DropSequence)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DropSequence)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Names", Offset: unsafe.Offsetof(DropSequence{}.Names), Target: e.TypeId(AstTypeTableNameSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DropSequence{}) },
		SizeOf:    unsafe.Sizeof(DropSequence{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDropSequence),
	},
	AstTypeDropTable: {
		Copy: func(dest, from e.Ptr) { *(*DropTable)(dest) = *(*DropTable)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DropTable)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Names", Offset: unsafe.Offsetof(DropTable{}.Names), Target: e.TypeId(AstTypeTableNameSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DropTable{}) },
		SizeOf:    unsafe.Sizeof(DropTable{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDropTable),
	},
	AstTypeDropUser: {
		Copy: func(dest, from e.Ptr) { *(*DropUser)(dest) = *(*DropUser)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DropUser)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Names", Offset: unsafe.Offsetof(DropUser{}.Names), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DropUser{}) },
		SizeOf:    unsafe.Sizeof(DropUser{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDropUser),
	},
	AstTypeDropView: {
		Copy: func(dest, from e.Ptr) { *(*DropView)(dest) = *(*DropView)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*DropView)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Names", Offset: unsafe.Offsetof(DropView{}.Names), Target: e.TypeId(AstTypeTableNameSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&DropView{}) },
		SizeOf:    unsafe.Sizeof(DropView{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeDropView),
	},
	AstTypeExecute: {
		Copy: func(dest, from e.Ptr) { *(*Execute)(dest) = *(*Execute)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Execute)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Params", Offset: unsafe.Offsetof(Execute{}.Params), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Execute{}) },
		SizeOf:    unsafe.Sizeof(Execute{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeExecute),
	},
	AstTypeExplain: {
		Copy: func(dest, from e.Ptr) { *(*Explain)(dest) = *(*Explain)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Explain)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Statement", Offset: unsafe.Offsetof(Explain{}.Statement), Target: e.TypeId(AstTypeStatement)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Explain{}) },
		SizeOf:    unsafe.Sizeof(Explain{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeExplain),
	},
	AstTypeExport: {
		Copy: func(dest, from e.Ptr) { *(*Export)(dest) = *(*Export)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Export)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Query", Offset: unsafe.Offsetof(Export{}.Query), Target: e.TypeId(AstTypeSelectPtr)},
			{Name: "File", Offset: unsafe.Offsetof(Export{}.File), Target: e.TypeId(AstTypeExpr)},
			{Name: "Options", Offset: unsafe.Offsetof(Export{}.Options), Target: e.TypeId(AstTypeKVOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Export{}) },
		SizeOf:    unsafe.Sizeof(Export{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeExport),
	},
	AstTypeFrom: {
		Copy: func(dest, from e.Ptr) { *(*From)(dest) = *(*From)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*From)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Tables", Offset: unsafe.Offsetof(From{}.Tables), Target: e.TypeId(AstTypeTableExprSlice)},
			{Name: "AsOf", Offset: unsafe.Offsetof(From{}.AsOf), Target: e.TypeId(AstTypeAsOfClause)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&From{}) },
		SizeOf:    unsafe.Sizeof(From{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeFrom),
	},
	AstTypeFuncExpr: {
		Copy: func(dest, from e.Ptr) { *(*FuncExpr)(dest) = *(*FuncExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*FuncExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Func", Offset: unsafe.Offsetof(FuncExpr{}.Func), Target: e.TypeId(AstTypeResolvableFunctionReference)},
			{Name: "Exprs", Offset: unsafe.Offsetof(FuncExpr{}.Exprs), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "Filter", Offset: unsafe.Offsetof(FuncExpr{}.Filter), Target: e.TypeId(AstTypeExpr)},
			{Name: "WindowDef", Offset: unsafe.Offsetof(FuncExpr{}.WindowDef), Target: e.TypeId(AstTypeWindowDefPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&FuncExpr{}) },
		SizeOf:    unsafe.Sizeof(FuncExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeFuncExpr),
	},
	AstTypeGrant: {
		Copy: func(dest, from e.Ptr) { *(*Grant)(dest) = *(*Grant)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Grant)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Targets", Offset: unsafe.Offsetof(Grant{}.Targets), Target: e.TypeId(AstTypeTargetList)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Grant{}) },
		SizeOf:    unsafe.Sizeof(Grant{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeGrant),
	},
	AstTypeGrantRole: {
		Copy: func(dest, from e.Ptr) { *(*GrantRole)(dest) = *(*GrantRole)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*GrantRole)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&GrantRole{}) },
		SizeOf:    unsafe.Sizeof(GrantRole{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeGrantRole),
	},
	AstTypeIfErrExpr: {
		Copy: func(dest, from e.Ptr) { *(*IfErrExpr)(dest) = *(*IfErrExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*IfErrExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Cond", Offset: unsafe.Offsetof(IfErrExpr{}.Cond), Target: e.TypeId(AstTypeExpr)},
			{Name: "Else", Offset: unsafe.Offsetof(IfErrExpr{}.Else), Target: e.TypeId(AstTypeExpr)},
			{Name: "ErrCode", Offset: unsafe.Offsetof(IfErrExpr{}.ErrCode), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&IfErrExpr{}) },
		SizeOf:    unsafe.Sizeof(IfErrExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeIfErrExpr),
	},
	AstTypeIfExpr: {
		Copy: func(dest, from e.Ptr) { *(*IfExpr)(dest) = *(*IfExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*IfExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Cond", Offset: unsafe.Offsetof(IfExpr{}.Cond), Target: e.TypeId(AstTypeExpr)},
			{Name: "True", Offset: unsafe.Offsetof(IfExpr{}.True), Target: e.TypeId(AstTypeExpr)},
			{Name: "Else", Offset: unsafe.Offsetof(IfExpr{}.Else), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&IfExpr{}) },
		SizeOf:    unsafe.Sizeof(IfExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeIfExpr),
	},
	AstTypeImport: {
		Copy: func(dest, from e.Ptr) { *(*Import)(dest) = *(*Import)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Import)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(Import{}.Table), Target: e.TypeId(AstTypeTableNamePtr)},
			{Name: "CreateFile", Offset: unsafe.Offsetof(Import{}.CreateFile), Target: e.TypeId(AstTypeExpr)},
			{Name: "CreateDefs", Offset: unsafe.Offsetof(Import{}.CreateDefs), Target: e.TypeId(AstTypeTableDefSlice)},
			{Name: "Files", Offset: unsafe.Offsetof(Import{}.Files), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "Options", Offset: unsafe.Offsetof(Import{}.Options), Target: e.TypeId(AstTypeKVOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Import{}) },
		SizeOf:    unsafe.Sizeof(Import{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeImport),
	},
	AstTypeIndexElem: {
		Copy: func(dest, from e.Ptr) { *(*IndexElem)(dest) = *(*IndexElem)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*IndexElem)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&IndexElem{}) },
		SizeOf:    unsafe.Sizeof(IndexElem{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeIndexElem),
	},
	AstTypeIndexedVar: {
		Copy: func(dest, from e.Ptr) { *(*IndexedVar)(dest) = *(*IndexedVar)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*IndexedVar)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&IndexedVar{}) },
		SizeOf:    unsafe.Sizeof(IndexedVar{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeIndexedVar),
	},
	AstTypeIndirectionExpr: {
		Copy: func(dest, from e.Ptr) { *(*IndirectionExpr)(dest) = *(*IndirectionExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*IndirectionExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(IndirectionExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
			{Name: "Indirection", Offset: unsafe.Offsetof(IndirectionExpr{}.Indirection), Target: e.TypeId(AstTypeArraySubscriptPtrSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&IndirectionExpr{}) },
		SizeOf:    unsafe.Sizeof(IndirectionExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeIndirectionExpr),
	},
	AstTypeInsert: {
		Copy: func(dest, from e.Ptr) { *(*Insert)(dest) = *(*Insert)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Insert)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "With", Offset: unsafe.Offsetof(Insert{}.With), Target: e.TypeId(AstTypeWithPtr)},
			{Name: "Table", Offset: unsafe.Offsetof(Insert{}.Table), Target: e.TypeId(AstTypeTableExpr)},
			{Name: "Rows", Offset: unsafe.Offsetof(Insert{}.Rows), Target: e.TypeId(AstTypeSelectPtr)},
			{Name: "OnConflict", Offset: unsafe.Offsetof(Insert{}.OnConflict), Target: e.TypeId(AstTypeOnConflictPtr)},
			{Name: "Returning", Offset: unsafe.Offsetof(Insert{}.Returning), Target: e.TypeId(AstTypeReturningClause)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Insert{}) },
		SizeOf:    unsafe.Sizeof(Insert{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeInsert),
	},
	AstTypeInterleaveDef: {
		Copy: func(dest, from e.Ptr) { *(*InterleaveDef)(dest) = *(*InterleaveDef)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*InterleaveDef)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Parent", Offset: unsafe.Offsetof(InterleaveDef{}.Parent), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&InterleaveDef{}) },
		SizeOf:    unsafe.Sizeof(InterleaveDef{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeInterleaveDef),
	},
	AstTypeIsOfTypeExpr: {
		Copy: func(dest, from e.Ptr) { *(*IsOfTypeExpr)(dest) = *(*IsOfTypeExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*IsOfTypeExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(IsOfTypeExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&IsOfTypeExpr{}) },
		SizeOf:    unsafe.Sizeof(IsOfTypeExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeIsOfTypeExpr),
	},
	AstTypeKVOption: {
		Copy: func(dest, from e.Ptr) { *(*KVOption)(dest) = *(*KVOption)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*KVOption)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Value", Offset: unsafe.Offsetof(KVOption{}.Value), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&KVOption{}) },
		SizeOf:    unsafe.Sizeof(KVOption{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeKVOption),
	},
	AstTypeLimit: {
		Copy: func(dest, from e.Ptr) { *(*Limit)(dest) = *(*Limit)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Limit)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Offset", Offset: unsafe.Offsetof(Limit{}.Offset), Target: e.TypeId(AstTypeExpr)},
			{Name: "Count", Offset: unsafe.Offsetof(Limit{}.Count), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Limit{}) },
		SizeOf:    unsafe.Sizeof(Limit{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeLimit),
	},
	AstTypeListPartition: {
		Copy: func(dest, from e.Ptr) { *(*ListPartition)(dest) = *(*ListPartition)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ListPartition)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Exprs", Offset: unsafe.Offsetof(ListPartition{}.Exprs), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "Subpartition", Offset: unsafe.Offsetof(ListPartition{}.Subpartition), Target: e.TypeId(AstTypePartitionByPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ListPartition{}) },
		SizeOf:    unsafe.Sizeof(ListPartition{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeListPartition),
	},
	AstTypeNotExpr: {
		Copy: func(dest, from e.Ptr) { *(*NotExpr)(dest) = *(*NotExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*NotExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(NotExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&NotExpr{}) },
		SizeOf:    unsafe.Sizeof(NotExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeNotExpr),
	},
	AstTypeNullIfExpr: {
		Copy: func(dest, from e.Ptr) { *(*NullIfExpr)(dest) = *(*NullIfExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*NullIfExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr1", Offset: unsafe.Offsetof(NullIfExpr{}.Expr1), Target: e.TypeId(AstTypeExpr)},
			{Name: "Expr2", Offset: unsafe.Offsetof(NullIfExpr{}.Expr2), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&NullIfExpr{}) },
		SizeOf:    unsafe.Sizeof(NullIfExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeNullIfExpr),
	},
	AstTypeNumVal: {
		Copy: func(dest, from e.Ptr) { *(*NumVal)(dest) = *(*NumVal)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*NumVal)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&NumVal{}) },
		SizeOf:    unsafe.Sizeof(NumVal{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeNumVal),
	},
	AstTypeOnConflict: {
		Copy: func(dest, from e.Ptr) { *(*OnConflict)(dest) = *(*OnConflict)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*OnConflict)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Exprs", Offset: unsafe.Offsetof(OnConflict{}.Exprs), Target: e.TypeId(AstTypeUpdateExprPtrSlice)},
			{Name: "Where", Offset: unsafe.Offsetof(OnConflict{}.Where), Target: e.TypeId(AstTypeWherePtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&OnConflict{}) },
		SizeOf:    unsafe.Sizeof(OnConflict{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeOnConflict),
	},
	AstTypeOrExpr: {
		Copy: func(dest, from e.Ptr) { *(*OrExpr)(dest) = *(*OrExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*OrExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Left", Offset: unsafe.Offsetof(OrExpr{}.Left), Target: e.TypeId(AstTypeExpr)},
			{Name: "Right", Offset: unsafe.Offsetof(OrExpr{}.Right), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&OrExpr{}) },
		SizeOf:    unsafe.Sizeof(OrExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeOrExpr),
	},
	AstTypeOrder: {
		Copy: func(dest, from e.Ptr) { *(*Order)(dest) = *(*Order)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Order)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(Order{}.Expr), Target: e.TypeId(AstTypeExpr)},
			{Name: "Table", Offset: unsafe.Offsetof(Order{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Order{}) },
		SizeOf:    unsafe.Sizeof(Order{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeOrder),
	},
	AstTypeParenExpr: {
		Copy: func(dest, from e.Ptr) { *(*ParenExpr)(dest) = *(*ParenExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ParenExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(ParenExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ParenExpr{}) },
		SizeOf:    unsafe.Sizeof(ParenExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeParenExpr),
	},
	AstTypeParenSelect: {
		Copy: func(dest, from e.Ptr) { *(*ParenSelect)(dest) = *(*ParenSelect)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ParenSelect)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Select", Offset: unsafe.Offsetof(ParenSelect{}.Select), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ParenSelect{}) },
		SizeOf:    unsafe.Sizeof(ParenSelect{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeParenSelect),
	},
	AstTypePartitionBy: {
		Copy: func(dest, from e.Ptr) { *(*PartitionBy)(dest) = *(*PartitionBy)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*PartitionBy)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "List", Offset: unsafe.Offsetof(PartitionBy{}.List), Target: e.TypeId(AstTypeListPartitionSlice)},
			{Name: "Range", Offset: unsafe.Offsetof(PartitionBy{}.Range), Target: e.TypeId(AstTypeRangePartitionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&PartitionBy{}) },
		SizeOf:    unsafe.Sizeof(PartitionBy{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypePartitionBy),
	},
	AstTypePartitionMaxVal: {
		Copy: func(dest, from e.Ptr) { *(*PartitionMaxVal)(dest) = *(*PartitionMaxVal)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*PartitionMaxVal)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&PartitionMaxVal{}) },
		SizeOf:    unsafe.Sizeof(PartitionMaxVal{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypePartitionMaxVal),
	},
	AstTypePartitionMinVal: {
		Copy: func(dest, from e.Ptr) { *(*PartitionMinVal)(dest) = *(*PartitionMinVal)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*PartitionMinVal)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&PartitionMinVal{}) },
		SizeOf:    unsafe.Sizeof(PartitionMinVal{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypePartitionMinVal),
	},
	AstTypePlaceholder: {
		Copy: func(dest, from e.Ptr) { *(*Placeholder)(dest) = *(*Placeholder)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Placeholder)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&Placeholder{}) },
		SizeOf:    unsafe.Sizeof(Placeholder{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypePlaceholder),
	},
	AstTypePrepare: {
		Copy: func(dest, from e.Ptr) { *(*Prepare)(dest) = *(*Prepare)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Prepare)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Statement", Offset: unsafe.Offsetof(Prepare{}.Statement), Target: e.TypeId(AstTypeStatement)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Prepare{}) },
		SizeOf:    unsafe.Sizeof(Prepare{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypePrepare),
	},
	AstTypeRangeCond: {
		Copy: func(dest, from e.Ptr) { *(*RangeCond)(dest) = *(*RangeCond)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RangeCond)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Left", Offset: unsafe.Offsetof(RangeCond{}.Left), Target: e.TypeId(AstTypeExpr)},
			{Name: "From", Offset: unsafe.Offsetof(RangeCond{}.From), Target: e.TypeId(AstTypeExpr)},
			{Name: "To", Offset: unsafe.Offsetof(RangeCond{}.To), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&RangeCond{}) },
		SizeOf:    unsafe.Sizeof(RangeCond{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRangeCond),
	},
	AstTypeRangePartition: {
		Copy: func(dest, from e.Ptr) { *(*RangePartition)(dest) = *(*RangePartition)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RangePartition)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "From", Offset: unsafe.Offsetof(RangePartition{}.From), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "To", Offset: unsafe.Offsetof(RangePartition{}.To), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "Subpartition", Offset: unsafe.Offsetof(RangePartition{}.Subpartition), Target: e.TypeId(AstTypePartitionByPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&RangePartition{}) },
		SizeOf:    unsafe.Sizeof(RangePartition{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRangePartition),
	},
	AstTypeReleaseSavepoint: {
		Copy: func(dest, from e.Ptr) { *(*ReleaseSavepoint)(dest) = *(*ReleaseSavepoint)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ReleaseSavepoint)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ReleaseSavepoint{}) },
		SizeOf:    unsafe.Sizeof(ReleaseSavepoint{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeReleaseSavepoint),
	},
	AstTypeRelocate: {
		Copy: func(dest, from e.Ptr) { *(*Relocate)(dest) = *(*Relocate)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Relocate)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(Relocate{}.Table), Target: e.TypeId(AstTypeTableNamePtr)},
			{Name: "Index", Offset: unsafe.Offsetof(Relocate{}.Index), Target: e.TypeId(AstTypeTableNameWithIndexPtr)},
			{Name: "Rows", Offset: unsafe.Offsetof(Relocate{}.Rows), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Relocate{}) },
		SizeOf:    unsafe.Sizeof(Relocate{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRelocate),
	},
	AstTypeRenameColumn: {
		Copy: func(dest, from e.Ptr) { *(*RenameColumn)(dest) = *(*RenameColumn)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RenameColumn)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(RenameColumn{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&RenameColumn{}) },
		SizeOf:    unsafe.Sizeof(RenameColumn{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRenameColumn),
	},
	AstTypeRenameDatabase: {
		Copy: func(dest, from e.Ptr) { *(*RenameDatabase)(dest) = *(*RenameDatabase)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RenameDatabase)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&RenameDatabase{}) },
		SizeOf:    unsafe.Sizeof(RenameDatabase{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRenameDatabase),
	},
	AstTypeRenameIndex: {
		Copy: func(dest, from e.Ptr) { *(*RenameIndex)(dest) = *(*RenameIndex)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RenameIndex)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Index", Offset: unsafe.Offsetof(RenameIndex{}.Index), Target: e.TypeId(AstTypeTableNameWithIndexPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&RenameIndex{}) },
		SizeOf:    unsafe.Sizeof(RenameIndex{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRenameIndex),
	},
	AstTypeRenameTable: {
		Copy: func(dest, from e.Ptr) { *(*RenameTable)(dest) = *(*RenameTable)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RenameTable)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(RenameTable{}.Name), Target: e.TypeId(AstTypeTableName)},
			{Name: "NewName", Offset: unsafe.Offsetof(RenameTable{}.NewName), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&RenameTable{}) },
		SizeOf:    unsafe.Sizeof(RenameTable{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRenameTable),
	},
	AstTypeResolvableFunctionReference: {
		Copy: func(dest, from e.Ptr) { *(*ResolvableFunctionReference)(dest) = *(*ResolvableFunctionReference)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ResolvableFunctionReference)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "FunctionReference", Offset: unsafe.Offsetof(ResolvableFunctionReference{}.FunctionReference), Target: e.TypeId(AstTypeFunctionReference)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ResolvableFunctionReference{}) },
		SizeOf:    unsafe.Sizeof(ResolvableFunctionReference{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeResolvableFunctionReference),
	},
	AstTypeRestore: {
		Copy: func(dest, from e.Ptr) { *(*Restore)(dest) = *(*Restore)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Restore)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Targets", Offset: unsafe.Offsetof(Restore{}.Targets), Target: e.TypeId(AstTypeTargetList)},
			{Name: "From", Offset: unsafe.Offsetof(Restore{}.From), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "AsOf", Offset: unsafe.Offsetof(Restore{}.AsOf), Target: e.TypeId(AstTypeAsOfClause)},
			{Name: "Options", Offset: unsafe.Offsetof(Restore{}.Options), Target: e.TypeId(AstTypeKVOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Restore{}) },
		SizeOf:    unsafe.Sizeof(Restore{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRestore),
	},
	AstTypeRevoke: {
		Copy: func(dest, from e.Ptr) { *(*Revoke)(dest) = *(*Revoke)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Revoke)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Targets", Offset: unsafe.Offsetof(Revoke{}.Targets), Target: e.TypeId(AstTypeTargetList)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Revoke{}) },
		SizeOf:    unsafe.Sizeof(Revoke{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRevoke),
	},
	AstTypeRevokeRole: {
		Copy: func(dest, from e.Ptr) { *(*RevokeRole)(dest) = *(*RevokeRole)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RevokeRole)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&RevokeRole{}) },
		SizeOf:    unsafe.Sizeof(RevokeRole{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRevokeRole),
	},
	AstTypeRollbackToSavepoint: {
		Copy: func(dest, from e.Ptr) { *(*RollbackToSavepoint)(dest) = *(*RollbackToSavepoint)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RollbackToSavepoint)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&RollbackToSavepoint{}) },
		SizeOf:    unsafe.Sizeof(RollbackToSavepoint{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRollbackToSavepoint),
	},
	AstTypeRollbackTransaction: {
		Copy: func(dest, from e.Ptr) { *(*RollbackTransaction)(dest) = *(*RollbackTransaction)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*RollbackTransaction)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&RollbackTransaction{}) },
		SizeOf:    unsafe.Sizeof(RollbackTransaction{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeRollbackTransaction),
	},
	AstTypeSavepoint: {
		Copy: func(dest, from e.Ptr) { *(*Savepoint)(dest) = *(*Savepoint)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Savepoint)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&Savepoint{}) },
		SizeOf:    unsafe.Sizeof(Savepoint{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSavepoint),
	},
	AstTypeScatter: {
		Copy: func(dest, from e.Ptr) { *(*Scatter)(dest) = *(*Scatter)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Scatter)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(Scatter{}.Table), Target: e.TypeId(AstTypeTableNamePtr)},
			{Name: "Index", Offset: unsafe.Offsetof(Scatter{}.Index), Target: e.TypeId(AstTypeTableNameWithIndexPtr)},
			{Name: "From", Offset: unsafe.Offsetof(Scatter{}.From), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "To", Offset: unsafe.Offsetof(Scatter{}.To), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Scatter{}) },
		SizeOf:    unsafe.Sizeof(Scatter{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeScatter),
	},
	AstTypeScrub: {
		Copy: func(dest, from e.Ptr) { *(*Scrub)(dest) = *(*Scrub)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Scrub)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Options", Offset: unsafe.Offsetof(Scrub{}.Options), Target: e.TypeId(AstTypeScrubOptionSlice)},
			{Name: "Table", Offset: unsafe.Offsetof(Scrub{}.Table), Target: e.TypeId(AstTypeTableName)},
			{Name: "AsOf", Offset: unsafe.Offsetof(Scrub{}.AsOf), Target: e.TypeId(AstTypeAsOfClause)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Scrub{}) },
		SizeOf:    unsafe.Sizeof(Scrub{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeScrub),
	},
	AstTypeSelect: {
		Copy: func(dest, from e.Ptr) { *(*Select)(dest) = *(*Select)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Select)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "With", Offset: unsafe.Offsetof(Select{}.With), Target: e.TypeId(AstTypeWithPtr)},
			{Name: "Select", Offset: unsafe.Offsetof(Select{}.Select), Target: e.TypeId(AstTypeSelectStatement)},
			{Name: "OrderBy", Offset: unsafe.Offsetof(Select{}.OrderBy), Target: e.TypeId(AstTypeOrderPtrSlice)},
			{Name: "Limit", Offset: unsafe.Offsetof(Select{}.Limit), Target: e.TypeId(AstTypeLimitPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Select{}) },
		SizeOf:    unsafe.Sizeof(Select{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSelect),
	},
	AstTypeSelectClause: {
		Copy: func(dest, from e.Ptr) { *(*SelectClause)(dest) = *(*SelectClause)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SelectClause)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "DistinctOn", Offset: unsafe.Offsetof(SelectClause{}.DistinctOn), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "Exprs", Offset: unsafe.Offsetof(SelectClause{}.Exprs), Target: e.TypeId(AstTypeSelectExprSlice)},
			{Name: "From", Offset: unsafe.Offsetof(SelectClause{}.From), Target: e.TypeId(AstTypeFromPtr)},
			{Name: "Where", Offset: unsafe.Offsetof(SelectClause{}.Where), Target: e.TypeId(AstTypeWherePtr)},
			{Name: "GroupBy", Offset: unsafe.Offsetof(SelectClause{}.GroupBy), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "Having", Offset: unsafe.Offsetof(SelectClause{}.Having), Target: e.TypeId(AstTypeWherePtr)},
			{Name: "Window", Offset: unsafe.Offsetof(SelectClause{}.Window), Target: e.TypeId(AstTypeWindowDefPtrSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SelectClause{}) },
		SizeOf:    unsafe.Sizeof(SelectClause{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSelectClause),
	},
	AstTypeSelectExpr: {
		Copy: func(dest, from e.Ptr) { *(*SelectExpr)(dest) = *(*SelectExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SelectExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(SelectExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SelectExpr{}) },
		SizeOf:    unsafe.Sizeof(SelectExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSelectExpr),
	},
	AstTypeSequenceOption: {
		Copy: func(dest, from e.Ptr) { *(*SequenceOption)(dest) = *(*SequenceOption)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SequenceOption)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&SequenceOption{}) },
		SizeOf:    unsafe.Sizeof(SequenceOption{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSequenceOption),
	},
	AstTypeSetClusterSetting: {
		Copy: func(dest, from e.Ptr) { *(*SetClusterSetting)(dest) = *(*SetClusterSetting)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SetClusterSetting)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Value", Offset: unsafe.Offsetof(SetClusterSetting{}.Value), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SetClusterSetting{}) },
		SizeOf:    unsafe.Sizeof(SetClusterSetting{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSetClusterSetting),
	},
	AstTypeSetSessionCharacteristics: {
		Copy: func(dest, from e.Ptr) { *(*SetSessionCharacteristics)(dest) = *(*SetSessionCharacteristics)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SetSessionCharacteristics)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Modes", Offset: unsafe.Offsetof(SetSessionCharacteristics{}.Modes), Target: e.TypeId(AstTypeTransactionModes)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SetSessionCharacteristics{}) },
		SizeOf:    unsafe.Sizeof(SetSessionCharacteristics{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSetSessionCharacteristics),
	},
	AstTypeSetTracing: {
		Copy: func(dest, from e.Ptr) { *(*SetTracing)(dest) = *(*SetTracing)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SetTracing)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Values", Offset: unsafe.Offsetof(SetTracing{}.Values), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SetTracing{}) },
		SizeOf:    unsafe.Sizeof(SetTracing{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSetTracing),
	},
	AstTypeSetTransaction: {
		Copy: func(dest, from e.Ptr) { *(*SetTransaction)(dest) = *(*SetTransaction)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SetTransaction)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Modes", Offset: unsafe.Offsetof(SetTransaction{}.Modes), Target: e.TypeId(AstTypeTransactionModes)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SetTransaction{}) },
		SizeOf:    unsafe.Sizeof(SetTransaction{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSetTransaction),
	},
	AstTypeSetVar: {
		Copy: func(dest, from e.Ptr) { *(*SetVar)(dest) = *(*SetVar)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SetVar)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Values", Offset: unsafe.Offsetof(SetVar{}.Values), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SetVar{}) },
		SizeOf:    unsafe.Sizeof(SetVar{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSetVar),
	},
	AstTypeSetZoneConfig: {
		Copy: func(dest, from e.Ptr) { *(*SetZoneConfig)(dest) = *(*SetZoneConfig)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*SetZoneConfig)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "ZoneSpecifier", Offset: unsafe.Offsetof(SetZoneConfig{}.ZoneSpecifier), Target: e.TypeId(AstTypeZoneSpecifier)},
			{Name: "YAMLConfig", Offset: unsafe.Offsetof(SetZoneConfig{}.YAMLConfig), Target: e.TypeId(AstTypeExpr)},
			{Name: "Options", Offset: unsafe.Offsetof(SetZoneConfig{}.Options), Target: e.TypeId(AstTypeKVOptionSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&SetZoneConfig{}) },
		SizeOf:    unsafe.Sizeof(SetZoneConfig{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSetZoneConfig),
	},
	AstTypeShowBackup: {
		Copy: func(dest, from e.Ptr) { *(*ShowBackup)(dest) = *(*ShowBackup)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowBackup)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Path", Offset: unsafe.Offsetof(ShowBackup{}.Path), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowBackup{}) },
		SizeOf:    unsafe.Sizeof(ShowBackup{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowBackup),
	},
	AstTypeShowClusterSetting: {
		Copy: func(dest, from e.Ptr) { *(*ShowClusterSetting)(dest) = *(*ShowClusterSetting)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowClusterSetting)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowClusterSetting{}) },
		SizeOf:    unsafe.Sizeof(ShowClusterSetting{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowClusterSetting),
	},
	AstTypeShowColumns: {
		Copy: func(dest, from e.Ptr) { *(*ShowColumns)(dest) = *(*ShowColumns)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowColumns)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(ShowColumns{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowColumns{}) },
		SizeOf:    unsafe.Sizeof(ShowColumns{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowColumns),
	},
	AstTypeShowConstraints: {
		Copy: func(dest, from e.Ptr) { *(*ShowConstraints)(dest) = *(*ShowConstraints)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowConstraints)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(ShowConstraints{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowConstraints{}) },
		SizeOf:    unsafe.Sizeof(ShowConstraints{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowConstraints),
	},
	AstTypeShowCreate: {
		Copy: func(dest, from e.Ptr) { *(*ShowCreate)(dest) = *(*ShowCreate)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowCreate)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Name", Offset: unsafe.Offsetof(ShowCreate{}.Name), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowCreate{}) },
		SizeOf:    unsafe.Sizeof(ShowCreate{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowCreate),
	},
	AstTypeShowDatabases: {
		Copy: func(dest, from e.Ptr) { *(*ShowDatabases)(dest) = *(*ShowDatabases)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowDatabases)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowDatabases{}) },
		SizeOf:    unsafe.Sizeof(ShowDatabases{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowDatabases),
	},
	AstTypeShowFingerprints: {
		Copy: func(dest, from e.Ptr) { *(*ShowFingerprints)(dest) = *(*ShowFingerprints)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowFingerprints)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(ShowFingerprints{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowFingerprints{}) },
		SizeOf:    unsafe.Sizeof(ShowFingerprints{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowFingerprints),
	},
	AstTypeShowGrants: {
		Copy: func(dest, from e.Ptr) { *(*ShowGrants)(dest) = *(*ShowGrants)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowGrants)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Targets", Offset: unsafe.Offsetof(ShowGrants{}.Targets), Target: e.TypeId(AstTypeTargetListPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowGrants{}) },
		SizeOf:    unsafe.Sizeof(ShowGrants{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowGrants),
	},
	AstTypeShowHistogram: {
		Copy: func(dest, from e.Ptr) { *(*ShowHistogram)(dest) = *(*ShowHistogram)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowHistogram)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowHistogram{}) },
		SizeOf:    unsafe.Sizeof(ShowHistogram{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowHistogram),
	},
	AstTypeShowIndex: {
		Copy: func(dest, from e.Ptr) { *(*ShowIndex)(dest) = *(*ShowIndex)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowIndex)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(ShowIndex{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowIndex{}) },
		SizeOf:    unsafe.Sizeof(ShowIndex{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowIndex),
	},
	AstTypeShowJobs: {
		Copy: func(dest, from e.Ptr) { *(*ShowJobs)(dest) = *(*ShowJobs)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowJobs)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowJobs{}) },
		SizeOf:    unsafe.Sizeof(ShowJobs{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowJobs),
	},
	AstTypeShowQueries: {
		Copy: func(dest, from e.Ptr) { *(*ShowQueries)(dest) = *(*ShowQueries)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowQueries)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowQueries{}) },
		SizeOf:    unsafe.Sizeof(ShowQueries{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowQueries),
	},
	AstTypeShowRanges: {
		Copy: func(dest, from e.Ptr) { *(*ShowRanges)(dest) = *(*ShowRanges)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowRanges)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(ShowRanges{}.Table), Target: e.TypeId(AstTypeTableNamePtr)},
			{Name: "Index", Offset: unsafe.Offsetof(ShowRanges{}.Index), Target: e.TypeId(AstTypeTableNameWithIndexPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowRanges{}) },
		SizeOf:    unsafe.Sizeof(ShowRanges{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowRanges),
	},
	AstTypeShowRoleGrants: {
		Copy: func(dest, from e.Ptr) { *(*ShowRoleGrants)(dest) = *(*ShowRoleGrants)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowRoleGrants)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowRoleGrants{}) },
		SizeOf:    unsafe.Sizeof(ShowRoleGrants{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowRoleGrants),
	},
	AstTypeShowRoles: {
		Copy: func(dest, from e.Ptr) { *(*ShowRoles)(dest) = *(*ShowRoles)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowRoles)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowRoles{}) },
		SizeOf:    unsafe.Sizeof(ShowRoles{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowRoles),
	},
	AstTypeShowSchemas: {
		Copy: func(dest, from e.Ptr) { *(*ShowSchemas)(dest) = *(*ShowSchemas)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowSchemas)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowSchemas{}) },
		SizeOf:    unsafe.Sizeof(ShowSchemas{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowSchemas),
	},
	AstTypeShowSessions: {
		Copy: func(dest, from e.Ptr) { *(*ShowSessions)(dest) = *(*ShowSessions)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowSessions)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowSessions{}) },
		SizeOf:    unsafe.Sizeof(ShowSessions{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowSessions),
	},
	AstTypeShowSyntax: {
		Copy: func(dest, from e.Ptr) { *(*ShowSyntax)(dest) = *(*ShowSyntax)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowSyntax)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowSyntax{}) },
		SizeOf:    unsafe.Sizeof(ShowSyntax{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowSyntax),
	},
	AstTypeShowTableStats: {
		Copy: func(dest, from e.Ptr) { *(*ShowTableStats)(dest) = *(*ShowTableStats)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowTableStats)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(ShowTableStats{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowTableStats{}) },
		SizeOf:    unsafe.Sizeof(ShowTableStats{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowTableStats),
	},
	AstTypeShowTables: {
		Copy: func(dest, from e.Ptr) { *(*ShowTables)(dest) = *(*ShowTables)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowTables)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "TableNamePrefix", Offset: unsafe.Offsetof(ShowTables{}.TableNamePrefix), Target: e.TypeId(AstTypeTableNamePrefix)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowTables{}) },
		SizeOf:    unsafe.Sizeof(ShowTables{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowTables),
	},
	AstTypeShowTraceForSession: {
		Copy: func(dest, from e.Ptr) { *(*ShowTraceForSession)(dest) = *(*ShowTraceForSession)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowTraceForSession)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowTraceForSession{}) },
		SizeOf:    unsafe.Sizeof(ShowTraceForSession{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowTraceForSession),
	},
	AstTypeShowTransactionStatus: {
		Copy: func(dest, from e.Ptr) { *(*ShowTransactionStatus)(dest) = *(*ShowTransactionStatus)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowTransactionStatus)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowTransactionStatus{}) },
		SizeOf:    unsafe.Sizeof(ShowTransactionStatus{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowTransactionStatus),
	},
	AstTypeShowUsers: {
		Copy: func(dest, from e.Ptr) { *(*ShowUsers)(dest) = *(*ShowUsers)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowUsers)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowUsers{}) },
		SizeOf:    unsafe.Sizeof(ShowUsers{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowUsers),
	},
	AstTypeShowVar: {
		Copy: func(dest, from e.Ptr) { *(*ShowVar)(dest) = *(*ShowVar)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowVar)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowVar{}) },
		SizeOf:    unsafe.Sizeof(ShowVar{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowVar),
	},
	AstTypeShowZoneConfig: {
		Copy: func(dest, from e.Ptr) { *(*ShowZoneConfig)(dest) = *(*ShowZoneConfig)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ShowZoneConfig)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "ZoneSpecifier", Offset: unsafe.Offsetof(ShowZoneConfig{}.ZoneSpecifier), Target: e.TypeId(AstTypeZoneSpecifier)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ShowZoneConfig{}) },
		SizeOf:    unsafe.Sizeof(ShowZoneConfig{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeShowZoneConfig),
	},
	AstTypeSplit: {
		Copy: func(dest, from e.Ptr) { *(*Split)(dest) = *(*Split)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Split)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(Split{}.Table), Target: e.TypeId(AstTypeTableNamePtr)},
			{Name: "Index", Offset: unsafe.Offsetof(Split{}.Index), Target: e.TypeId(AstTypeTableNameWithIndexPtr)},
			{Name: "Rows", Offset: unsafe.Offsetof(Split{}.Rows), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Split{}) },
		SizeOf:    unsafe.Sizeof(Split{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSplit),
	},
	AstTypeStrVal: {
		Copy: func(dest, from e.Ptr) { *(*StrVal)(dest) = *(*StrVal)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*StrVal)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&StrVal{}) },
		SizeOf:    unsafe.Sizeof(StrVal{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeStrVal),
	},
	AstTypeSubquery: {
		Copy: func(dest, from e.Ptr) { *(*Subquery)(dest) = *(*Subquery)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Subquery)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Select", Offset: unsafe.Offsetof(Subquery{}.Select), Target: e.TypeId(AstTypeSelectStatement)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Subquery{}) },
		SizeOf:    unsafe.Sizeof(Subquery{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeSubquery),
	},
	AstTypeTableName: {
		Copy: func(dest, from e.Ptr) { *(*TableName)(dest) = *(*TableName)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*TableName)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&TableName{}) },
		SizeOf:    unsafe.Sizeof(TableName{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTableName),
	},
	AstTypeTableNamePrefix: {
		Copy: func(dest, from e.Ptr) { *(*TableNamePrefix)(dest) = *(*TableNamePrefix)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*TableNamePrefix)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&TableNamePrefix{}) },
		SizeOf:    unsafe.Sizeof(TableNamePrefix{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTableNamePrefix),
	},
	AstTypeTableNameWithIndex: {
		Copy: func(dest, from e.Ptr) { *(*TableNameWithIndex)(dest) = *(*TableNameWithIndex)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*TableNameWithIndex)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Table", Offset: unsafe.Offsetof(TableNameWithIndex{}.Table), Target: e.TypeId(AstTypeTableName)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&TableNameWithIndex{}) },
		SizeOf:    unsafe.Sizeof(TableNameWithIndex{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTableNameWithIndex),
	},
	AstTypeTargetList: {
		Copy: func(dest, from e.Ptr) { *(*TargetList)(dest) = *(*TargetList)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*TargetList)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Tables", Offset: unsafe.Offsetof(TargetList{}.Tables), Target: e.TypeId(AstTypeTablePatternSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&TargetList{}) },
		SizeOf:    unsafe.Sizeof(TargetList{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTargetList),
	},
	AstTypeTransactionModes: {
		Copy: func(dest, from e.Ptr) { *(*TransactionModes)(dest) = *(*TransactionModes)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*TransactionModes)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&TransactionModes{}) },
		SizeOf:    unsafe.Sizeof(TransactionModes{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTransactionModes),
	},
	AstTypeTruncate: {
		Copy: func(dest, from e.Ptr) { *(*Truncate)(dest) = *(*Truncate)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Truncate)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Tables", Offset: unsafe.Offsetof(Truncate{}.Tables), Target: e.TypeId(AstTypeTableNameSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Truncate{}) },
		SizeOf:    unsafe.Sizeof(Truncate{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTruncate),
	},
	AstTypeTuple: {
		Copy: func(dest, from e.Ptr) { *(*Tuple)(dest) = *(*Tuple)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Tuple)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Exprs", Offset: unsafe.Offsetof(Tuple{}.Exprs), Target: e.TypeId(AstTypeExprSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Tuple{}) },
		SizeOf:    unsafe.Sizeof(Tuple{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTuple),
	},
	AstTypeTupleStar: {
		Copy: func(dest, from e.Ptr) { *(*TupleStar)(dest) = *(*TupleStar)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*TupleStar)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(TupleStar{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&TupleStar{}) },
		SizeOf:    unsafe.Sizeof(TupleStar{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeTupleStar),
	},
	AstTypeUnaryExpr: {
		Copy: func(dest, from e.Ptr) { *(*UnaryExpr)(dest) = *(*UnaryExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*UnaryExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(UnaryExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&UnaryExpr{}) },
		SizeOf:    unsafe.Sizeof(UnaryExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeUnaryExpr),
	},
	AstTypeUnionClause: {
		Copy: func(dest, from e.Ptr) { *(*UnionClause)(dest) = *(*UnionClause)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*UnionClause)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Left", Offset: unsafe.Offsetof(UnionClause{}.Left), Target: e.TypeId(AstTypeSelectPtr)},
			{Name: "Right", Offset: unsafe.Offsetof(UnionClause{}.Right), Target: e.TypeId(AstTypeSelectPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&UnionClause{}) },
		SizeOf:    unsafe.Sizeof(UnionClause{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeUnionClause),
	},
	AstTypeUnqualifiedStar: {
		Copy: func(dest, from e.Ptr) { *(*UnqualifiedStar)(dest) = *(*UnqualifiedStar)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*UnqualifiedStar)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&UnqualifiedStar{}) },
		SizeOf:    unsafe.Sizeof(UnqualifiedStar{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeUnqualifiedStar),
	},
	AstTypeUnresolvedName: {
		Copy: func(dest, from e.Ptr) { *(*UnresolvedName)(dest) = *(*UnresolvedName)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*UnresolvedName)(x)).impl
		},
		Fields:    []e.FieldInfo{},
		NewStruct: func() e.Ptr { return e.Ptr(&UnresolvedName{}) },
		SizeOf:    unsafe.Sizeof(UnresolvedName{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeUnresolvedName),
	},
	AstTypeUpdate: {
		Copy: func(dest, from e.Ptr) { *(*Update)(dest) = *(*Update)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Update)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "With", Offset: unsafe.Offsetof(Update{}.With), Target: e.TypeId(AstTypeWithPtr)},
			{Name: "Table", Offset: unsafe.Offsetof(Update{}.Table), Target: e.TypeId(AstTypeTableExpr)},
			{Name: "Exprs", Offset: unsafe.Offsetof(Update{}.Exprs), Target: e.TypeId(AstTypeUpdateExprPtrSlice)},
			{Name: "Where", Offset: unsafe.Offsetof(Update{}.Where), Target: e.TypeId(AstTypeWherePtr)},
			{Name: "OrderBy", Offset: unsafe.Offsetof(Update{}.OrderBy), Target: e.TypeId(AstTypeOrderPtrSlice)},
			{Name: "Limit", Offset: unsafe.Offsetof(Update{}.Limit), Target: e.TypeId(AstTypeLimitPtr)},
			{Name: "Returning", Offset: unsafe.Offsetof(Update{}.Returning), Target: e.TypeId(AstTypeReturningClause)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Update{}) },
		SizeOf:    unsafe.Sizeof(Update{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeUpdate),
	},
	AstTypeUpdateExpr: {
		Copy: func(dest, from e.Ptr) { *(*UpdateExpr)(dest) = *(*UpdateExpr)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*UpdateExpr)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(UpdateExpr{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&UpdateExpr{}) },
		SizeOf:    unsafe.Sizeof(UpdateExpr{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeUpdateExpr),
	},
	AstTypeValuesClause: {
		Copy: func(dest, from e.Ptr) { *(*ValuesClause)(dest) = *(*ValuesClause)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ValuesClause)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Rows", Offset: unsafe.Offsetof(ValuesClause{}.Rows), Target: e.TypeId(AstTypeExprSliceSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ValuesClause{}) },
		SizeOf:    unsafe.Sizeof(ValuesClause{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeValuesClause),
	},
	AstTypeValuesClauseWithNames: {
		Copy: func(dest, from e.Ptr) { *(*ValuesClauseWithNames)(dest) = *(*ValuesClauseWithNames)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ValuesClauseWithNames)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "ValuesClause", Offset: unsafe.Offsetof(ValuesClauseWithNames{}.ValuesClause), Target: e.TypeId(AstTypeValuesClause)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ValuesClauseWithNames{}) },
		SizeOf:    unsafe.Sizeof(ValuesClauseWithNames{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeValuesClauseWithNames),
	},
	AstTypeWhen: {
		Copy: func(dest, from e.Ptr) { *(*When)(dest) = *(*When)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*When)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Cond", Offset: unsafe.Offsetof(When{}.Cond), Target: e.TypeId(AstTypeExpr)},
			{Name: "Val", Offset: unsafe.Offsetof(When{}.Val), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&When{}) },
		SizeOf:    unsafe.Sizeof(When{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeWhen),
	},
	AstTypeWhere: {
		Copy: func(dest, from e.Ptr) { *(*Where)(dest) = *(*Where)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*Where)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Expr", Offset: unsafe.Offsetof(Where{}.Expr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&Where{}) },
		SizeOf:    unsafe.Sizeof(Where{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeWhere),
	},
	AstTypeWindowDef: {
		Copy: func(dest, from e.Ptr) { *(*WindowDef)(dest) = *(*WindowDef)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*WindowDef)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Partitions", Offset: unsafe.Offsetof(WindowDef{}.Partitions), Target: e.TypeId(AstTypeExprSlice)},
			{Name: "OrderBy", Offset: unsafe.Offsetof(WindowDef{}.OrderBy), Target: e.TypeId(AstTypeOrderPtrSlice)},
			{Name: "Frame", Offset: unsafe.Offsetof(WindowDef{}.Frame), Target: e.TypeId(AstTypeWindowFramePtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&WindowDef{}) },
		SizeOf:    unsafe.Sizeof(WindowDef{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeWindowDef),
	},
	AstTypeWindowFrame: {
		Copy: func(dest, from e.Ptr) { *(*WindowFrame)(dest) = *(*WindowFrame)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*WindowFrame)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "Bounds", Offset: unsafe.Offsetof(WindowFrame{}.Bounds), Target: e.TypeId(AstTypeWindowFrameBounds)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&WindowFrame{}) },
		SizeOf:    unsafe.Sizeof(WindowFrame{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeWindowFrame),
	},
	AstTypeWindowFrameBound: {
		Copy: func(dest, from e.Ptr) { *(*WindowFrameBound)(dest) = *(*WindowFrameBound)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*WindowFrameBound)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "OffsetExpr", Offset: unsafe.Offsetof(WindowFrameBound{}.OffsetExpr), Target: e.TypeId(AstTypeExpr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&WindowFrameBound{}) },
		SizeOf:    unsafe.Sizeof(WindowFrameBound{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeWindowFrameBound),
	},
	AstTypeWindowFrameBounds: {
		Copy: func(dest, from e.Ptr) { *(*WindowFrameBounds)(dest) = *(*WindowFrameBounds)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*WindowFrameBounds)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "StartBound", Offset: unsafe.Offsetof(WindowFrameBounds{}.StartBound), Target: e.TypeId(AstTypeWindowFrameBoundPtr)},
			{Name: "EndBound", Offset: unsafe.Offsetof(WindowFrameBounds{}.EndBound), Target: e.TypeId(AstTypeWindowFrameBoundPtr)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&WindowFrameBounds{}) },
		SizeOf:    unsafe.Sizeof(WindowFrameBounds{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeWindowFrameBounds),
	},
	AstTypeWith: {
		Copy: func(dest, from e.Ptr) { *(*With)(dest) = *(*With)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*With)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "CTEList", Offset: unsafe.Offsetof(With{}.CTEList), Target: e.TypeId(AstTypeCTEPtrSlice)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&With{}) },
		SizeOf:    unsafe.Sizeof(With{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeWith),
	},
	AstTypeZoneSpecifier: {
		Copy: func(dest, from e.Ptr) { *(*ZoneSpecifier)(dest) = *(*ZoneSpecifier)(from) },
		Facade: func(impl e.ContextImpl, fn e.FacadeFn, x e.Ptr) e.DecisionImpl {
			return fn.(AstWalkerFn)(AstContext{impl}, (*ZoneSpecifier)(x)).impl
		},
		Fields: []e.FieldInfo{
			{Name: "TableOrIndex", Offset: unsafe.Offsetof(ZoneSpecifier{}.TableOrIndex), Target: e.TypeId(AstTypeTableNameWithIndex)},
		},
		NewStruct: func() e.Ptr { return e.Ptr(&ZoneSpecifier{}) },
		SizeOf:    unsafe.Sizeof(ZoneSpecifier{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(AstTypeZoneSpecifier),
	},

	// ------ Interfaces ------
	AstTypeAlterIndexCmd: {
		Copy: func(dest, from e.Ptr) {
			*(*AlterIndexCmd)(dest) = *(*AlterIndexCmd)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*AlterIndexCmd)(x)
			switch d.(type) {

			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d AlterIndexCmd
			switch AstTypeId(id) {

			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(AlterIndexCmd(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeAlterIndexCmd),
	},
	AstTypeAlterTableCmd: {
		Copy: func(dest, from e.Ptr) {
			*(*AlterTableCmd)(dest) = *(*AlterTableCmd)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*AlterTableCmd)(x)
			switch d.(type) {

			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d AlterTableCmd
			switch AstTypeId(id) {

			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(AlterTableCmd(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeAlterTableCmd),
	},
	AstTypeAst: {
		Copy: func(dest, from e.Ptr) {
			*(*Ast)(dest) = *(*Ast)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*Ast)(x)
			switch d.(type) {
			case *AliasClause:
				return e.TypeId(AstTypeAliasClause)
			case *AllColumnsSelector:
				return e.TypeId(AstTypeAllColumnsSelector)
			case *AlterIndex:
				return e.TypeId(AstTypeAlterIndex)
			case *AlterSequence:
				return e.TypeId(AstTypeAlterSequence)
			case *AlterTable:
				return e.TypeId(AstTypeAlterTable)
			case *AlterUserSetPassword:
				return e.TypeId(AstTypeAlterUserSetPassword)
			case *AndExpr:
				return e.TypeId(AstTypeAndExpr)
			case *AnnotateTypeExpr:
				return e.TypeId(AstTypeAnnotateTypeExpr)
			case *Array:
				return e.TypeId(AstTypeArray)
			case *ArrayFlatten:
				return e.TypeId(AstTypeArrayFlatten)
			case *ArraySubscript:
				return e.TypeId(AstTypeArraySubscript)
			case *AsOfClause:
				return e.TypeId(AstTypeAsOfClause)
			case *Backup:
				return e.TypeId(AstTypeBackup)
			case *BeginTransaction:
				return e.TypeId(AstTypeBeginTransaction)
			case *BinaryExpr:
				return e.TypeId(AstTypeBinaryExpr)
			case *CTE:
				return e.TypeId(AstTypeCTE)
			case *CancelQueries:
				return e.TypeId(AstTypeCancelQueries)
			case *CancelSessions:
				return e.TypeId(AstTypeCancelSessions)
			case *CaseExpr:
				return e.TypeId(AstTypeCaseExpr)
			case *CastExpr:
				return e.TypeId(AstTypeCastExpr)
			case *CoalesceExpr:
				return e.TypeId(AstTypeCoalesceExpr)
			case *CollateExpr:
				return e.TypeId(AstTypeCollateExpr)
			case *ColumnAccessExpr:
				return e.TypeId(AstTypeColumnAccessExpr)
			case *ColumnItem:
				return e.TypeId(AstTypeColumnItem)
			case *CommentOnTable:
				return e.TypeId(AstTypeCommentOnTable)
			case *CommitTransaction:
				return e.TypeId(AstTypeCommitTransaction)
			case *ComparisonExpr:
				return e.TypeId(AstTypeComparisonExpr)
			case *ControlJobs:
				return e.TypeId(AstTypeControlJobs)
			case *CopyFrom:
				return e.TypeId(AstTypeCopyFrom)
			case *CreateChangefeed:
				return e.TypeId(AstTypeCreateChangefeed)
			case *CreateDatabase:
				return e.TypeId(AstTypeCreateDatabase)
			case *CreateIndex:
				return e.TypeId(AstTypeCreateIndex)
			case *CreateRole:
				return e.TypeId(AstTypeCreateRole)
			case *CreateSequence:
				return e.TypeId(AstTypeCreateSequence)
			case *CreateStats:
				return e.TypeId(AstTypeCreateStats)
			case *CreateTable:
				return e.TypeId(AstTypeCreateTable)
			case *CreateUser:
				return e.TypeId(AstTypeCreateUser)
			case *CreateView:
				return e.TypeId(AstTypeCreateView)
			case *DArray:
				return e.TypeId(AstTypeDArray)
			case *DBitArray:
				return e.TypeId(AstTypeDBitArray)
			case *DCollatedString:
				return e.TypeId(AstTypeDCollatedString)
			case *DDecimal:
				return e.TypeId(AstTypeDDecimal)
			case *DIPAddr:
				return e.TypeId(AstTypeDIPAddr)
			case *DInterval:
				return e.TypeId(AstTypeDInterval)
			case *DJSON:
				return e.TypeId(AstTypeDJSON)
			case *DOid:
				return e.TypeId(AstTypeDOid)
			case *DOidWrapper:
				return e.TypeId(AstTypeDOidWrapper)
			case *DTimestamp:
				return e.TypeId(AstTypeDTimestamp)
			case *DTimestampTZ:
				return e.TypeId(AstTypeDTimestampTZ)
			case *DTuple:
				return e.TypeId(AstTypeDTuple)
			case *DUuid:
				return e.TypeId(AstTypeDUuid)
			case *Deallocate:
				return e.TypeId(AstTypeDeallocate)
			case *DefaultVal:
				return e.TypeId(AstTypeDefaultVal)
			case *Delete:
				return e.TypeId(AstTypeDelete)
			case *Discard:
				return e.TypeId(AstTypeDiscard)
			case *DropDatabase:
				return e.TypeId(AstTypeDropDatabase)
			case *DropIndex:
				return e.TypeId(AstTypeDropIndex)
			case *DropRole:
				return e.TypeId(AstTypeDropRole)
			case *DropSequence:
				return e.TypeId(AstTypeDropSequence)
			case *DropTable:
				return e.TypeId(AstTypeDropTable)
			case *DropUser:
				return e.TypeId(AstTypeDropUser)
			case *DropView:
				return e.TypeId(AstTypeDropView)
			case *Execute:
				return e.TypeId(AstTypeExecute)
			case *Explain:
				return e.TypeId(AstTypeExplain)
			case *Export:
				return e.TypeId(AstTypeExport)
			case *From:
				return e.TypeId(AstTypeFrom)
			case *FuncExpr:
				return e.TypeId(AstTypeFuncExpr)
			case *Grant:
				return e.TypeId(AstTypeGrant)
			case *GrantRole:
				return e.TypeId(AstTypeGrantRole)
			case *IfErrExpr:
				return e.TypeId(AstTypeIfErrExpr)
			case *IfExpr:
				return e.TypeId(AstTypeIfExpr)
			case *Import:
				return e.TypeId(AstTypeImport)
			case *IndexElem:
				return e.TypeId(AstTypeIndexElem)
			case *IndexedVar:
				return e.TypeId(AstTypeIndexedVar)
			case *IndirectionExpr:
				return e.TypeId(AstTypeIndirectionExpr)
			case *Insert:
				return e.TypeId(AstTypeInsert)
			case *InterleaveDef:
				return e.TypeId(AstTypeInterleaveDef)
			case *IsOfTypeExpr:
				return e.TypeId(AstTypeIsOfTypeExpr)
			case *KVOption:
				return e.TypeId(AstTypeKVOption)
			case *Limit:
				return e.TypeId(AstTypeLimit)
			case *ListPartition:
				return e.TypeId(AstTypeListPartition)
			case *NotExpr:
				return e.TypeId(AstTypeNotExpr)
			case *NullIfExpr:
				return e.TypeId(AstTypeNullIfExpr)
			case *NumVal:
				return e.TypeId(AstTypeNumVal)
			case *OnConflict:
				return e.TypeId(AstTypeOnConflict)
			case *OrExpr:
				return e.TypeId(AstTypeOrExpr)
			case *Order:
				return e.TypeId(AstTypeOrder)
			case *ParenExpr:
				return e.TypeId(AstTypeParenExpr)
			case *ParenSelect:
				return e.TypeId(AstTypeParenSelect)
			case *PartitionBy:
				return e.TypeId(AstTypePartitionBy)
			case *PartitionMaxVal:
				return e.TypeId(AstTypePartitionMaxVal)
			case *PartitionMinVal:
				return e.TypeId(AstTypePartitionMinVal)
			case *Placeholder:
				return e.TypeId(AstTypePlaceholder)
			case *Prepare:
				return e.TypeId(AstTypePrepare)
			case *RangeCond:
				return e.TypeId(AstTypeRangeCond)
			case *RangePartition:
				return e.TypeId(AstTypeRangePartition)
			case *ReleaseSavepoint:
				return e.TypeId(AstTypeReleaseSavepoint)
			case *Relocate:
				return e.TypeId(AstTypeRelocate)
			case *RenameColumn:
				return e.TypeId(AstTypeRenameColumn)
			case *RenameDatabase:
				return e.TypeId(AstTypeRenameDatabase)
			case *RenameIndex:
				return e.TypeId(AstTypeRenameIndex)
			case *RenameTable:
				return e.TypeId(AstTypeRenameTable)
			case *ResolvableFunctionReference:
				return e.TypeId(AstTypeResolvableFunctionReference)
			case *Restore:
				return e.TypeId(AstTypeRestore)
			case *Revoke:
				return e.TypeId(AstTypeRevoke)
			case *RevokeRole:
				return e.TypeId(AstTypeRevokeRole)
			case *RollbackToSavepoint:
				return e.TypeId(AstTypeRollbackToSavepoint)
			case *RollbackTransaction:
				return e.TypeId(AstTypeRollbackTransaction)
			case *Savepoint:
				return e.TypeId(AstTypeSavepoint)
			case *Scatter:
				return e.TypeId(AstTypeScatter)
			case *Scrub:
				return e.TypeId(AstTypeScrub)
			case *Select:
				return e.TypeId(AstTypeSelect)
			case *SelectClause:
				return e.TypeId(AstTypeSelectClause)
			case *SelectExpr:
				return e.TypeId(AstTypeSelectExpr)
			case *SequenceOption:
				return e.TypeId(AstTypeSequenceOption)
			case *SetClusterSetting:
				return e.TypeId(AstTypeSetClusterSetting)
			case *SetSessionCharacteristics:
				return e.TypeId(AstTypeSetSessionCharacteristics)
			case *SetTracing:
				return e.TypeId(AstTypeSetTracing)
			case *SetTransaction:
				return e.TypeId(AstTypeSetTransaction)
			case *SetVar:
				return e.TypeId(AstTypeSetVar)
			case *SetZoneConfig:
				return e.TypeId(AstTypeSetZoneConfig)
			case *ShowBackup:
				return e.TypeId(AstTypeShowBackup)
			case *ShowClusterSetting:
				return e.TypeId(AstTypeShowClusterSetting)
			case *ShowColumns:
				return e.TypeId(AstTypeShowColumns)
			case *ShowConstraints:
				return e.TypeId(AstTypeShowConstraints)
			case *ShowCreate:
				return e.TypeId(AstTypeShowCreate)
			case *ShowDatabases:
				return e.TypeId(AstTypeShowDatabases)
			case *ShowFingerprints:
				return e.TypeId(AstTypeShowFingerprints)
			case *ShowGrants:
				return e.TypeId(AstTypeShowGrants)
			case *ShowHistogram:
				return e.TypeId(AstTypeShowHistogram)
			case *ShowIndex:
				return e.TypeId(AstTypeShowIndex)
			case *ShowJobs:
				return e.TypeId(AstTypeShowJobs)
			case *ShowQueries:
				return e.TypeId(AstTypeShowQueries)
			case *ShowRanges:
				return e.TypeId(AstTypeShowRanges)
			case *ShowRoleGrants:
				return e.TypeId(AstTypeShowRoleGrants)
			case *ShowRoles:
				return e.TypeId(AstTypeShowRoles)
			case *ShowSchemas:
				return e.TypeId(AstTypeShowSchemas)
			case *ShowSessions:
				return e.TypeId(AstTypeShowSessions)
			case *ShowSyntax:
				return e.TypeId(AstTypeShowSyntax)
			case *ShowTableStats:
				return e.TypeId(AstTypeShowTableStats)
			case *ShowTables:
				return e.TypeId(AstTypeShowTables)
			case *ShowTraceForSession:
				return e.TypeId(AstTypeShowTraceForSession)
			case *ShowTransactionStatus:
				return e.TypeId(AstTypeShowTransactionStatus)
			case *ShowUsers:
				return e.TypeId(AstTypeShowUsers)
			case *ShowVar:
				return e.TypeId(AstTypeShowVar)
			case *ShowZoneConfig:
				return e.TypeId(AstTypeShowZoneConfig)
			case *Split:
				return e.TypeId(AstTypeSplit)
			case *StrVal:
				return e.TypeId(AstTypeStrVal)
			case *Subquery:
				return e.TypeId(AstTypeSubquery)
			case *TableName:
				return e.TypeId(AstTypeTableName)
			case *TableNamePrefix:
				return e.TypeId(AstTypeTableNamePrefix)
			case *TableNameWithIndex:
				return e.TypeId(AstTypeTableNameWithIndex)
			case *TargetList:
				return e.TypeId(AstTypeTargetList)
			case *TransactionModes:
				return e.TypeId(AstTypeTransactionModes)
			case *Truncate:
				return e.TypeId(AstTypeTruncate)
			case *Tuple:
				return e.TypeId(AstTypeTuple)
			case *TupleStar:
				return e.TypeId(AstTypeTupleStar)
			case *UnaryExpr:
				return e.TypeId(AstTypeUnaryExpr)
			case *UnionClause:
				return e.TypeId(AstTypeUnionClause)
			case *UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnresolvedName:
				return e.TypeId(AstTypeUnresolvedName)
			case *Update:
				return e.TypeId(AstTypeUpdate)
			case *UpdateExpr:
				return e.TypeId(AstTypeUpdateExpr)
			case *ValuesClause:
				return e.TypeId(AstTypeValuesClause)
			case *ValuesClauseWithNames:
				return e.TypeId(AstTypeValuesClauseWithNames)
			case *When:
				return e.TypeId(AstTypeWhen)
			case *Where:
				return e.TypeId(AstTypeWhere)
			case *WindowDef:
				return e.TypeId(AstTypeWindowDef)
			case *WindowFrame:
				return e.TypeId(AstTypeWindowFrame)
			case *WindowFrameBound:
				return e.TypeId(AstTypeWindowFrameBound)
			case *WindowFrameBounds:
				return e.TypeId(AstTypeWindowFrameBounds)
			case *With:
				return e.TypeId(AstTypeWith)
			case *ZoneSpecifier:
				return e.TypeId(AstTypeZoneSpecifier)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d Ast
			switch AstTypeId(id) {
			case AstTypeAliasClausePtr:
				d = *(**AliasClause)(x)
			case AstTypeAllColumnsSelectorPtr:
				d = *(**AllColumnsSelector)(x)
			case AstTypeAlterIndexPtr:
				d = *(**AlterIndex)(x)
			case AstTypeAlterSequencePtr:
				d = *(**AlterSequence)(x)
			case AstTypeAlterTablePtr:
				d = *(**AlterTable)(x)
			case AstTypeAlterUserSetPasswordPtr:
				d = *(**AlterUserSetPassword)(x)
			case AstTypeAndExprPtr:
				d = *(**AndExpr)(x)
			case AstTypeAnnotateTypeExprPtr:
				d = *(**AnnotateTypeExpr)(x)
			case AstTypeArrayPtr:
				d = *(**Array)(x)
			case AstTypeArrayFlattenPtr:
				d = *(**ArrayFlatten)(x)
			case AstTypeArraySubscriptPtr:
				d = *(**ArraySubscript)(x)
			case AstTypeAsOfClausePtr:
				d = *(**AsOfClause)(x)
			case AstTypeBackupPtr:
				d = *(**Backup)(x)
			case AstTypeBeginTransactionPtr:
				d = *(**BeginTransaction)(x)
			case AstTypeBinaryExprPtr:
				d = *(**BinaryExpr)(x)
			case AstTypeCTEPtr:
				d = *(**CTE)(x)
			case AstTypeCancelQueriesPtr:
				d = *(**CancelQueries)(x)
			case AstTypeCancelSessionsPtr:
				d = *(**CancelSessions)(x)
			case AstTypeCaseExprPtr:
				d = *(**CaseExpr)(x)
			case AstTypeCastExprPtr:
				d = *(**CastExpr)(x)
			case AstTypeCoalesceExprPtr:
				d = *(**CoalesceExpr)(x)
			case AstTypeCollateExprPtr:
				d = *(**CollateExpr)(x)
			case AstTypeColumnAccessExprPtr:
				d = *(**ColumnAccessExpr)(x)
			case AstTypeColumnItemPtr:
				d = *(**ColumnItem)(x)
			case AstTypeCommentOnTablePtr:
				d = *(**CommentOnTable)(x)
			case AstTypeCommitTransactionPtr:
				d = *(**CommitTransaction)(x)
			case AstTypeComparisonExprPtr:
				d = *(**ComparisonExpr)(x)
			case AstTypeControlJobsPtr:
				d = *(**ControlJobs)(x)
			case AstTypeCopyFromPtr:
				d = *(**CopyFrom)(x)
			case AstTypeCreateChangefeedPtr:
				d = *(**CreateChangefeed)(x)
			case AstTypeCreateDatabasePtr:
				d = *(**CreateDatabase)(x)
			case AstTypeCreateIndexPtr:
				d = *(**CreateIndex)(x)
			case AstTypeCreateRolePtr:
				d = *(**CreateRole)(x)
			case AstTypeCreateSequencePtr:
				d = *(**CreateSequence)(x)
			case AstTypeCreateStatsPtr:
				d = *(**CreateStats)(x)
			case AstTypeCreateTablePtr:
				d = *(**CreateTable)(x)
			case AstTypeCreateUserPtr:
				d = *(**CreateUser)(x)
			case AstTypeCreateViewPtr:
				d = *(**CreateView)(x)
			case AstTypeDArrayPtr:
				d = *(**DArray)(x)
			case AstTypeDBitArrayPtr:
				d = *(**DBitArray)(x)
			case AstTypeDCollatedStringPtr:
				d = *(**DCollatedString)(x)
			case AstTypeDDecimalPtr:
				d = *(**DDecimal)(x)
			case AstTypeDIPAddrPtr:
				d = *(**DIPAddr)(x)
			case AstTypeDIntervalPtr:
				d = *(**DInterval)(x)
			case AstTypeDJSONPtr:
				d = *(**DJSON)(x)
			case AstTypeDOidPtr:
				d = *(**DOid)(x)
			case AstTypeDOidWrapperPtr:
				d = *(**DOidWrapper)(x)
			case AstTypeDTimestampPtr:
				d = *(**DTimestamp)(x)
			case AstTypeDTimestampTZPtr:
				d = *(**DTimestampTZ)(x)
			case AstTypeDTuplePtr:
				d = *(**DTuple)(x)
			case AstTypeDUuidPtr:
				d = *(**DUuid)(x)
			case AstTypeDeallocatePtr:
				d = *(**Deallocate)(x)
			case AstTypeDefaultValPtr:
				d = *(**DefaultVal)(x)
			case AstTypeDeletePtr:
				d = *(**Delete)(x)
			case AstTypeDiscardPtr:
				d = *(**Discard)(x)
			case AstTypeDropDatabasePtr:
				d = *(**DropDatabase)(x)
			case AstTypeDropIndexPtr:
				d = *(**DropIndex)(x)
			case AstTypeDropRolePtr:
				d = *(**DropRole)(x)
			case AstTypeDropSequencePtr:
				d = *(**DropSequence)(x)
			case AstTypeDropTablePtr:
				d = *(**DropTable)(x)
			case AstTypeDropUserPtr:
				d = *(**DropUser)(x)
			case AstTypeDropViewPtr:
				d = *(**DropView)(x)
			case AstTypeExecutePtr:
				d = *(**Execute)(x)
			case AstTypeExplainPtr:
				d = *(**Explain)(x)
			case AstTypeExportPtr:
				d = *(**Export)(x)
			case AstTypeFromPtr:
				d = *(**From)(x)
			case AstTypeFuncExprPtr:
				d = *(**FuncExpr)(x)
			case AstTypeGrantPtr:
				d = *(**Grant)(x)
			case AstTypeGrantRolePtr:
				d = *(**GrantRole)(x)
			case AstTypeIfErrExprPtr:
				d = *(**IfErrExpr)(x)
			case AstTypeIfExprPtr:
				d = *(**IfExpr)(x)
			case AstTypeImportPtr:
				d = *(**Import)(x)
			case AstTypeIndexElemPtr:
				d = *(**IndexElem)(x)
			case AstTypeIndexedVarPtr:
				d = *(**IndexedVar)(x)
			case AstTypeIndirectionExprPtr:
				d = *(**IndirectionExpr)(x)
			case AstTypeInsertPtr:
				d = *(**Insert)(x)
			case AstTypeInterleaveDefPtr:
				d = *(**InterleaveDef)(x)
			case AstTypeIsOfTypeExprPtr:
				d = *(**IsOfTypeExpr)(x)
			case AstTypeKVOptionPtr:
				d = *(**KVOption)(x)
			case AstTypeLimitPtr:
				d = *(**Limit)(x)
			case AstTypeListPartitionPtr:
				d = *(**ListPartition)(x)
			case AstTypeNotExprPtr:
				d = *(**NotExpr)(x)
			case AstTypeNullIfExprPtr:
				d = *(**NullIfExpr)(x)
			case AstTypeNumValPtr:
				d = *(**NumVal)(x)
			case AstTypeOnConflictPtr:
				d = *(**OnConflict)(x)
			case AstTypeOrExprPtr:
				d = *(**OrExpr)(x)
			case AstTypeOrderPtr:
				d = *(**Order)(x)
			case AstTypeParenExprPtr:
				d = *(**ParenExpr)(x)
			case AstTypeParenSelectPtr:
				d = *(**ParenSelect)(x)
			case AstTypePartitionByPtr:
				d = *(**PartitionBy)(x)
			case AstTypePartitionMaxValPtr:
				d = *(**PartitionMaxVal)(x)
			case AstTypePartitionMinValPtr:
				d = *(**PartitionMinVal)(x)
			case AstTypePlaceholderPtr:
				d = *(**Placeholder)(x)
			case AstTypePreparePtr:
				d = *(**Prepare)(x)
			case AstTypeRangeCondPtr:
				d = *(**RangeCond)(x)
			case AstTypeRangePartitionPtr:
				d = *(**RangePartition)(x)
			case AstTypeReleaseSavepointPtr:
				d = *(**ReleaseSavepoint)(x)
			case AstTypeRelocatePtr:
				d = *(**Relocate)(x)
			case AstTypeRenameColumnPtr:
				d = *(**RenameColumn)(x)
			case AstTypeRenameDatabasePtr:
				d = *(**RenameDatabase)(x)
			case AstTypeRenameIndexPtr:
				d = *(**RenameIndex)(x)
			case AstTypeRenameTablePtr:
				d = *(**RenameTable)(x)
			case AstTypeResolvableFunctionReferencePtr:
				d = *(**ResolvableFunctionReference)(x)
			case AstTypeRestorePtr:
				d = *(**Restore)(x)
			case AstTypeRevokePtr:
				d = *(**Revoke)(x)
			case AstTypeRevokeRolePtr:
				d = *(**RevokeRole)(x)
			case AstTypeRollbackToSavepointPtr:
				d = *(**RollbackToSavepoint)(x)
			case AstTypeRollbackTransactionPtr:
				d = *(**RollbackTransaction)(x)
			case AstTypeSavepointPtr:
				d = *(**Savepoint)(x)
			case AstTypeScatterPtr:
				d = *(**Scatter)(x)
			case AstTypeScrubPtr:
				d = *(**Scrub)(x)
			case AstTypeSelectPtr:
				d = *(**Select)(x)
			case AstTypeSelectClausePtr:
				d = *(**SelectClause)(x)
			case AstTypeSelectExprPtr:
				d = *(**SelectExpr)(x)
			case AstTypeSequenceOptionPtr:
				d = *(**SequenceOption)(x)
			case AstTypeSetClusterSettingPtr:
				d = *(**SetClusterSetting)(x)
			case AstTypeSetSessionCharacteristicsPtr:
				d = *(**SetSessionCharacteristics)(x)
			case AstTypeSetTracingPtr:
				d = *(**SetTracing)(x)
			case AstTypeSetTransactionPtr:
				d = *(**SetTransaction)(x)
			case AstTypeSetVarPtr:
				d = *(**SetVar)(x)
			case AstTypeSetZoneConfigPtr:
				d = *(**SetZoneConfig)(x)
			case AstTypeShowBackupPtr:
				d = *(**ShowBackup)(x)
			case AstTypeShowClusterSettingPtr:
				d = *(**ShowClusterSetting)(x)
			case AstTypeShowColumnsPtr:
				d = *(**ShowColumns)(x)
			case AstTypeShowConstraintsPtr:
				d = *(**ShowConstraints)(x)
			case AstTypeShowCreatePtr:
				d = *(**ShowCreate)(x)
			case AstTypeShowDatabasesPtr:
				d = *(**ShowDatabases)(x)
			case AstTypeShowFingerprintsPtr:
				d = *(**ShowFingerprints)(x)
			case AstTypeShowGrantsPtr:
				d = *(**ShowGrants)(x)
			case AstTypeShowHistogramPtr:
				d = *(**ShowHistogram)(x)
			case AstTypeShowIndexPtr:
				d = *(**ShowIndex)(x)
			case AstTypeShowJobsPtr:
				d = *(**ShowJobs)(x)
			case AstTypeShowQueriesPtr:
				d = *(**ShowQueries)(x)
			case AstTypeShowRangesPtr:
				d = *(**ShowRanges)(x)
			case AstTypeShowRoleGrantsPtr:
				d = *(**ShowRoleGrants)(x)
			case AstTypeShowRolesPtr:
				d = *(**ShowRoles)(x)
			case AstTypeShowSchemasPtr:
				d = *(**ShowSchemas)(x)
			case AstTypeShowSessionsPtr:
				d = *(**ShowSessions)(x)
			case AstTypeShowSyntaxPtr:
				d = *(**ShowSyntax)(x)
			case AstTypeShowTableStatsPtr:
				d = *(**ShowTableStats)(x)
			case AstTypeShowTablesPtr:
				d = *(**ShowTables)(x)
			case AstTypeShowTraceForSessionPtr:
				d = *(**ShowTraceForSession)(x)
			case AstTypeShowTransactionStatusPtr:
				d = *(**ShowTransactionStatus)(x)
			case AstTypeShowUsersPtr:
				d = *(**ShowUsers)(x)
			case AstTypeShowVarPtr:
				d = *(**ShowVar)(x)
			case AstTypeShowZoneConfigPtr:
				d = *(**ShowZoneConfig)(x)
			case AstTypeSplitPtr:
				d = *(**Split)(x)
			case AstTypeStrValPtr:
				d = *(**StrVal)(x)
			case AstTypeSubqueryPtr:
				d = *(**Subquery)(x)
			case AstTypeTableNamePtr:
				d = *(**TableName)(x)
			case AstTypeTableNamePrefixPtr:
				d = *(**TableNamePrefix)(x)
			case AstTypeTableNameWithIndexPtr:
				d = *(**TableNameWithIndex)(x)
			case AstTypeTargetListPtr:
				d = *(**TargetList)(x)
			case AstTypeTransactionModesPtr:
				d = *(**TransactionModes)(x)
			case AstTypeTruncatePtr:
				d = *(**Truncate)(x)
			case AstTypeTuplePtr:
				d = *(**Tuple)(x)
			case AstTypeTupleStarPtr:
				d = *(**TupleStar)(x)
			case AstTypeUnaryExprPtr:
				d = *(**UnaryExpr)(x)
			case AstTypeUnionClausePtr:
				d = *(**UnionClause)(x)
			case AstTypeUnqualifiedStarPtr:
				d = *(**UnqualifiedStar)(x)
			case AstTypeUnresolvedNamePtr:
				d = *(**UnresolvedName)(x)
			case AstTypeUpdatePtr:
				d = *(**Update)(x)
			case AstTypeUpdateExprPtr:
				d = *(**UpdateExpr)(x)
			case AstTypeValuesClausePtr:
				d = *(**ValuesClause)(x)
			case AstTypeValuesClauseWithNamesPtr:
				d = *(**ValuesClauseWithNames)(x)
			case AstTypeWhenPtr:
				d = *(**When)(x)
			case AstTypeWherePtr:
				d = *(**Where)(x)
			case AstTypeWindowDefPtr:
				d = *(**WindowDef)(x)
			case AstTypeWindowFramePtr:
				d = *(**WindowFrame)(x)
			case AstTypeWindowFrameBoundPtr:
				d = *(**WindowFrameBound)(x)
			case AstTypeWindowFrameBoundsPtr:
				d = *(**WindowFrameBounds)(x)
			case AstTypeWithPtr:
				d = *(**With)(x)
			case AstTypeZoneSpecifierPtr:
				d = *(**ZoneSpecifier)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(Ast(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeAst),
	},
	AstTypeCompositeDatum: {
		Copy: func(dest, from e.Ptr) {
			*(*CompositeDatum)(dest) = *(*CompositeDatum)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*CompositeDatum)(x)
			switch d.(type) {
			case *DCollatedString:
				return e.TypeId(AstTypeDCollatedString)
			case *DDecimal:
				return e.TypeId(AstTypeDDecimal)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d CompositeDatum
			switch AstTypeId(id) {
			case AstTypeDCollatedStringPtr:
				d = *(**DCollatedString)(x)
			case AstTypeDDecimalPtr:
				d = *(**DDecimal)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(CompositeDatum(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeCompositeDatum),
	},
	AstTypeConstant: {
		Copy: func(dest, from e.Ptr) {
			*(*Constant)(dest) = *(*Constant)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*Constant)(x)
			switch d.(type) {
			case *NumVal:
				return e.TypeId(AstTypeNumVal)
			case *StrVal:
				return e.TypeId(AstTypeStrVal)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d Constant
			switch AstTypeId(id) {
			case AstTypeNumValPtr:
				d = *(**NumVal)(x)
			case AstTypeStrValPtr:
				d = *(**StrVal)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(Constant(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeConstant),
	},
	AstTypeDatum: {
		Copy: func(dest, from e.Ptr) {
			*(*Datum)(dest) = *(*Datum)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*Datum)(x)
			switch d.(type) {
			case *DArray:
				return e.TypeId(AstTypeDArray)
			case *DBitArray:
				return e.TypeId(AstTypeDBitArray)
			case *DCollatedString:
				return e.TypeId(AstTypeDCollatedString)
			case *DDecimal:
				return e.TypeId(AstTypeDDecimal)
			case *DIPAddr:
				return e.TypeId(AstTypeDIPAddr)
			case *DInterval:
				return e.TypeId(AstTypeDInterval)
			case *DJSON:
				return e.TypeId(AstTypeDJSON)
			case *DOid:
				return e.TypeId(AstTypeDOid)
			case *DOidWrapper:
				return e.TypeId(AstTypeDOidWrapper)
			case *DTimestamp:
				return e.TypeId(AstTypeDTimestamp)
			case *DTimestampTZ:
				return e.TypeId(AstTypeDTimestampTZ)
			case *DTuple:
				return e.TypeId(AstTypeDTuple)
			case *DUuid:
				return e.TypeId(AstTypeDUuid)
			case *Placeholder:
				return e.TypeId(AstTypePlaceholder)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d Datum
			switch AstTypeId(id) {
			case AstTypeDArrayPtr:
				d = *(**DArray)(x)
			case AstTypeDBitArrayPtr:
				d = *(**DBitArray)(x)
			case AstTypeDCollatedStringPtr:
				d = *(**DCollatedString)(x)
			case AstTypeDDecimalPtr:
				d = *(**DDecimal)(x)
			case AstTypeDIPAddrPtr:
				d = *(**DIPAddr)(x)
			case AstTypeDIntervalPtr:
				d = *(**DInterval)(x)
			case AstTypeDJSONPtr:
				d = *(**DJSON)(x)
			case AstTypeDOidPtr:
				d = *(**DOid)(x)
			case AstTypeDOidWrapperPtr:
				d = *(**DOidWrapper)(x)
			case AstTypeDTimestampPtr:
				d = *(**DTimestamp)(x)
			case AstTypeDTimestampTZPtr:
				d = *(**DTimestampTZ)(x)
			case AstTypeDTuplePtr:
				d = *(**DTuple)(x)
			case AstTypeDUuidPtr:
				d = *(**DUuid)(x)
			case AstTypePlaceholderPtr:
				d = *(**Placeholder)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(Datum(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeDatum),
	},
	AstTypeExpr: {
		Copy: func(dest, from e.Ptr) {
			*(*Expr)(dest) = *(*Expr)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*Expr)(x)
			if d == nil || d == Expr(nil) {
				return 0
			}
			switch d.(type) {
			case *AllColumnsSelector:
				return e.TypeId(AstTypeAllColumnsSelector)
			case *AndExpr:
				return e.TypeId(AstTypeAndExpr)
			case *AnnotateTypeExpr:
				return e.TypeId(AstTypeAnnotateTypeExpr)
			case *Array:
				return e.TypeId(AstTypeArray)
			case *ArrayFlatten:
				return e.TypeId(AstTypeArrayFlatten)
			case *BinaryExpr:
				return e.TypeId(AstTypeBinaryExpr)
			case *CaseExpr:
				return e.TypeId(AstTypeCaseExpr)
			case *CastExpr:
				return e.TypeId(AstTypeCastExpr)
			case *CoalesceExpr:
				return e.TypeId(AstTypeCoalesceExpr)
			case *CollateExpr:
				return e.TypeId(AstTypeCollateExpr)
			case *ColumnAccessExpr:
				return e.TypeId(AstTypeColumnAccessExpr)
			case *ColumnItem:
				return e.TypeId(AstTypeColumnItem)
			case *ComparisonExpr:
				return e.TypeId(AstTypeComparisonExpr)
			case *DArray:
				return e.TypeId(AstTypeDArray)
			case *DBitArray:
				return e.TypeId(AstTypeDBitArray)
			case *DCollatedString:
				return e.TypeId(AstTypeDCollatedString)
			case *DDecimal:
				return e.TypeId(AstTypeDDecimal)
			case *DIPAddr:
				return e.TypeId(AstTypeDIPAddr)
			case *DInterval:
				return e.TypeId(AstTypeDInterval)
			case *DJSON:
				return e.TypeId(AstTypeDJSON)
			case *DOid:
				return e.TypeId(AstTypeDOid)
			case *DOidWrapper:
				return e.TypeId(AstTypeDOidWrapper)
			case *DTimestamp:
				return e.TypeId(AstTypeDTimestamp)
			case *DTimestampTZ:
				return e.TypeId(AstTypeDTimestampTZ)
			case *DTuple:
				return e.TypeId(AstTypeDTuple)
			case *DUuid:
				return e.TypeId(AstTypeDUuid)
			case DefaultVal:
				return e.TypeId(AstTypeDefaultVal)
			case *DefaultVal:
				return e.TypeId(AstTypeDefaultVal)
			case *FuncExpr:
				return e.TypeId(AstTypeFuncExpr)
			case *IfErrExpr:
				return e.TypeId(AstTypeIfErrExpr)
			case *IfExpr:
				return e.TypeId(AstTypeIfExpr)
			case *IndexedVar:
				return e.TypeId(AstTypeIndexedVar)
			case *IndirectionExpr:
				return e.TypeId(AstTypeIndirectionExpr)
			case *IsOfTypeExpr:
				return e.TypeId(AstTypeIsOfTypeExpr)
			case *NotExpr:
				return e.TypeId(AstTypeNotExpr)
			case *NullIfExpr:
				return e.TypeId(AstTypeNullIfExpr)
			case *NumVal:
				return e.TypeId(AstTypeNumVal)
			case *OrExpr:
				return e.TypeId(AstTypeOrExpr)
			case *ParenExpr:
				return e.TypeId(AstTypeParenExpr)
			case PartitionMaxVal:
				return e.TypeId(AstTypePartitionMaxVal)
			case *PartitionMaxVal:
				return e.TypeId(AstTypePartitionMaxVal)
			case PartitionMinVal:
				return e.TypeId(AstTypePartitionMinVal)
			case *PartitionMinVal:
				return e.TypeId(AstTypePartitionMinVal)
			case *Placeholder:
				return e.TypeId(AstTypePlaceholder)
			case *RangeCond:
				return e.TypeId(AstTypeRangeCond)
			case *StrVal:
				return e.TypeId(AstTypeStrVal)
			case *Subquery:
				return e.TypeId(AstTypeSubquery)
			case *Tuple:
				return e.TypeId(AstTypeTuple)
			case *TupleStar:
				return e.TypeId(AstTypeTupleStar)
			case *UnaryExpr:
				return e.TypeId(AstTypeUnaryExpr)
			case UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnresolvedName:
				return e.TypeId(AstTypeUnresolvedName)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d Expr
			switch AstTypeId(id) {
			case AstTypeAllColumnsSelectorPtr:
				d = *(**AllColumnsSelector)(x)
			case AstTypeAndExprPtr:
				d = *(**AndExpr)(x)
			case AstTypeAnnotateTypeExprPtr:
				d = *(**AnnotateTypeExpr)(x)
			case AstTypeArrayPtr:
				d = *(**Array)(x)
			case AstTypeArrayFlattenPtr:
				d = *(**ArrayFlatten)(x)
			case AstTypeBinaryExprPtr:
				d = *(**BinaryExpr)(x)
			case AstTypeCaseExprPtr:
				d = *(**CaseExpr)(x)
			case AstTypeCastExprPtr:
				d = *(**CastExpr)(x)
			case AstTypeCoalesceExprPtr:
				d = *(**CoalesceExpr)(x)
			case AstTypeCollateExprPtr:
				d = *(**CollateExpr)(x)
			case AstTypeColumnAccessExprPtr:
				d = *(**ColumnAccessExpr)(x)
			case AstTypeColumnItemPtr:
				d = *(**ColumnItem)(x)
			case AstTypeComparisonExprPtr:
				d = *(**ComparisonExpr)(x)
			case AstTypeDArrayPtr:
				d = *(**DArray)(x)
			case AstTypeDBitArrayPtr:
				d = *(**DBitArray)(x)
			case AstTypeDCollatedStringPtr:
				d = *(**DCollatedString)(x)
			case AstTypeDDecimalPtr:
				d = *(**DDecimal)(x)
			case AstTypeDIPAddrPtr:
				d = *(**DIPAddr)(x)
			case AstTypeDIntervalPtr:
				d = *(**DInterval)(x)
			case AstTypeDJSONPtr:
				d = *(**DJSON)(x)
			case AstTypeDOidPtr:
				d = *(**DOid)(x)
			case AstTypeDOidWrapperPtr:
				d = *(**DOidWrapper)(x)
			case AstTypeDTimestampPtr:
				d = *(**DTimestamp)(x)
			case AstTypeDTimestampTZPtr:
				d = *(**DTimestampTZ)(x)
			case AstTypeDTuplePtr:
				d = *(**DTuple)(x)
			case AstTypeDUuidPtr:
				d = *(**DUuid)(x)
			case AstTypeDefaultVal:
				d = *(*DefaultVal)(x)
			case AstTypeDefaultValPtr:
				d = *(**DefaultVal)(x)
			case AstTypeFuncExprPtr:
				d = *(**FuncExpr)(x)
			case AstTypeIfErrExprPtr:
				d = *(**IfErrExpr)(x)
			case AstTypeIfExprPtr:
				d = *(**IfExpr)(x)
			case AstTypeIndexedVarPtr:
				d = *(**IndexedVar)(x)
			case AstTypeIndirectionExprPtr:
				d = *(**IndirectionExpr)(x)
			case AstTypeIsOfTypeExprPtr:
				d = *(**IsOfTypeExpr)(x)
			case AstTypeNotExprPtr:
				d = *(**NotExpr)(x)
			case AstTypeNullIfExprPtr:
				d = *(**NullIfExpr)(x)
			case AstTypeNumValPtr:
				d = *(**NumVal)(x)
			case AstTypeOrExprPtr:
				d = *(**OrExpr)(x)
			case AstTypeParenExprPtr:
				d = *(**ParenExpr)(x)
			case AstTypePartitionMaxVal:
				d = *(*PartitionMaxVal)(x)
			case AstTypePartitionMaxValPtr:
				d = *(**PartitionMaxVal)(x)
			case AstTypePartitionMinVal:
				d = *(*PartitionMinVal)(x)
			case AstTypePartitionMinValPtr:
				d = *(**PartitionMinVal)(x)
			case AstTypePlaceholderPtr:
				d = *(**Placeholder)(x)
			case AstTypeRangeCondPtr:
				d = *(**RangeCond)(x)
			case AstTypeStrValPtr:
				d = *(**StrVal)(x)
			case AstTypeSubqueryPtr:
				d = *(**Subquery)(x)
			case AstTypeTuplePtr:
				d = *(**Tuple)(x)
			case AstTypeTupleStarPtr:
				d = *(**TupleStar)(x)
			case AstTypeUnaryExprPtr:
				d = *(**UnaryExpr)(x)
			case AstTypeUnqualifiedStar:
				d = *(*UnqualifiedStar)(x)
			case AstTypeUnqualifiedStarPtr:
				d = *(**UnqualifiedStar)(x)
			case AstTypeUnresolvedNamePtr:
				d = *(**UnresolvedName)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(Expr(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeExpr),
	},
	AstTypeFunctionReference: {
		Copy: func(dest, from e.Ptr) {
			*(*FunctionReference)(dest) = *(*FunctionReference)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*FunctionReference)(x)
			switch d.(type) {
			case *ResolvableFunctionReference:
				return e.TypeId(AstTypeResolvableFunctionReference)
			case *UnresolvedName:
				return e.TypeId(AstTypeUnresolvedName)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d FunctionReference
			switch AstTypeId(id) {
			case AstTypeResolvableFunctionReferencePtr:
				d = *(**ResolvableFunctionReference)(x)
			case AstTypeUnresolvedNamePtr:
				d = *(**UnresolvedName)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(FunctionReference(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeFunctionReference),
	},
	AstTypeReturningClause: {
		Copy: func(dest, from e.Ptr) {
			*(*ReturningClause)(dest) = *(*ReturningClause)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*ReturningClause)(x)
			switch d.(type) {

			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d ReturningClause
			switch AstTypeId(id) {

			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(ReturningClause(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeReturningClause),
	},
	AstTypeScrubOption: {
		Copy: func(dest, from e.Ptr) {
			*(*ScrubOption)(dest) = *(*ScrubOption)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*ScrubOption)(x)
			switch d.(type) {

			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d ScrubOption
			switch AstTypeId(id) {

			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(ScrubOption(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeScrubOption),
	},
	AstTypeSelectStatement: {
		Copy: func(dest, from e.Ptr) {
			*(*SelectStatement)(dest) = *(*SelectStatement)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*SelectStatement)(x)
			switch d.(type) {
			case *ParenSelect:
				return e.TypeId(AstTypeParenSelect)
			case *SelectClause:
				return e.TypeId(AstTypeSelectClause)
			case *UnionClause:
				return e.TypeId(AstTypeUnionClause)
			case *ValuesClause:
				return e.TypeId(AstTypeValuesClause)
			case *ValuesClauseWithNames:
				return e.TypeId(AstTypeValuesClauseWithNames)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d SelectStatement
			switch AstTypeId(id) {
			case AstTypeParenSelectPtr:
				d = *(**ParenSelect)(x)
			case AstTypeSelectClausePtr:
				d = *(**SelectClause)(x)
			case AstTypeUnionClausePtr:
				d = *(**UnionClause)(x)
			case AstTypeValuesClausePtr:
				d = *(**ValuesClause)(x)
			case AstTypeValuesClauseWithNamesPtr:
				d = *(**ValuesClauseWithNames)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(SelectStatement(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeSelectStatement),
	},
	AstTypeStatement: {
		Copy: func(dest, from e.Ptr) {
			*(*Statement)(dest) = *(*Statement)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*Statement)(x)
			switch d.(type) {
			case *AlterIndex:
				return e.TypeId(AstTypeAlterIndex)
			case *AlterSequence:
				return e.TypeId(AstTypeAlterSequence)
			case *AlterTable:
				return e.TypeId(AstTypeAlterTable)
			case *AlterUserSetPassword:
				return e.TypeId(AstTypeAlterUserSetPassword)
			case *Backup:
				return e.TypeId(AstTypeBackup)
			case *BeginTransaction:
				return e.TypeId(AstTypeBeginTransaction)
			case *CancelQueries:
				return e.TypeId(AstTypeCancelQueries)
			case *CancelSessions:
				return e.TypeId(AstTypeCancelSessions)
			case *CommentOnTable:
				return e.TypeId(AstTypeCommentOnTable)
			case *CommitTransaction:
				return e.TypeId(AstTypeCommitTransaction)
			case *ControlJobs:
				return e.TypeId(AstTypeControlJobs)
			case *CopyFrom:
				return e.TypeId(AstTypeCopyFrom)
			case *CreateChangefeed:
				return e.TypeId(AstTypeCreateChangefeed)
			case *CreateDatabase:
				return e.TypeId(AstTypeCreateDatabase)
			case *CreateIndex:
				return e.TypeId(AstTypeCreateIndex)
			case *CreateRole:
				return e.TypeId(AstTypeCreateRole)
			case *CreateSequence:
				return e.TypeId(AstTypeCreateSequence)
			case *CreateStats:
				return e.TypeId(AstTypeCreateStats)
			case *CreateTable:
				return e.TypeId(AstTypeCreateTable)
			case *CreateUser:
				return e.TypeId(AstTypeCreateUser)
			case *CreateView:
				return e.TypeId(AstTypeCreateView)
			case *Deallocate:
				return e.TypeId(AstTypeDeallocate)
			case *Delete:
				return e.TypeId(AstTypeDelete)
			case *Discard:
				return e.TypeId(AstTypeDiscard)
			case *DropDatabase:
				return e.TypeId(AstTypeDropDatabase)
			case *DropIndex:
				return e.TypeId(AstTypeDropIndex)
			case *DropRole:
				return e.TypeId(AstTypeDropRole)
			case *DropSequence:
				return e.TypeId(AstTypeDropSequence)
			case *DropTable:
				return e.TypeId(AstTypeDropTable)
			case *DropUser:
				return e.TypeId(AstTypeDropUser)
			case *DropView:
				return e.TypeId(AstTypeDropView)
			case *Execute:
				return e.TypeId(AstTypeExecute)
			case *Explain:
				return e.TypeId(AstTypeExplain)
			case *Export:
				return e.TypeId(AstTypeExport)
			case *Grant:
				return e.TypeId(AstTypeGrant)
			case *GrantRole:
				return e.TypeId(AstTypeGrantRole)
			case *Import:
				return e.TypeId(AstTypeImport)
			case *Insert:
				return e.TypeId(AstTypeInsert)
			case *ParenSelect:
				return e.TypeId(AstTypeParenSelect)
			case *Prepare:
				return e.TypeId(AstTypePrepare)
			case *ReleaseSavepoint:
				return e.TypeId(AstTypeReleaseSavepoint)
			case *Relocate:
				return e.TypeId(AstTypeRelocate)
			case *RenameColumn:
				return e.TypeId(AstTypeRenameColumn)
			case *RenameDatabase:
				return e.TypeId(AstTypeRenameDatabase)
			case *RenameIndex:
				return e.TypeId(AstTypeRenameIndex)
			case *RenameTable:
				return e.TypeId(AstTypeRenameTable)
			case *Restore:
				return e.TypeId(AstTypeRestore)
			case *Revoke:
				return e.TypeId(AstTypeRevoke)
			case *RevokeRole:
				return e.TypeId(AstTypeRevokeRole)
			case *RollbackToSavepoint:
				return e.TypeId(AstTypeRollbackToSavepoint)
			case *RollbackTransaction:
				return e.TypeId(AstTypeRollbackTransaction)
			case *Savepoint:
				return e.TypeId(AstTypeSavepoint)
			case *Scatter:
				return e.TypeId(AstTypeScatter)
			case *Scrub:
				return e.TypeId(AstTypeScrub)
			case *Select:
				return e.TypeId(AstTypeSelect)
			case *SelectClause:
				return e.TypeId(AstTypeSelectClause)
			case *SetClusterSetting:
				return e.TypeId(AstTypeSetClusterSetting)
			case *SetSessionCharacteristics:
				return e.TypeId(AstTypeSetSessionCharacteristics)
			case *SetTracing:
				return e.TypeId(AstTypeSetTracing)
			case *SetTransaction:
				return e.TypeId(AstTypeSetTransaction)
			case *SetVar:
				return e.TypeId(AstTypeSetVar)
			case *SetZoneConfig:
				return e.TypeId(AstTypeSetZoneConfig)
			case *ShowBackup:
				return e.TypeId(AstTypeShowBackup)
			case *ShowClusterSetting:
				return e.TypeId(AstTypeShowClusterSetting)
			case *ShowColumns:
				return e.TypeId(AstTypeShowColumns)
			case *ShowConstraints:
				return e.TypeId(AstTypeShowConstraints)
			case *ShowCreate:
				return e.TypeId(AstTypeShowCreate)
			case *ShowDatabases:
				return e.TypeId(AstTypeShowDatabases)
			case *ShowFingerprints:
				return e.TypeId(AstTypeShowFingerprints)
			case *ShowGrants:
				return e.TypeId(AstTypeShowGrants)
			case *ShowHistogram:
				return e.TypeId(AstTypeShowHistogram)
			case *ShowIndex:
				return e.TypeId(AstTypeShowIndex)
			case *ShowJobs:
				return e.TypeId(AstTypeShowJobs)
			case *ShowQueries:
				return e.TypeId(AstTypeShowQueries)
			case *ShowRanges:
				return e.TypeId(AstTypeShowRanges)
			case *ShowRoleGrants:
				return e.TypeId(AstTypeShowRoleGrants)
			case *ShowRoles:
				return e.TypeId(AstTypeShowRoles)
			case *ShowSchemas:
				return e.TypeId(AstTypeShowSchemas)
			case *ShowSessions:
				return e.TypeId(AstTypeShowSessions)
			case *ShowSyntax:
				return e.TypeId(AstTypeShowSyntax)
			case *ShowTableStats:
				return e.TypeId(AstTypeShowTableStats)
			case *ShowTables:
				return e.TypeId(AstTypeShowTables)
			case *ShowTraceForSession:
				return e.TypeId(AstTypeShowTraceForSession)
			case *ShowTransactionStatus:
				return e.TypeId(AstTypeShowTransactionStatus)
			case *ShowUsers:
				return e.TypeId(AstTypeShowUsers)
			case *ShowVar:
				return e.TypeId(AstTypeShowVar)
			case *ShowZoneConfig:
				return e.TypeId(AstTypeShowZoneConfig)
			case *Split:
				return e.TypeId(AstTypeSplit)
			case *Truncate:
				return e.TypeId(AstTypeTruncate)
			case *UnionClause:
				return e.TypeId(AstTypeUnionClause)
			case *Update:
				return e.TypeId(AstTypeUpdate)
			case *ValuesClause:
				return e.TypeId(AstTypeValuesClause)
			case *ValuesClauseWithNames:
				return e.TypeId(AstTypeValuesClauseWithNames)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d Statement
			switch AstTypeId(id) {
			case AstTypeAlterIndexPtr:
				d = *(**AlterIndex)(x)
			case AstTypeAlterSequencePtr:
				d = *(**AlterSequence)(x)
			case AstTypeAlterTablePtr:
				d = *(**AlterTable)(x)
			case AstTypeAlterUserSetPasswordPtr:
				d = *(**AlterUserSetPassword)(x)
			case AstTypeBackupPtr:
				d = *(**Backup)(x)
			case AstTypeBeginTransactionPtr:
				d = *(**BeginTransaction)(x)
			case AstTypeCancelQueriesPtr:
				d = *(**CancelQueries)(x)
			case AstTypeCancelSessionsPtr:
				d = *(**CancelSessions)(x)
			case AstTypeCommentOnTablePtr:
				d = *(**CommentOnTable)(x)
			case AstTypeCommitTransactionPtr:
				d = *(**CommitTransaction)(x)
			case AstTypeControlJobsPtr:
				d = *(**ControlJobs)(x)
			case AstTypeCopyFromPtr:
				d = *(**CopyFrom)(x)
			case AstTypeCreateChangefeedPtr:
				d = *(**CreateChangefeed)(x)
			case AstTypeCreateDatabasePtr:
				d = *(**CreateDatabase)(x)
			case AstTypeCreateIndexPtr:
				d = *(**CreateIndex)(x)
			case AstTypeCreateRolePtr:
				d = *(**CreateRole)(x)
			case AstTypeCreateSequencePtr:
				d = *(**CreateSequence)(x)
			case AstTypeCreateStatsPtr:
				d = *(**CreateStats)(x)
			case AstTypeCreateTablePtr:
				d = *(**CreateTable)(x)
			case AstTypeCreateUserPtr:
				d = *(**CreateUser)(x)
			case AstTypeCreateViewPtr:
				d = *(**CreateView)(x)
			case AstTypeDeallocatePtr:
				d = *(**Deallocate)(x)
			case AstTypeDeletePtr:
				d = *(**Delete)(x)
			case AstTypeDiscardPtr:
				d = *(**Discard)(x)
			case AstTypeDropDatabasePtr:
				d = *(**DropDatabase)(x)
			case AstTypeDropIndexPtr:
				d = *(**DropIndex)(x)
			case AstTypeDropRolePtr:
				d = *(**DropRole)(x)
			case AstTypeDropSequencePtr:
				d = *(**DropSequence)(x)
			case AstTypeDropTablePtr:
				d = *(**DropTable)(x)
			case AstTypeDropUserPtr:
				d = *(**DropUser)(x)
			case AstTypeDropViewPtr:
				d = *(**DropView)(x)
			case AstTypeExecutePtr:
				d = *(**Execute)(x)
			case AstTypeExplainPtr:
				d = *(**Explain)(x)
			case AstTypeExportPtr:
				d = *(**Export)(x)
			case AstTypeGrantPtr:
				d = *(**Grant)(x)
			case AstTypeGrantRolePtr:
				d = *(**GrantRole)(x)
			case AstTypeImportPtr:
				d = *(**Import)(x)
			case AstTypeInsertPtr:
				d = *(**Insert)(x)
			case AstTypeParenSelectPtr:
				d = *(**ParenSelect)(x)
			case AstTypePreparePtr:
				d = *(**Prepare)(x)
			case AstTypeReleaseSavepointPtr:
				d = *(**ReleaseSavepoint)(x)
			case AstTypeRelocatePtr:
				d = *(**Relocate)(x)
			case AstTypeRenameColumnPtr:
				d = *(**RenameColumn)(x)
			case AstTypeRenameDatabasePtr:
				d = *(**RenameDatabase)(x)
			case AstTypeRenameIndexPtr:
				d = *(**RenameIndex)(x)
			case AstTypeRenameTablePtr:
				d = *(**RenameTable)(x)
			case AstTypeRestorePtr:
				d = *(**Restore)(x)
			case AstTypeRevokePtr:
				d = *(**Revoke)(x)
			case AstTypeRevokeRolePtr:
				d = *(**RevokeRole)(x)
			case AstTypeRollbackToSavepointPtr:
				d = *(**RollbackToSavepoint)(x)
			case AstTypeRollbackTransactionPtr:
				d = *(**RollbackTransaction)(x)
			case AstTypeSavepointPtr:
				d = *(**Savepoint)(x)
			case AstTypeScatterPtr:
				d = *(**Scatter)(x)
			case AstTypeScrubPtr:
				d = *(**Scrub)(x)
			case AstTypeSelectPtr:
				d = *(**Select)(x)
			case AstTypeSelectClausePtr:
				d = *(**SelectClause)(x)
			case AstTypeSetClusterSettingPtr:
				d = *(**SetClusterSetting)(x)
			case AstTypeSetSessionCharacteristicsPtr:
				d = *(**SetSessionCharacteristics)(x)
			case AstTypeSetTracingPtr:
				d = *(**SetTracing)(x)
			case AstTypeSetTransactionPtr:
				d = *(**SetTransaction)(x)
			case AstTypeSetVarPtr:
				d = *(**SetVar)(x)
			case AstTypeSetZoneConfigPtr:
				d = *(**SetZoneConfig)(x)
			case AstTypeShowBackupPtr:
				d = *(**ShowBackup)(x)
			case AstTypeShowClusterSettingPtr:
				d = *(**ShowClusterSetting)(x)
			case AstTypeShowColumnsPtr:
				d = *(**ShowColumns)(x)
			case AstTypeShowConstraintsPtr:
				d = *(**ShowConstraints)(x)
			case AstTypeShowCreatePtr:
				d = *(**ShowCreate)(x)
			case AstTypeShowDatabasesPtr:
				d = *(**ShowDatabases)(x)
			case AstTypeShowFingerprintsPtr:
				d = *(**ShowFingerprints)(x)
			case AstTypeShowGrantsPtr:
				d = *(**ShowGrants)(x)
			case AstTypeShowHistogramPtr:
				d = *(**ShowHistogram)(x)
			case AstTypeShowIndexPtr:
				d = *(**ShowIndex)(x)
			case AstTypeShowJobsPtr:
				d = *(**ShowJobs)(x)
			case AstTypeShowQueriesPtr:
				d = *(**ShowQueries)(x)
			case AstTypeShowRangesPtr:
				d = *(**ShowRanges)(x)
			case AstTypeShowRoleGrantsPtr:
				d = *(**ShowRoleGrants)(x)
			case AstTypeShowRolesPtr:
				d = *(**ShowRoles)(x)
			case AstTypeShowSchemasPtr:
				d = *(**ShowSchemas)(x)
			case AstTypeShowSessionsPtr:
				d = *(**ShowSessions)(x)
			case AstTypeShowSyntaxPtr:
				d = *(**ShowSyntax)(x)
			case AstTypeShowTableStatsPtr:
				d = *(**ShowTableStats)(x)
			case AstTypeShowTablesPtr:
				d = *(**ShowTables)(x)
			case AstTypeShowTraceForSessionPtr:
				d = *(**ShowTraceForSession)(x)
			case AstTypeShowTransactionStatusPtr:
				d = *(**ShowTransactionStatus)(x)
			case AstTypeShowUsersPtr:
				d = *(**ShowUsers)(x)
			case AstTypeShowVarPtr:
				d = *(**ShowVar)(x)
			case AstTypeShowZoneConfigPtr:
				d = *(**ShowZoneConfig)(x)
			case AstTypeSplitPtr:
				d = *(**Split)(x)
			case AstTypeTruncatePtr:
				d = *(**Truncate)(x)
			case AstTypeUnionClausePtr:
				d = *(**UnionClause)(x)
			case AstTypeUpdatePtr:
				d = *(**Update)(x)
			case AstTypeValuesClausePtr:
				d = *(**ValuesClause)(x)
			case AstTypeValuesClauseWithNamesPtr:
				d = *(**ValuesClauseWithNames)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(Statement(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeStatement),
	},
	AstTypeTableDef: {
		Copy: func(dest, from e.Ptr) {
			*(*TableDef)(dest) = *(*TableDef)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*TableDef)(x)
			switch d.(type) {

			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d TableDef
			switch AstTypeId(id) {

			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(TableDef(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeTableDef),
	},
	AstTypeTableExpr: {
		Copy: func(dest, from e.Ptr) {
			*(*TableExpr)(dest) = *(*TableExpr)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*TableExpr)(x)
			switch d.(type) {
			case *Subquery:
				return e.TypeId(AstTypeSubquery)
			case *TableName:
				return e.TypeId(AstTypeTableName)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d TableExpr
			switch AstTypeId(id) {
			case AstTypeSubqueryPtr:
				d = *(**Subquery)(x)
			case AstTypeTableNamePtr:
				d = *(**TableName)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(TableExpr(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeTableExpr),
	},
	AstTypeTablePattern: {
		Copy: func(dest, from e.Ptr) {
			*(*TablePattern)(dest) = *(*TablePattern)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*TablePattern)(x)
			switch d.(type) {
			case *TableName:
				return e.TypeId(AstTypeTableName)
			case *UnresolvedName:
				return e.TypeId(AstTypeUnresolvedName)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d TablePattern
			switch AstTypeId(id) {
			case AstTypeTableNamePtr:
				d = *(**TableName)(x)
			case AstTypeUnresolvedNamePtr:
				d = *(**UnresolvedName)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(TablePattern(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeTablePattern),
	},
	AstTypeTypedExpr: {
		Copy: func(dest, from e.Ptr) {
			*(*TypedExpr)(dest) = *(*TypedExpr)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*TypedExpr)(x)
			switch d.(type) {
			case *AllColumnsSelector:
				return e.TypeId(AstTypeAllColumnsSelector)
			case *AndExpr:
				return e.TypeId(AstTypeAndExpr)
			case *Array:
				return e.TypeId(AstTypeArray)
			case *ArrayFlatten:
				return e.TypeId(AstTypeArrayFlatten)
			case *BinaryExpr:
				return e.TypeId(AstTypeBinaryExpr)
			case *CaseExpr:
				return e.TypeId(AstTypeCaseExpr)
			case *CastExpr:
				return e.TypeId(AstTypeCastExpr)
			case *CoalesceExpr:
				return e.TypeId(AstTypeCoalesceExpr)
			case *CollateExpr:
				return e.TypeId(AstTypeCollateExpr)
			case *ColumnAccessExpr:
				return e.TypeId(AstTypeColumnAccessExpr)
			case *ColumnItem:
				return e.TypeId(AstTypeColumnItem)
			case *ComparisonExpr:
				return e.TypeId(AstTypeComparisonExpr)
			case *DArray:
				return e.TypeId(AstTypeDArray)
			case *DBitArray:
				return e.TypeId(AstTypeDBitArray)
			case *DCollatedString:
				return e.TypeId(AstTypeDCollatedString)
			case *DDecimal:
				return e.TypeId(AstTypeDDecimal)
			case *DIPAddr:
				return e.TypeId(AstTypeDIPAddr)
			case *DInterval:
				return e.TypeId(AstTypeDInterval)
			case *DJSON:
				return e.TypeId(AstTypeDJSON)
			case *DOid:
				return e.TypeId(AstTypeDOid)
			case *DOidWrapper:
				return e.TypeId(AstTypeDOidWrapper)
			case *DTimestamp:
				return e.TypeId(AstTypeDTimestamp)
			case *DTimestampTZ:
				return e.TypeId(AstTypeDTimestampTZ)
			case *DTuple:
				return e.TypeId(AstTypeDTuple)
			case *DUuid:
				return e.TypeId(AstTypeDUuid)
			case DefaultVal:
				return e.TypeId(AstTypeDefaultVal)
			case *DefaultVal:
				return e.TypeId(AstTypeDefaultVal)
			case *FuncExpr:
				return e.TypeId(AstTypeFuncExpr)
			case *IfErrExpr:
				return e.TypeId(AstTypeIfErrExpr)
			case *IfExpr:
				return e.TypeId(AstTypeIfExpr)
			case *IndexedVar:
				return e.TypeId(AstTypeIndexedVar)
			case *IndirectionExpr:
				return e.TypeId(AstTypeIndirectionExpr)
			case *IsOfTypeExpr:
				return e.TypeId(AstTypeIsOfTypeExpr)
			case *NotExpr:
				return e.TypeId(AstTypeNotExpr)
			case *NullIfExpr:
				return e.TypeId(AstTypeNullIfExpr)
			case *OrExpr:
				return e.TypeId(AstTypeOrExpr)
			case *ParenExpr:
				return e.TypeId(AstTypeParenExpr)
			case *Placeholder:
				return e.TypeId(AstTypePlaceholder)
			case *RangeCond:
				return e.TypeId(AstTypeRangeCond)
			case *Subquery:
				return e.TypeId(AstTypeSubquery)
			case *Tuple:
				return e.TypeId(AstTypeTuple)
			case *TupleStar:
				return e.TypeId(AstTypeTupleStar)
			case *UnaryExpr:
				return e.TypeId(AstTypeUnaryExpr)
			case UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnresolvedName:
				return e.TypeId(AstTypeUnresolvedName)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d TypedExpr
			switch AstTypeId(id) {
			case AstTypeAllColumnsSelectorPtr:
				d = *(**AllColumnsSelector)(x)
			case AstTypeAndExprPtr:
				d = *(**AndExpr)(x)
			case AstTypeArrayPtr:
				d = *(**Array)(x)
			case AstTypeArrayFlattenPtr:
				d = *(**ArrayFlatten)(x)
			case AstTypeBinaryExprPtr:
				d = *(**BinaryExpr)(x)
			case AstTypeCaseExprPtr:
				d = *(**CaseExpr)(x)
			case AstTypeCastExprPtr:
				d = *(**CastExpr)(x)
			case AstTypeCoalesceExprPtr:
				d = *(**CoalesceExpr)(x)
			case AstTypeCollateExprPtr:
				d = *(**CollateExpr)(x)
			case AstTypeColumnAccessExprPtr:
				d = *(**ColumnAccessExpr)(x)
			case AstTypeColumnItemPtr:
				d = *(**ColumnItem)(x)
			case AstTypeComparisonExprPtr:
				d = *(**ComparisonExpr)(x)
			case AstTypeDArrayPtr:
				d = *(**DArray)(x)
			case AstTypeDBitArrayPtr:
				d = *(**DBitArray)(x)
			case AstTypeDCollatedStringPtr:
				d = *(**DCollatedString)(x)
			case AstTypeDDecimalPtr:
				d = *(**DDecimal)(x)
			case AstTypeDIPAddrPtr:
				d = *(**DIPAddr)(x)
			case AstTypeDIntervalPtr:
				d = *(**DInterval)(x)
			case AstTypeDJSONPtr:
				d = *(**DJSON)(x)
			case AstTypeDOidPtr:
				d = *(**DOid)(x)
			case AstTypeDOidWrapperPtr:
				d = *(**DOidWrapper)(x)
			case AstTypeDTimestampPtr:
				d = *(**DTimestamp)(x)
			case AstTypeDTimestampTZPtr:
				d = *(**DTimestampTZ)(x)
			case AstTypeDTuplePtr:
				d = *(**DTuple)(x)
			case AstTypeDUuidPtr:
				d = *(**DUuid)(x)
			case AstTypeDefaultVal:
				d = *(*DefaultVal)(x)
			case AstTypeDefaultValPtr:
				d = *(**DefaultVal)(x)
			case AstTypeFuncExprPtr:
				d = *(**FuncExpr)(x)
			case AstTypeIfErrExprPtr:
				d = *(**IfErrExpr)(x)
			case AstTypeIfExprPtr:
				d = *(**IfExpr)(x)
			case AstTypeIndexedVarPtr:
				d = *(**IndexedVar)(x)
			case AstTypeIndirectionExprPtr:
				d = *(**IndirectionExpr)(x)
			case AstTypeIsOfTypeExprPtr:
				d = *(**IsOfTypeExpr)(x)
			case AstTypeNotExprPtr:
				d = *(**NotExpr)(x)
			case AstTypeNullIfExprPtr:
				d = *(**NullIfExpr)(x)
			case AstTypeOrExprPtr:
				d = *(**OrExpr)(x)
			case AstTypeParenExprPtr:
				d = *(**ParenExpr)(x)
			case AstTypePlaceholderPtr:
				d = *(**Placeholder)(x)
			case AstTypeRangeCondPtr:
				d = *(**RangeCond)(x)
			case AstTypeSubqueryPtr:
				d = *(**Subquery)(x)
			case AstTypeTuplePtr:
				d = *(**Tuple)(x)
			case AstTypeTupleStarPtr:
				d = *(**TupleStar)(x)
			case AstTypeUnaryExprPtr:
				d = *(**UnaryExpr)(x)
			case AstTypeUnqualifiedStar:
				d = *(*UnqualifiedStar)(x)
			case AstTypeUnqualifiedStarPtr:
				d = *(**UnqualifiedStar)(x)
			case AstTypeUnresolvedNamePtr:
				d = *(**UnresolvedName)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(TypedExpr(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeTypedExpr),
	},
	AstTypeVarName: {
		Copy: func(dest, from e.Ptr) {
			*(*VarName)(dest) = *(*VarName)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*VarName)(x)
			switch d.(type) {
			case *AllColumnsSelector:
				return e.TypeId(AstTypeAllColumnsSelector)
			case *ColumnItem:
				return e.TypeId(AstTypeColumnItem)
			case *TupleStar:
				return e.TypeId(AstTypeTupleStar)
			case UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnresolvedName:
				return e.TypeId(AstTypeUnresolvedName)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d VarName
			switch AstTypeId(id) {
			case AstTypeAllColumnsSelectorPtr:
				d = *(**AllColumnsSelector)(x)
			case AstTypeColumnItemPtr:
				d = *(**ColumnItem)(x)
			case AstTypeTupleStarPtr:
				d = *(**TupleStar)(x)
			case AstTypeUnqualifiedStar:
				d = *(*UnqualifiedStar)(x)
			case AstTypeUnqualifiedStarPtr:
				d = *(**UnqualifiedStar)(x)
			case AstTypeUnresolvedNamePtr:
				d = *(**UnresolvedName)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(VarName(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeVarName),
	},
	AstTypeVariableExpr: {
		Copy: func(dest, from e.Ptr) {
			*(*VariableExpr)(dest) = *(*VariableExpr)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*VariableExpr)(x)
			switch d.(type) {
			case *AllColumnsSelector:
				return e.TypeId(AstTypeAllColumnsSelector)
			case *ColumnItem:
				return e.TypeId(AstTypeColumnItem)
			case *IndexedVar:
				return e.TypeId(AstTypeIndexedVar)
			case *Subquery:
				return e.TypeId(AstTypeSubquery)
			case UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnqualifiedStar:
				return e.TypeId(AstTypeUnqualifiedStar)
			case *UnresolvedName:
				return e.TypeId(AstTypeUnresolvedName)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d VariableExpr
			switch AstTypeId(id) {
			case AstTypeAllColumnsSelectorPtr:
				d = *(**AllColumnsSelector)(x)
			case AstTypeColumnItemPtr:
				d = *(**ColumnItem)(x)
			case AstTypeIndexedVarPtr:
				d = *(**IndexedVar)(x)
			case AstTypeSubqueryPtr:
				d = *(**Subquery)(x)
			case AstTypeUnqualifiedStar:
				d = *(*UnqualifiedStar)(x)
			case AstTypeUnqualifiedStarPtr:
				d = *(**UnqualifiedStar)(x)
			case AstTypeUnresolvedNamePtr:
				d = *(**UnresolvedName)(x)
			}
			return e.Ptr(&d)
		},
		SizeOf: unsafe.Sizeof(VariableExpr(nil)),
		Kind:   e.KindInterface,
		TypeId: e.TypeId(AstTypeVariableExpr),
	},

	// ------ Pointers ------
	AstTypeAliasClausePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AliasClause)(dest) = *(**AliasClause)(from)
		},
		Elem:   e.TypeId(AstTypeAliasClause),
		SizeOf: unsafe.Sizeof((*AliasClause)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAliasClausePtr),
	},
	AstTypeAllColumnsSelectorPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AllColumnsSelector)(dest) = *(**AllColumnsSelector)(from)
		},
		Elem:   e.TypeId(AstTypeAllColumnsSelector),
		SizeOf: unsafe.Sizeof((*AllColumnsSelector)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAllColumnsSelectorPtr),
	},
	AstTypeAlterIndexPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AlterIndex)(dest) = *(**AlterIndex)(from)
		},
		Elem:   e.TypeId(AstTypeAlterIndex),
		SizeOf: unsafe.Sizeof((*AlterIndex)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAlterIndexPtr),
	},
	AstTypeAlterSequencePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AlterSequence)(dest) = *(**AlterSequence)(from)
		},
		Elem:   e.TypeId(AstTypeAlterSequence),
		SizeOf: unsafe.Sizeof((*AlterSequence)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAlterSequencePtr),
	},
	AstTypeAlterTablePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AlterTable)(dest) = *(**AlterTable)(from)
		},
		Elem:   e.TypeId(AstTypeAlterTable),
		SizeOf: unsafe.Sizeof((*AlterTable)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAlterTablePtr),
	},
	AstTypeAlterUserSetPasswordPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AlterUserSetPassword)(dest) = *(**AlterUserSetPassword)(from)
		},
		Elem:   e.TypeId(AstTypeAlterUserSetPassword),
		SizeOf: unsafe.Sizeof((*AlterUserSetPassword)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAlterUserSetPasswordPtr),
	},
	AstTypeAndExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AndExpr)(dest) = *(**AndExpr)(from)
		},
		Elem:   e.TypeId(AstTypeAndExpr),
		SizeOf: unsafe.Sizeof((*AndExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAndExprPtr),
	},
	AstTypeAnnotateTypeExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AnnotateTypeExpr)(dest) = *(**AnnotateTypeExpr)(from)
		},
		Elem:   e.TypeId(AstTypeAnnotateTypeExpr),
		SizeOf: unsafe.Sizeof((*AnnotateTypeExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAnnotateTypeExprPtr),
	},
	AstTypeArrayPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Array)(dest) = *(**Array)(from)
		},
		Elem:   e.TypeId(AstTypeArray),
		SizeOf: unsafe.Sizeof((*Array)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeArrayPtr),
	},
	AstTypeArrayFlattenPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ArrayFlatten)(dest) = *(**ArrayFlatten)(from)
		},
		Elem:   e.TypeId(AstTypeArrayFlatten),
		SizeOf: unsafe.Sizeof((*ArrayFlatten)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeArrayFlattenPtr),
	},
	AstTypeArraySubscriptPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ArraySubscript)(dest) = *(**ArraySubscript)(from)
		},
		Elem:   e.TypeId(AstTypeArraySubscript),
		SizeOf: unsafe.Sizeof((*ArraySubscript)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeArraySubscriptPtr),
	},
	AstTypeAsOfClausePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**AsOfClause)(dest) = *(**AsOfClause)(from)
		},
		Elem:   e.TypeId(AstTypeAsOfClause),
		SizeOf: unsafe.Sizeof((*AsOfClause)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeAsOfClausePtr),
	},
	AstTypeBackupPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Backup)(dest) = *(**Backup)(from)
		},
		Elem:   e.TypeId(AstTypeBackup),
		SizeOf: unsafe.Sizeof((*Backup)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeBackupPtr),
	},
	AstTypeBeginTransactionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**BeginTransaction)(dest) = *(**BeginTransaction)(from)
		},
		Elem:   e.TypeId(AstTypeBeginTransaction),
		SizeOf: unsafe.Sizeof((*BeginTransaction)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeBeginTransactionPtr),
	},
	AstTypeBinaryExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**BinaryExpr)(dest) = *(**BinaryExpr)(from)
		},
		Elem:   e.TypeId(AstTypeBinaryExpr),
		SizeOf: unsafe.Sizeof((*BinaryExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeBinaryExprPtr),
	},
	AstTypeCTEPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CTE)(dest) = *(**CTE)(from)
		},
		Elem:   e.TypeId(AstTypeCTE),
		SizeOf: unsafe.Sizeof((*CTE)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCTEPtr),
	},
	AstTypeCancelQueriesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CancelQueries)(dest) = *(**CancelQueries)(from)
		},
		Elem:   e.TypeId(AstTypeCancelQueries),
		SizeOf: unsafe.Sizeof((*CancelQueries)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCancelQueriesPtr),
	},
	AstTypeCancelSessionsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CancelSessions)(dest) = *(**CancelSessions)(from)
		},
		Elem:   e.TypeId(AstTypeCancelSessions),
		SizeOf: unsafe.Sizeof((*CancelSessions)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCancelSessionsPtr),
	},
	AstTypeCaseExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CaseExpr)(dest) = *(**CaseExpr)(from)
		},
		Elem:   e.TypeId(AstTypeCaseExpr),
		SizeOf: unsafe.Sizeof((*CaseExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCaseExprPtr),
	},
	AstTypeCastExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CastExpr)(dest) = *(**CastExpr)(from)
		},
		Elem:   e.TypeId(AstTypeCastExpr),
		SizeOf: unsafe.Sizeof((*CastExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCastExprPtr),
	},
	AstTypeCoalesceExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CoalesceExpr)(dest) = *(**CoalesceExpr)(from)
		},
		Elem:   e.TypeId(AstTypeCoalesceExpr),
		SizeOf: unsafe.Sizeof((*CoalesceExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCoalesceExprPtr),
	},
	AstTypeCollateExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CollateExpr)(dest) = *(**CollateExpr)(from)
		},
		Elem:   e.TypeId(AstTypeCollateExpr),
		SizeOf: unsafe.Sizeof((*CollateExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCollateExprPtr),
	},
	AstTypeColumnAccessExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ColumnAccessExpr)(dest) = *(**ColumnAccessExpr)(from)
		},
		Elem:   e.TypeId(AstTypeColumnAccessExpr),
		SizeOf: unsafe.Sizeof((*ColumnAccessExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeColumnAccessExprPtr),
	},
	AstTypeColumnItemPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ColumnItem)(dest) = *(**ColumnItem)(from)
		},
		Elem:   e.TypeId(AstTypeColumnItem),
		SizeOf: unsafe.Sizeof((*ColumnItem)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeColumnItemPtr),
	},
	AstTypeCommentOnTablePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CommentOnTable)(dest) = *(**CommentOnTable)(from)
		},
		Elem:   e.TypeId(AstTypeCommentOnTable),
		SizeOf: unsafe.Sizeof((*CommentOnTable)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCommentOnTablePtr),
	},
	AstTypeCommitTransactionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CommitTransaction)(dest) = *(**CommitTransaction)(from)
		},
		Elem:   e.TypeId(AstTypeCommitTransaction),
		SizeOf: unsafe.Sizeof((*CommitTransaction)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCommitTransactionPtr),
	},
	AstTypeComparisonExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ComparisonExpr)(dest) = *(**ComparisonExpr)(from)
		},
		Elem:   e.TypeId(AstTypeComparisonExpr),
		SizeOf: unsafe.Sizeof((*ComparisonExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeComparisonExprPtr),
	},
	AstTypeControlJobsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ControlJobs)(dest) = *(**ControlJobs)(from)
		},
		Elem:   e.TypeId(AstTypeControlJobs),
		SizeOf: unsafe.Sizeof((*ControlJobs)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeControlJobsPtr),
	},
	AstTypeCopyFromPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CopyFrom)(dest) = *(**CopyFrom)(from)
		},
		Elem:   e.TypeId(AstTypeCopyFrom),
		SizeOf: unsafe.Sizeof((*CopyFrom)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCopyFromPtr),
	},
	AstTypeCreateChangefeedPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateChangefeed)(dest) = *(**CreateChangefeed)(from)
		},
		Elem:   e.TypeId(AstTypeCreateChangefeed),
		SizeOf: unsafe.Sizeof((*CreateChangefeed)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateChangefeedPtr),
	},
	AstTypeCreateDatabasePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateDatabase)(dest) = *(**CreateDatabase)(from)
		},
		Elem:   e.TypeId(AstTypeCreateDatabase),
		SizeOf: unsafe.Sizeof((*CreateDatabase)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateDatabasePtr),
	},
	AstTypeCreateIndexPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateIndex)(dest) = *(**CreateIndex)(from)
		},
		Elem:   e.TypeId(AstTypeCreateIndex),
		SizeOf: unsafe.Sizeof((*CreateIndex)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateIndexPtr),
	},
	AstTypeCreateRolePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateRole)(dest) = *(**CreateRole)(from)
		},
		Elem:   e.TypeId(AstTypeCreateRole),
		SizeOf: unsafe.Sizeof((*CreateRole)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateRolePtr),
	},
	AstTypeCreateSequencePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateSequence)(dest) = *(**CreateSequence)(from)
		},
		Elem:   e.TypeId(AstTypeCreateSequence),
		SizeOf: unsafe.Sizeof((*CreateSequence)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateSequencePtr),
	},
	AstTypeCreateStatsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateStats)(dest) = *(**CreateStats)(from)
		},
		Elem:   e.TypeId(AstTypeCreateStats),
		SizeOf: unsafe.Sizeof((*CreateStats)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateStatsPtr),
	},
	AstTypeCreateTablePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateTable)(dest) = *(**CreateTable)(from)
		},
		Elem:   e.TypeId(AstTypeCreateTable),
		SizeOf: unsafe.Sizeof((*CreateTable)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateTablePtr),
	},
	AstTypeCreateUserPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateUser)(dest) = *(**CreateUser)(from)
		},
		Elem:   e.TypeId(AstTypeCreateUser),
		SizeOf: unsafe.Sizeof((*CreateUser)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateUserPtr),
	},
	AstTypeCreateViewPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**CreateView)(dest) = *(**CreateView)(from)
		},
		Elem:   e.TypeId(AstTypeCreateView),
		SizeOf: unsafe.Sizeof((*CreateView)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeCreateViewPtr),
	},
	AstTypeDArrayPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DArray)(dest) = *(**DArray)(from)
		},
		Elem:   e.TypeId(AstTypeDArray),
		SizeOf: unsafe.Sizeof((*DArray)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDArrayPtr),
	},
	AstTypeDBitArrayPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DBitArray)(dest) = *(**DBitArray)(from)
		},
		Elem:   e.TypeId(AstTypeDBitArray),
		SizeOf: unsafe.Sizeof((*DBitArray)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDBitArrayPtr),
	},
	AstTypeDCollatedStringPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DCollatedString)(dest) = *(**DCollatedString)(from)
		},
		Elem:   e.TypeId(AstTypeDCollatedString),
		SizeOf: unsafe.Sizeof((*DCollatedString)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDCollatedStringPtr),
	},
	AstTypeDDecimalPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DDecimal)(dest) = *(**DDecimal)(from)
		},
		Elem:   e.TypeId(AstTypeDDecimal),
		SizeOf: unsafe.Sizeof((*DDecimal)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDDecimalPtr),
	},
	AstTypeDIPAddrPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DIPAddr)(dest) = *(**DIPAddr)(from)
		},
		Elem:   e.TypeId(AstTypeDIPAddr),
		SizeOf: unsafe.Sizeof((*DIPAddr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDIPAddrPtr),
	},
	AstTypeDIntervalPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DInterval)(dest) = *(**DInterval)(from)
		},
		Elem:   e.TypeId(AstTypeDInterval),
		SizeOf: unsafe.Sizeof((*DInterval)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDIntervalPtr),
	},
	AstTypeDJSONPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DJSON)(dest) = *(**DJSON)(from)
		},
		Elem:   e.TypeId(AstTypeDJSON),
		SizeOf: unsafe.Sizeof((*DJSON)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDJSONPtr),
	},
	AstTypeDOidPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DOid)(dest) = *(**DOid)(from)
		},
		Elem:   e.TypeId(AstTypeDOid),
		SizeOf: unsafe.Sizeof((*DOid)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDOidPtr),
	},
	AstTypeDOidWrapperPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DOidWrapper)(dest) = *(**DOidWrapper)(from)
		},
		Elem:   e.TypeId(AstTypeDOidWrapper),
		SizeOf: unsafe.Sizeof((*DOidWrapper)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDOidWrapperPtr),
	},
	AstTypeDTimestampPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DTimestamp)(dest) = *(**DTimestamp)(from)
		},
		Elem:   e.TypeId(AstTypeDTimestamp),
		SizeOf: unsafe.Sizeof((*DTimestamp)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDTimestampPtr),
	},
	AstTypeDTimestampTZPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DTimestampTZ)(dest) = *(**DTimestampTZ)(from)
		},
		Elem:   e.TypeId(AstTypeDTimestampTZ),
		SizeOf: unsafe.Sizeof((*DTimestampTZ)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDTimestampTZPtr),
	},
	AstTypeDTuplePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DTuple)(dest) = *(**DTuple)(from)
		},
		Elem:   e.TypeId(AstTypeDTuple),
		SizeOf: unsafe.Sizeof((*DTuple)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDTuplePtr),
	},
	AstTypeDUuidPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DUuid)(dest) = *(**DUuid)(from)
		},
		Elem:   e.TypeId(AstTypeDUuid),
		SizeOf: unsafe.Sizeof((*DUuid)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDUuidPtr),
	},
	AstTypeDeallocatePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Deallocate)(dest) = *(**Deallocate)(from)
		},
		Elem:   e.TypeId(AstTypeDeallocate),
		SizeOf: unsafe.Sizeof((*Deallocate)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDeallocatePtr),
	},
	AstTypeDefaultValPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DefaultVal)(dest) = *(**DefaultVal)(from)
		},
		Elem:   e.TypeId(AstTypeDefaultVal),
		SizeOf: unsafe.Sizeof((*DefaultVal)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDefaultValPtr),
	},
	AstTypeDeletePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Delete)(dest) = *(**Delete)(from)
		},
		Elem:   e.TypeId(AstTypeDelete),
		SizeOf: unsafe.Sizeof((*Delete)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDeletePtr),
	},
	AstTypeDiscardPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Discard)(dest) = *(**Discard)(from)
		},
		Elem:   e.TypeId(AstTypeDiscard),
		SizeOf: unsafe.Sizeof((*Discard)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDiscardPtr),
	},
	AstTypeDropDatabasePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DropDatabase)(dest) = *(**DropDatabase)(from)
		},
		Elem:   e.TypeId(AstTypeDropDatabase),
		SizeOf: unsafe.Sizeof((*DropDatabase)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDropDatabasePtr),
	},
	AstTypeDropIndexPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DropIndex)(dest) = *(**DropIndex)(from)
		},
		Elem:   e.TypeId(AstTypeDropIndex),
		SizeOf: unsafe.Sizeof((*DropIndex)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDropIndexPtr),
	},
	AstTypeDropRolePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DropRole)(dest) = *(**DropRole)(from)
		},
		Elem:   e.TypeId(AstTypeDropRole),
		SizeOf: unsafe.Sizeof((*DropRole)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDropRolePtr),
	},
	AstTypeDropSequencePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DropSequence)(dest) = *(**DropSequence)(from)
		},
		Elem:   e.TypeId(AstTypeDropSequence),
		SizeOf: unsafe.Sizeof((*DropSequence)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDropSequencePtr),
	},
	AstTypeDropTablePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DropTable)(dest) = *(**DropTable)(from)
		},
		Elem:   e.TypeId(AstTypeDropTable),
		SizeOf: unsafe.Sizeof((*DropTable)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDropTablePtr),
	},
	AstTypeDropUserPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DropUser)(dest) = *(**DropUser)(from)
		},
		Elem:   e.TypeId(AstTypeDropUser),
		SizeOf: unsafe.Sizeof((*DropUser)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDropUserPtr),
	},
	AstTypeDropViewPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**DropView)(dest) = *(**DropView)(from)
		},
		Elem:   e.TypeId(AstTypeDropView),
		SizeOf: unsafe.Sizeof((*DropView)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeDropViewPtr),
	},
	AstTypeExecutePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Execute)(dest) = *(**Execute)(from)
		},
		Elem:   e.TypeId(AstTypeExecute),
		SizeOf: unsafe.Sizeof((*Execute)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeExecutePtr),
	},
	AstTypeExplainPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Explain)(dest) = *(**Explain)(from)
		},
		Elem:   e.TypeId(AstTypeExplain),
		SizeOf: unsafe.Sizeof((*Explain)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeExplainPtr),
	},
	AstTypeExportPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Export)(dest) = *(**Export)(from)
		},
		Elem:   e.TypeId(AstTypeExport),
		SizeOf: unsafe.Sizeof((*Export)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeExportPtr),
	},
	AstTypeFromPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**From)(dest) = *(**From)(from)
		},
		Elem:   e.TypeId(AstTypeFrom),
		SizeOf: unsafe.Sizeof((*From)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeFromPtr),
	},
	AstTypeFuncExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**FuncExpr)(dest) = *(**FuncExpr)(from)
		},
		Elem:   e.TypeId(AstTypeFuncExpr),
		SizeOf: unsafe.Sizeof((*FuncExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeFuncExprPtr),
	},
	AstTypeGrantPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Grant)(dest) = *(**Grant)(from)
		},
		Elem:   e.TypeId(AstTypeGrant),
		SizeOf: unsafe.Sizeof((*Grant)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeGrantPtr),
	},
	AstTypeGrantRolePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**GrantRole)(dest) = *(**GrantRole)(from)
		},
		Elem:   e.TypeId(AstTypeGrantRole),
		SizeOf: unsafe.Sizeof((*GrantRole)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeGrantRolePtr),
	},
	AstTypeIfErrExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**IfErrExpr)(dest) = *(**IfErrExpr)(from)
		},
		Elem:   e.TypeId(AstTypeIfErrExpr),
		SizeOf: unsafe.Sizeof((*IfErrExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeIfErrExprPtr),
	},
	AstTypeIfExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**IfExpr)(dest) = *(**IfExpr)(from)
		},
		Elem:   e.TypeId(AstTypeIfExpr),
		SizeOf: unsafe.Sizeof((*IfExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeIfExprPtr),
	},
	AstTypeImportPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Import)(dest) = *(**Import)(from)
		},
		Elem:   e.TypeId(AstTypeImport),
		SizeOf: unsafe.Sizeof((*Import)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeImportPtr),
	},
	AstTypeIndexElemPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**IndexElem)(dest) = *(**IndexElem)(from)
		},
		Elem:   e.TypeId(AstTypeIndexElem),
		SizeOf: unsafe.Sizeof((*IndexElem)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeIndexElemPtr),
	},
	AstTypeIndexedVarPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**IndexedVar)(dest) = *(**IndexedVar)(from)
		},
		Elem:   e.TypeId(AstTypeIndexedVar),
		SizeOf: unsafe.Sizeof((*IndexedVar)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeIndexedVarPtr),
	},
	AstTypeIndirectionExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**IndirectionExpr)(dest) = *(**IndirectionExpr)(from)
		},
		Elem:   e.TypeId(AstTypeIndirectionExpr),
		SizeOf: unsafe.Sizeof((*IndirectionExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeIndirectionExprPtr),
	},
	AstTypeInsertPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Insert)(dest) = *(**Insert)(from)
		},
		Elem:   e.TypeId(AstTypeInsert),
		SizeOf: unsafe.Sizeof((*Insert)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeInsertPtr),
	},
	AstTypeInterleaveDefPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**InterleaveDef)(dest) = *(**InterleaveDef)(from)
		},
		Elem:   e.TypeId(AstTypeInterleaveDef),
		SizeOf: unsafe.Sizeof((*InterleaveDef)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeInterleaveDefPtr),
	},
	AstTypeIsOfTypeExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**IsOfTypeExpr)(dest) = *(**IsOfTypeExpr)(from)
		},
		Elem:   e.TypeId(AstTypeIsOfTypeExpr),
		SizeOf: unsafe.Sizeof((*IsOfTypeExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeIsOfTypeExprPtr),
	},
	AstTypeKVOptionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**KVOption)(dest) = *(**KVOption)(from)
		},
		Elem:   e.TypeId(AstTypeKVOption),
		SizeOf: unsafe.Sizeof((*KVOption)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeKVOptionPtr),
	},
	AstTypeLimitPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Limit)(dest) = *(**Limit)(from)
		},
		Elem:   e.TypeId(AstTypeLimit),
		SizeOf: unsafe.Sizeof((*Limit)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeLimitPtr),
	},
	AstTypeListPartitionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ListPartition)(dest) = *(**ListPartition)(from)
		},
		Elem:   e.TypeId(AstTypeListPartition),
		SizeOf: unsafe.Sizeof((*ListPartition)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeListPartitionPtr),
	},
	AstTypeNotExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**NotExpr)(dest) = *(**NotExpr)(from)
		},
		Elem:   e.TypeId(AstTypeNotExpr),
		SizeOf: unsafe.Sizeof((*NotExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeNotExprPtr),
	},
	AstTypeNullIfExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**NullIfExpr)(dest) = *(**NullIfExpr)(from)
		},
		Elem:   e.TypeId(AstTypeNullIfExpr),
		SizeOf: unsafe.Sizeof((*NullIfExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeNullIfExprPtr),
	},
	AstTypeNumValPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**NumVal)(dest) = *(**NumVal)(from)
		},
		Elem:   e.TypeId(AstTypeNumVal),
		SizeOf: unsafe.Sizeof((*NumVal)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeNumValPtr),
	},
	AstTypeOnConflictPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**OnConflict)(dest) = *(**OnConflict)(from)
		},
		Elem:   e.TypeId(AstTypeOnConflict),
		SizeOf: unsafe.Sizeof((*OnConflict)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeOnConflictPtr),
	},
	AstTypeOrExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**OrExpr)(dest) = *(**OrExpr)(from)
		},
		Elem:   e.TypeId(AstTypeOrExpr),
		SizeOf: unsafe.Sizeof((*OrExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeOrExprPtr),
	},
	AstTypeOrderPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Order)(dest) = *(**Order)(from)
		},
		Elem:   e.TypeId(AstTypeOrder),
		SizeOf: unsafe.Sizeof((*Order)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeOrderPtr),
	},
	AstTypeParenExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ParenExpr)(dest) = *(**ParenExpr)(from)
		},
		Elem:   e.TypeId(AstTypeParenExpr),
		SizeOf: unsafe.Sizeof((*ParenExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeParenExprPtr),
	},
	AstTypeParenSelectPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ParenSelect)(dest) = *(**ParenSelect)(from)
		},
		Elem:   e.TypeId(AstTypeParenSelect),
		SizeOf: unsafe.Sizeof((*ParenSelect)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeParenSelectPtr),
	},
	AstTypePartitionByPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**PartitionBy)(dest) = *(**PartitionBy)(from)
		},
		Elem:   e.TypeId(AstTypePartitionBy),
		SizeOf: unsafe.Sizeof((*PartitionBy)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypePartitionByPtr),
	},
	AstTypePartitionMaxValPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**PartitionMaxVal)(dest) = *(**PartitionMaxVal)(from)
		},
		Elem:   e.TypeId(AstTypePartitionMaxVal),
		SizeOf: unsafe.Sizeof((*PartitionMaxVal)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypePartitionMaxValPtr),
	},
	AstTypePartitionMinValPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**PartitionMinVal)(dest) = *(**PartitionMinVal)(from)
		},
		Elem:   e.TypeId(AstTypePartitionMinVal),
		SizeOf: unsafe.Sizeof((*PartitionMinVal)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypePartitionMinValPtr),
	},
	AstTypePlaceholderPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Placeholder)(dest) = *(**Placeholder)(from)
		},
		Elem:   e.TypeId(AstTypePlaceholder),
		SizeOf: unsafe.Sizeof((*Placeholder)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypePlaceholderPtr),
	},
	AstTypePreparePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Prepare)(dest) = *(**Prepare)(from)
		},
		Elem:   e.TypeId(AstTypePrepare),
		SizeOf: unsafe.Sizeof((*Prepare)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypePreparePtr),
	},
	AstTypeRangeCondPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RangeCond)(dest) = *(**RangeCond)(from)
		},
		Elem:   e.TypeId(AstTypeRangeCond),
		SizeOf: unsafe.Sizeof((*RangeCond)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRangeCondPtr),
	},
	AstTypeRangePartitionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RangePartition)(dest) = *(**RangePartition)(from)
		},
		Elem:   e.TypeId(AstTypeRangePartition),
		SizeOf: unsafe.Sizeof((*RangePartition)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRangePartitionPtr),
	},
	AstTypeReleaseSavepointPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ReleaseSavepoint)(dest) = *(**ReleaseSavepoint)(from)
		},
		Elem:   e.TypeId(AstTypeReleaseSavepoint),
		SizeOf: unsafe.Sizeof((*ReleaseSavepoint)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeReleaseSavepointPtr),
	},
	AstTypeRelocatePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Relocate)(dest) = *(**Relocate)(from)
		},
		Elem:   e.TypeId(AstTypeRelocate),
		SizeOf: unsafe.Sizeof((*Relocate)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRelocatePtr),
	},
	AstTypeRenameColumnPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RenameColumn)(dest) = *(**RenameColumn)(from)
		},
		Elem:   e.TypeId(AstTypeRenameColumn),
		SizeOf: unsafe.Sizeof((*RenameColumn)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRenameColumnPtr),
	},
	AstTypeRenameDatabasePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RenameDatabase)(dest) = *(**RenameDatabase)(from)
		},
		Elem:   e.TypeId(AstTypeRenameDatabase),
		SizeOf: unsafe.Sizeof((*RenameDatabase)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRenameDatabasePtr),
	},
	AstTypeRenameIndexPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RenameIndex)(dest) = *(**RenameIndex)(from)
		},
		Elem:   e.TypeId(AstTypeRenameIndex),
		SizeOf: unsafe.Sizeof((*RenameIndex)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRenameIndexPtr),
	},
	AstTypeRenameTablePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RenameTable)(dest) = *(**RenameTable)(from)
		},
		Elem:   e.TypeId(AstTypeRenameTable),
		SizeOf: unsafe.Sizeof((*RenameTable)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRenameTablePtr),
	},
	AstTypeResolvableFunctionReferencePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ResolvableFunctionReference)(dest) = *(**ResolvableFunctionReference)(from)
		},
		Elem:   e.TypeId(AstTypeResolvableFunctionReference),
		SizeOf: unsafe.Sizeof((*ResolvableFunctionReference)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeResolvableFunctionReferencePtr),
	},
	AstTypeRestorePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Restore)(dest) = *(**Restore)(from)
		},
		Elem:   e.TypeId(AstTypeRestore),
		SizeOf: unsafe.Sizeof((*Restore)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRestorePtr),
	},
	AstTypeRevokePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Revoke)(dest) = *(**Revoke)(from)
		},
		Elem:   e.TypeId(AstTypeRevoke),
		SizeOf: unsafe.Sizeof((*Revoke)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRevokePtr),
	},
	AstTypeRevokeRolePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RevokeRole)(dest) = *(**RevokeRole)(from)
		},
		Elem:   e.TypeId(AstTypeRevokeRole),
		SizeOf: unsafe.Sizeof((*RevokeRole)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRevokeRolePtr),
	},
	AstTypeRollbackToSavepointPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RollbackToSavepoint)(dest) = *(**RollbackToSavepoint)(from)
		},
		Elem:   e.TypeId(AstTypeRollbackToSavepoint),
		SizeOf: unsafe.Sizeof((*RollbackToSavepoint)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRollbackToSavepointPtr),
	},
	AstTypeRollbackTransactionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**RollbackTransaction)(dest) = *(**RollbackTransaction)(from)
		},
		Elem:   e.TypeId(AstTypeRollbackTransaction),
		SizeOf: unsafe.Sizeof((*RollbackTransaction)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeRollbackTransactionPtr),
	},
	AstTypeSavepointPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Savepoint)(dest) = *(**Savepoint)(from)
		},
		Elem:   e.TypeId(AstTypeSavepoint),
		SizeOf: unsafe.Sizeof((*Savepoint)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSavepointPtr),
	},
	AstTypeScatterPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Scatter)(dest) = *(**Scatter)(from)
		},
		Elem:   e.TypeId(AstTypeScatter),
		SizeOf: unsafe.Sizeof((*Scatter)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeScatterPtr),
	},
	AstTypeScrubPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Scrub)(dest) = *(**Scrub)(from)
		},
		Elem:   e.TypeId(AstTypeScrub),
		SizeOf: unsafe.Sizeof((*Scrub)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeScrubPtr),
	},
	AstTypeSelectPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Select)(dest) = *(**Select)(from)
		},
		Elem:   e.TypeId(AstTypeSelect),
		SizeOf: unsafe.Sizeof((*Select)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSelectPtr),
	},
	AstTypeSelectClausePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SelectClause)(dest) = *(**SelectClause)(from)
		},
		Elem:   e.TypeId(AstTypeSelectClause),
		SizeOf: unsafe.Sizeof((*SelectClause)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSelectClausePtr),
	},
	AstTypeSelectExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SelectExpr)(dest) = *(**SelectExpr)(from)
		},
		Elem:   e.TypeId(AstTypeSelectExpr),
		SizeOf: unsafe.Sizeof((*SelectExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSelectExprPtr),
	},
	AstTypeSequenceOptionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SequenceOption)(dest) = *(**SequenceOption)(from)
		},
		Elem:   e.TypeId(AstTypeSequenceOption),
		SizeOf: unsafe.Sizeof((*SequenceOption)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSequenceOptionPtr),
	},
	AstTypeSetClusterSettingPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SetClusterSetting)(dest) = *(**SetClusterSetting)(from)
		},
		Elem:   e.TypeId(AstTypeSetClusterSetting),
		SizeOf: unsafe.Sizeof((*SetClusterSetting)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSetClusterSettingPtr),
	},
	AstTypeSetSessionCharacteristicsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SetSessionCharacteristics)(dest) = *(**SetSessionCharacteristics)(from)
		},
		Elem:   e.TypeId(AstTypeSetSessionCharacteristics),
		SizeOf: unsafe.Sizeof((*SetSessionCharacteristics)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSetSessionCharacteristicsPtr),
	},
	AstTypeSetTracingPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SetTracing)(dest) = *(**SetTracing)(from)
		},
		Elem:   e.TypeId(AstTypeSetTracing),
		SizeOf: unsafe.Sizeof((*SetTracing)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSetTracingPtr),
	},
	AstTypeSetTransactionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SetTransaction)(dest) = *(**SetTransaction)(from)
		},
		Elem:   e.TypeId(AstTypeSetTransaction),
		SizeOf: unsafe.Sizeof((*SetTransaction)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSetTransactionPtr),
	},
	AstTypeSetVarPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SetVar)(dest) = *(**SetVar)(from)
		},
		Elem:   e.TypeId(AstTypeSetVar),
		SizeOf: unsafe.Sizeof((*SetVar)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSetVarPtr),
	},
	AstTypeSetZoneConfigPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**SetZoneConfig)(dest) = *(**SetZoneConfig)(from)
		},
		Elem:   e.TypeId(AstTypeSetZoneConfig),
		SizeOf: unsafe.Sizeof((*SetZoneConfig)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSetZoneConfigPtr),
	},
	AstTypeShowBackupPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowBackup)(dest) = *(**ShowBackup)(from)
		},
		Elem:   e.TypeId(AstTypeShowBackup),
		SizeOf: unsafe.Sizeof((*ShowBackup)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowBackupPtr),
	},
	AstTypeShowClusterSettingPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowClusterSetting)(dest) = *(**ShowClusterSetting)(from)
		},
		Elem:   e.TypeId(AstTypeShowClusterSetting),
		SizeOf: unsafe.Sizeof((*ShowClusterSetting)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowClusterSettingPtr),
	},
	AstTypeShowColumnsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowColumns)(dest) = *(**ShowColumns)(from)
		},
		Elem:   e.TypeId(AstTypeShowColumns),
		SizeOf: unsafe.Sizeof((*ShowColumns)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowColumnsPtr),
	},
	AstTypeShowConstraintsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowConstraints)(dest) = *(**ShowConstraints)(from)
		},
		Elem:   e.TypeId(AstTypeShowConstraints),
		SizeOf: unsafe.Sizeof((*ShowConstraints)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowConstraintsPtr),
	},
	AstTypeShowCreatePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowCreate)(dest) = *(**ShowCreate)(from)
		},
		Elem:   e.TypeId(AstTypeShowCreate),
		SizeOf: unsafe.Sizeof((*ShowCreate)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowCreatePtr),
	},
	AstTypeShowDatabasesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowDatabases)(dest) = *(**ShowDatabases)(from)
		},
		Elem:   e.TypeId(AstTypeShowDatabases),
		SizeOf: unsafe.Sizeof((*ShowDatabases)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowDatabasesPtr),
	},
	AstTypeShowFingerprintsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowFingerprints)(dest) = *(**ShowFingerprints)(from)
		},
		Elem:   e.TypeId(AstTypeShowFingerprints),
		SizeOf: unsafe.Sizeof((*ShowFingerprints)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowFingerprintsPtr),
	},
	AstTypeShowGrantsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowGrants)(dest) = *(**ShowGrants)(from)
		},
		Elem:   e.TypeId(AstTypeShowGrants),
		SizeOf: unsafe.Sizeof((*ShowGrants)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowGrantsPtr),
	},
	AstTypeShowHistogramPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowHistogram)(dest) = *(**ShowHistogram)(from)
		},
		Elem:   e.TypeId(AstTypeShowHistogram),
		SizeOf: unsafe.Sizeof((*ShowHistogram)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowHistogramPtr),
	},
	AstTypeShowIndexPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowIndex)(dest) = *(**ShowIndex)(from)
		},
		Elem:   e.TypeId(AstTypeShowIndex),
		SizeOf: unsafe.Sizeof((*ShowIndex)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowIndexPtr),
	},
	AstTypeShowJobsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowJobs)(dest) = *(**ShowJobs)(from)
		},
		Elem:   e.TypeId(AstTypeShowJobs),
		SizeOf: unsafe.Sizeof((*ShowJobs)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowJobsPtr),
	},
	AstTypeShowQueriesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowQueries)(dest) = *(**ShowQueries)(from)
		},
		Elem:   e.TypeId(AstTypeShowQueries),
		SizeOf: unsafe.Sizeof((*ShowQueries)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowQueriesPtr),
	},
	AstTypeShowRangesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowRanges)(dest) = *(**ShowRanges)(from)
		},
		Elem:   e.TypeId(AstTypeShowRanges),
		SizeOf: unsafe.Sizeof((*ShowRanges)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowRangesPtr),
	},
	AstTypeShowRoleGrantsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowRoleGrants)(dest) = *(**ShowRoleGrants)(from)
		},
		Elem:   e.TypeId(AstTypeShowRoleGrants),
		SizeOf: unsafe.Sizeof((*ShowRoleGrants)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowRoleGrantsPtr),
	},
	AstTypeShowRolesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowRoles)(dest) = *(**ShowRoles)(from)
		},
		Elem:   e.TypeId(AstTypeShowRoles),
		SizeOf: unsafe.Sizeof((*ShowRoles)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowRolesPtr),
	},
	AstTypeShowSchemasPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowSchemas)(dest) = *(**ShowSchemas)(from)
		},
		Elem:   e.TypeId(AstTypeShowSchemas),
		SizeOf: unsafe.Sizeof((*ShowSchemas)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowSchemasPtr),
	},
	AstTypeShowSessionsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowSessions)(dest) = *(**ShowSessions)(from)
		},
		Elem:   e.TypeId(AstTypeShowSessions),
		SizeOf: unsafe.Sizeof((*ShowSessions)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowSessionsPtr),
	},
	AstTypeShowSyntaxPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowSyntax)(dest) = *(**ShowSyntax)(from)
		},
		Elem:   e.TypeId(AstTypeShowSyntax),
		SizeOf: unsafe.Sizeof((*ShowSyntax)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowSyntaxPtr),
	},
	AstTypeShowTableStatsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowTableStats)(dest) = *(**ShowTableStats)(from)
		},
		Elem:   e.TypeId(AstTypeShowTableStats),
		SizeOf: unsafe.Sizeof((*ShowTableStats)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowTableStatsPtr),
	},
	AstTypeShowTablesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowTables)(dest) = *(**ShowTables)(from)
		},
		Elem:   e.TypeId(AstTypeShowTables),
		SizeOf: unsafe.Sizeof((*ShowTables)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowTablesPtr),
	},
	AstTypeShowTraceForSessionPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowTraceForSession)(dest) = *(**ShowTraceForSession)(from)
		},
		Elem:   e.TypeId(AstTypeShowTraceForSession),
		SizeOf: unsafe.Sizeof((*ShowTraceForSession)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowTraceForSessionPtr),
	},
	AstTypeShowTransactionStatusPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowTransactionStatus)(dest) = *(**ShowTransactionStatus)(from)
		},
		Elem:   e.TypeId(AstTypeShowTransactionStatus),
		SizeOf: unsafe.Sizeof((*ShowTransactionStatus)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowTransactionStatusPtr),
	},
	AstTypeShowUsersPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowUsers)(dest) = *(**ShowUsers)(from)
		},
		Elem:   e.TypeId(AstTypeShowUsers),
		SizeOf: unsafe.Sizeof((*ShowUsers)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowUsersPtr),
	},
	AstTypeShowVarPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowVar)(dest) = *(**ShowVar)(from)
		},
		Elem:   e.TypeId(AstTypeShowVar),
		SizeOf: unsafe.Sizeof((*ShowVar)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowVarPtr),
	},
	AstTypeShowZoneConfigPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ShowZoneConfig)(dest) = *(**ShowZoneConfig)(from)
		},
		Elem:   e.TypeId(AstTypeShowZoneConfig),
		SizeOf: unsafe.Sizeof((*ShowZoneConfig)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeShowZoneConfigPtr),
	},
	AstTypeSplitPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Split)(dest) = *(**Split)(from)
		},
		Elem:   e.TypeId(AstTypeSplit),
		SizeOf: unsafe.Sizeof((*Split)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSplitPtr),
	},
	AstTypeStrValPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**StrVal)(dest) = *(**StrVal)(from)
		},
		Elem:   e.TypeId(AstTypeStrVal),
		SizeOf: unsafe.Sizeof((*StrVal)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeStrValPtr),
	},
	AstTypeSubqueryPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Subquery)(dest) = *(**Subquery)(from)
		},
		Elem:   e.TypeId(AstTypeSubquery),
		SizeOf: unsafe.Sizeof((*Subquery)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeSubqueryPtr),
	},
	AstTypeTableNamePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**TableName)(dest) = *(**TableName)(from)
		},
		Elem:   e.TypeId(AstTypeTableName),
		SizeOf: unsafe.Sizeof((*TableName)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTableNamePtr),
	},
	AstTypeTableNamePrefixPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**TableNamePrefix)(dest) = *(**TableNamePrefix)(from)
		},
		Elem:   e.TypeId(AstTypeTableNamePrefix),
		SizeOf: unsafe.Sizeof((*TableNamePrefix)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTableNamePrefixPtr),
	},
	AstTypeTableNameWithIndexPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**TableNameWithIndex)(dest) = *(**TableNameWithIndex)(from)
		},
		Elem:   e.TypeId(AstTypeTableNameWithIndex),
		SizeOf: unsafe.Sizeof((*TableNameWithIndex)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTableNameWithIndexPtr),
	},
	AstTypeTargetListPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**TargetList)(dest) = *(**TargetList)(from)
		},
		Elem:   e.TypeId(AstTypeTargetList),
		SizeOf: unsafe.Sizeof((*TargetList)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTargetListPtr),
	},
	AstTypeTransactionModesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**TransactionModes)(dest) = *(**TransactionModes)(from)
		},
		Elem:   e.TypeId(AstTypeTransactionModes),
		SizeOf: unsafe.Sizeof((*TransactionModes)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTransactionModesPtr),
	},
	AstTypeTruncatePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Truncate)(dest) = *(**Truncate)(from)
		},
		Elem:   e.TypeId(AstTypeTruncate),
		SizeOf: unsafe.Sizeof((*Truncate)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTruncatePtr),
	},
	AstTypeTuplePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Tuple)(dest) = *(**Tuple)(from)
		},
		Elem:   e.TypeId(AstTypeTuple),
		SizeOf: unsafe.Sizeof((*Tuple)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTuplePtr),
	},
	AstTypeTupleStarPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**TupleStar)(dest) = *(**TupleStar)(from)
		},
		Elem:   e.TypeId(AstTypeTupleStar),
		SizeOf: unsafe.Sizeof((*TupleStar)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeTupleStarPtr),
	},
	AstTypeUnaryExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**UnaryExpr)(dest) = *(**UnaryExpr)(from)
		},
		Elem:   e.TypeId(AstTypeUnaryExpr),
		SizeOf: unsafe.Sizeof((*UnaryExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeUnaryExprPtr),
	},
	AstTypeUnionClausePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**UnionClause)(dest) = *(**UnionClause)(from)
		},
		Elem:   e.TypeId(AstTypeUnionClause),
		SizeOf: unsafe.Sizeof((*UnionClause)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeUnionClausePtr),
	},
	AstTypeUnqualifiedStarPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**UnqualifiedStar)(dest) = *(**UnqualifiedStar)(from)
		},
		Elem:   e.TypeId(AstTypeUnqualifiedStar),
		SizeOf: unsafe.Sizeof((*UnqualifiedStar)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeUnqualifiedStarPtr),
	},
	AstTypeUnresolvedNamePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**UnresolvedName)(dest) = *(**UnresolvedName)(from)
		},
		Elem:   e.TypeId(AstTypeUnresolvedName),
		SizeOf: unsafe.Sizeof((*UnresolvedName)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeUnresolvedNamePtr),
	},
	AstTypeUpdatePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Update)(dest) = *(**Update)(from)
		},
		Elem:   e.TypeId(AstTypeUpdate),
		SizeOf: unsafe.Sizeof((*Update)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeUpdatePtr),
	},
	AstTypeUpdateExprPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**UpdateExpr)(dest) = *(**UpdateExpr)(from)
		},
		Elem:   e.TypeId(AstTypeUpdateExpr),
		SizeOf: unsafe.Sizeof((*UpdateExpr)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeUpdateExprPtr),
	},
	AstTypeValuesClausePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ValuesClause)(dest) = *(**ValuesClause)(from)
		},
		Elem:   e.TypeId(AstTypeValuesClause),
		SizeOf: unsafe.Sizeof((*ValuesClause)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeValuesClausePtr),
	},
	AstTypeValuesClauseWithNamesPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ValuesClauseWithNames)(dest) = *(**ValuesClauseWithNames)(from)
		},
		Elem:   e.TypeId(AstTypeValuesClauseWithNames),
		SizeOf: unsafe.Sizeof((*ValuesClauseWithNames)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeValuesClauseWithNamesPtr),
	},
	AstTypeWhenPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**When)(dest) = *(**When)(from)
		},
		Elem:   e.TypeId(AstTypeWhen),
		SizeOf: unsafe.Sizeof((*When)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeWhenPtr),
	},
	AstTypeWherePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Where)(dest) = *(**Where)(from)
		},
		Elem:   e.TypeId(AstTypeWhere),
		SizeOf: unsafe.Sizeof((*Where)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeWherePtr),
	},
	AstTypeWindowDefPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**WindowDef)(dest) = *(**WindowDef)(from)
		},
		Elem:   e.TypeId(AstTypeWindowDef),
		SizeOf: unsafe.Sizeof((*WindowDef)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeWindowDefPtr),
	},
	AstTypeWindowFramePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**WindowFrame)(dest) = *(**WindowFrame)(from)
		},
		Elem:   e.TypeId(AstTypeWindowFrame),
		SizeOf: unsafe.Sizeof((*WindowFrame)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeWindowFramePtr),
	},
	AstTypeWindowFrameBoundPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**WindowFrameBound)(dest) = *(**WindowFrameBound)(from)
		},
		Elem:   e.TypeId(AstTypeWindowFrameBound),
		SizeOf: unsafe.Sizeof((*WindowFrameBound)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeWindowFrameBoundPtr),
	},
	AstTypeWindowFrameBoundsPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**WindowFrameBounds)(dest) = *(**WindowFrameBounds)(from)
		},
		Elem:   e.TypeId(AstTypeWindowFrameBounds),
		SizeOf: unsafe.Sizeof((*WindowFrameBounds)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeWindowFrameBoundsPtr),
	},
	AstTypeWithPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**With)(dest) = *(**With)(from)
		},
		Elem:   e.TypeId(AstTypeWith),
		SizeOf: unsafe.Sizeof((*With)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeWithPtr),
	},
	AstTypeZoneSpecifierPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ZoneSpecifier)(dest) = *(**ZoneSpecifier)(from)
		},
		Elem:   e.TypeId(AstTypeZoneSpecifier),
		SizeOf: unsafe.Sizeof((*ZoneSpecifier)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(AstTypeZoneSpecifierPtr),
	},

	// ------ Slices ------
	AstTypeArraySubscriptPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*ArraySubscript)(dest) = *(*[]*ArraySubscript)(from)
		},
		Elem: e.TypeId(AstTypeArraySubscriptPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*ArraySubscript, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*ArraySubscript)(nil)),
		TypeId: e.TypeId(AstTypeArraySubscriptPtrSlice),
	},
	AstTypeCTEPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*CTE)(dest) = *(*[]*CTE)(from)
		},
		Elem: e.TypeId(AstTypeCTEPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*CTE, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*CTE)(nil)),
		TypeId: e.TypeId(AstTypeCTEPtrSlice),
	},
	AstTypeOrderPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*Order)(dest) = *(*[]*Order)(from)
		},
		Elem: e.TypeId(AstTypeOrderPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*Order, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*Order)(nil)),
		TypeId: e.TypeId(AstTypeOrderPtrSlice),
	},
	AstTypeTableNameWithIndexPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*TableNameWithIndex)(dest) = *(*[]*TableNameWithIndex)(from)
		},
		Elem: e.TypeId(AstTypeTableNameWithIndexPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*TableNameWithIndex, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*TableNameWithIndex)(nil)),
		TypeId: e.TypeId(AstTypeTableNameWithIndexPtrSlice),
	},
	AstTypeUpdateExprPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*UpdateExpr)(dest) = *(*[]*UpdateExpr)(from)
		},
		Elem: e.TypeId(AstTypeUpdateExprPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*UpdateExpr, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*UpdateExpr)(nil)),
		TypeId: e.TypeId(AstTypeUpdateExprPtrSlice),
	},
	AstTypeWhenPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*When)(dest) = *(*[]*When)(from)
		},
		Elem: e.TypeId(AstTypeWhenPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*When, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*When)(nil)),
		TypeId: e.TypeId(AstTypeWhenPtrSlice),
	},
	AstTypeWindowDefPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*WindowDef)(dest) = *(*[]*WindowDef)(from)
		},
		Elem: e.TypeId(AstTypeWindowDefPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*WindowDef, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*WindowDef)(nil)),
		TypeId: e.TypeId(AstTypeWindowDefPtrSlice),
	},
	AstTypeAlterIndexCmdSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]AlterIndexCmd)(dest) = *(*[]AlterIndexCmd)(from)
		},
		Elem: e.TypeId(AstTypeAlterIndexCmd),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]AlterIndexCmd, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]AlterIndexCmd)(nil)),
		TypeId: e.TypeId(AstTypeAlterIndexCmdSlice),
	},
	AstTypeAlterTableCmdSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]AlterTableCmd)(dest) = *(*[]AlterTableCmd)(from)
		},
		Elem: e.TypeId(AstTypeAlterTableCmd),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]AlterTableCmd, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]AlterTableCmd)(nil)),
		TypeId: e.TypeId(AstTypeAlterTableCmdSlice),
	},
	AstTypeDatumSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]Datum)(dest) = *(*[]Datum)(from)
		},
		Elem: e.TypeId(AstTypeDatum),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]Datum, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]Datum)(nil)),
		TypeId: e.TypeId(AstTypeDatumSlice),
	},
	AstTypeExprSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]Expr)(dest) = *(*[]Expr)(from)
		},
		Elem: e.TypeId(AstTypeExpr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]Expr, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]Expr)(nil)),
		TypeId: e.TypeId(AstTypeExprSlice),
	},
	AstTypeExprSliceSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]Exprs)(dest) = *(*[]Exprs)(from)
		},
		Elem: e.TypeId(AstTypeExprSlice),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]Exprs, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]Exprs)(nil)),
		TypeId: e.TypeId(AstTypeExprSliceSlice),
	},
	AstTypeIndexElemSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]IndexElem)(dest) = *(*[]IndexElem)(from)
		},
		Elem: e.TypeId(AstTypeIndexElem),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]IndexElem, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]IndexElem)(nil)),
		TypeId: e.TypeId(AstTypeIndexElemSlice),
	},
	AstTypeKVOptionSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]KVOption)(dest) = *(*[]KVOption)(from)
		},
		Elem: e.TypeId(AstTypeKVOption),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]KVOption, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]KVOption)(nil)),
		TypeId: e.TypeId(AstTypeKVOptionSlice),
	},
	AstTypeListPartitionSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]ListPartition)(dest) = *(*[]ListPartition)(from)
		},
		Elem: e.TypeId(AstTypeListPartition),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]ListPartition, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]ListPartition)(nil)),
		TypeId: e.TypeId(AstTypeListPartitionSlice),
	},
	AstTypeRangePartitionSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]RangePartition)(dest) = *(*[]RangePartition)(from)
		},
		Elem: e.TypeId(AstTypeRangePartition),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]RangePartition, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]RangePartition)(nil)),
		TypeId: e.TypeId(AstTypeRangePartitionSlice),
	},
	AstTypeScrubOptionSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]ScrubOption)(dest) = *(*[]ScrubOption)(from)
		},
		Elem: e.TypeId(AstTypeScrubOption),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]ScrubOption, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]ScrubOption)(nil)),
		TypeId: e.TypeId(AstTypeScrubOptionSlice),
	},
	AstTypeSelectExprSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]SelectExpr)(dest) = *(*[]SelectExpr)(from)
		},
		Elem: e.TypeId(AstTypeSelectExpr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]SelectExpr, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]SelectExpr)(nil)),
		TypeId: e.TypeId(AstTypeSelectExprSlice),
	},
	AstTypeSequenceOptionSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]SequenceOption)(dest) = *(*[]SequenceOption)(from)
		},
		Elem: e.TypeId(AstTypeSequenceOption),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]SequenceOption, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]SequenceOption)(nil)),
		TypeId: e.TypeId(AstTypeSequenceOptionSlice),
	},
	AstTypeTableDefSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]TableDef)(dest) = *(*[]TableDef)(from)
		},
		Elem: e.TypeId(AstTypeTableDef),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]TableDef, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]TableDef)(nil)),
		TypeId: e.TypeId(AstTypeTableDefSlice),
	},
	AstTypeTableExprSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]TableExpr)(dest) = *(*[]TableExpr)(from)
		},
		Elem: e.TypeId(AstTypeTableExpr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]TableExpr, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]TableExpr)(nil)),
		TypeId: e.TypeId(AstTypeTableExprSlice),
	},
	AstTypeTableNameSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]TableName)(dest) = *(*[]TableName)(from)
		},
		Elem: e.TypeId(AstTypeTableName),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]TableName, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]TableName)(nil)),
		TypeId: e.TypeId(AstTypeTableNameSlice),
	},
	AstTypeTablePatternSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]TablePattern)(dest) = *(*[]TablePattern)(from)
		},
		Elem: e.TypeId(AstTypeTablePattern),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]TablePattern, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]TablePattern)(nil)),
		TypeId: e.TypeId(AstTypeTablePatternSlice),
	},
})

// These are lightweight type tokens.
const (
	_ AstTypeId = iota
	AstTypeAliasClause
	AstTypeAliasClausePtr
	AstTypeAllColumnsSelector
	AstTypeAllColumnsSelectorPtr
	AstTypeAlterIndex
	AstTypeAlterIndexCmd
	AstTypeAlterIndexCmdSlice
	AstTypeAlterIndexPtr
	AstTypeAlterSequence
	AstTypeAlterSequencePtr
	AstTypeAlterTable
	AstTypeAlterTableCmd
	AstTypeAlterTableCmdSlice
	AstTypeAlterTablePtr
	AstTypeAlterUserSetPassword
	AstTypeAlterUserSetPasswordPtr
	AstTypeAndExpr
	AstTypeAndExprPtr
	AstTypeAnnotateTypeExpr
	AstTypeAnnotateTypeExprPtr
	AstTypeArray
	AstTypeArrayFlatten
	AstTypeArrayFlattenPtr
	AstTypeArrayPtr
	AstTypeArraySubscript
	AstTypeArraySubscriptPtr
	AstTypeArraySubscriptPtrSlice
	AstTypeAsOfClause
	AstTypeAsOfClausePtr
	AstTypeAst
	AstTypeBackup
	AstTypeBackupPtr
	AstTypeBeginTransaction
	AstTypeBeginTransactionPtr
	AstTypeBinaryExpr
	AstTypeBinaryExprPtr
	AstTypeCTE
	AstTypeCTEPtr
	AstTypeCTEPtrSlice
	AstTypeCancelQueries
	AstTypeCancelQueriesPtr
	AstTypeCancelSessions
	AstTypeCancelSessionsPtr
	AstTypeCaseExpr
	AstTypeCaseExprPtr
	AstTypeCastExpr
	AstTypeCastExprPtr
	AstTypeCoalesceExpr
	AstTypeCoalesceExprPtr
	AstTypeCollateExpr
	AstTypeCollateExprPtr
	AstTypeColumnAccessExpr
	AstTypeColumnAccessExprPtr
	AstTypeColumnItem
	AstTypeColumnItemPtr
	AstTypeCommentOnTable
	AstTypeCommentOnTablePtr
	AstTypeCommitTransaction
	AstTypeCommitTransactionPtr
	AstTypeComparisonExpr
	AstTypeComparisonExprPtr
	AstTypeCompositeDatum
	AstTypeConstant
	AstTypeControlJobs
	AstTypeControlJobsPtr
	AstTypeCopyFrom
	AstTypeCopyFromPtr
	AstTypeCreateChangefeed
	AstTypeCreateChangefeedPtr
	AstTypeCreateDatabase
	AstTypeCreateDatabasePtr
	AstTypeCreateIndex
	AstTypeCreateIndexPtr
	AstTypeCreateRole
	AstTypeCreateRolePtr
	AstTypeCreateSequence
	AstTypeCreateSequencePtr
	AstTypeCreateStats
	AstTypeCreateStatsPtr
	AstTypeCreateTable
	AstTypeCreateTablePtr
	AstTypeCreateUser
	AstTypeCreateUserPtr
	AstTypeCreateView
	AstTypeCreateViewPtr
	AstTypeDArray
	AstTypeDArrayPtr
	AstTypeDBitArray
	AstTypeDBitArrayPtr
	AstTypeDCollatedString
	AstTypeDCollatedStringPtr
	AstTypeDDecimal
	AstTypeDDecimalPtr
	AstTypeDIPAddr
	AstTypeDIPAddrPtr
	AstTypeDInterval
	AstTypeDIntervalPtr
	AstTypeDJSON
	AstTypeDJSONPtr
	AstTypeDOid
	AstTypeDOidPtr
	AstTypeDOidWrapper
	AstTypeDOidWrapperPtr
	AstTypeDTimestamp
	AstTypeDTimestampPtr
	AstTypeDTimestampTZ
	AstTypeDTimestampTZPtr
	AstTypeDTuple
	AstTypeDTuplePtr
	AstTypeDUuid
	AstTypeDUuidPtr
	AstTypeDatum
	AstTypeDatumSlice
	AstTypeDeallocate
	AstTypeDeallocatePtr
	AstTypeDefaultVal
	AstTypeDefaultValPtr
	AstTypeDelete
	AstTypeDeletePtr
	AstTypeDiscard
	AstTypeDiscardPtr
	AstTypeDropDatabase
	AstTypeDropDatabasePtr
	AstTypeDropIndex
	AstTypeDropIndexPtr
	AstTypeDropRole
	AstTypeDropRolePtr
	AstTypeDropSequence
	AstTypeDropSequencePtr
	AstTypeDropTable
	AstTypeDropTablePtr
	AstTypeDropUser
	AstTypeDropUserPtr
	AstTypeDropView
	AstTypeDropViewPtr
	AstTypeExecute
	AstTypeExecutePtr
	AstTypeExplain
	AstTypeExplainPtr
	AstTypeExport
	AstTypeExportPtr
	AstTypeExpr
	AstTypeExprSlice
	AstTypeExprSliceSlice
	AstTypeFrom
	AstTypeFromPtr
	AstTypeFuncExpr
	AstTypeFuncExprPtr
	AstTypeFunctionReference
	AstTypeGrant
	AstTypeGrantPtr
	AstTypeGrantRole
	AstTypeGrantRolePtr
	AstTypeIfErrExpr
	AstTypeIfErrExprPtr
	AstTypeIfExpr
	AstTypeIfExprPtr
	AstTypeImport
	AstTypeImportPtr
	AstTypeIndexElem
	AstTypeIndexElemPtr
	AstTypeIndexElemSlice
	AstTypeIndexedVar
	AstTypeIndexedVarPtr
	AstTypeIndirectionExpr
	AstTypeIndirectionExprPtr
	AstTypeInsert
	AstTypeInsertPtr
	AstTypeInterleaveDef
	AstTypeInterleaveDefPtr
	AstTypeIsOfTypeExpr
	AstTypeIsOfTypeExprPtr
	AstTypeKVOption
	AstTypeKVOptionPtr
	AstTypeKVOptionSlice
	AstTypeLimit
	AstTypeLimitPtr
	AstTypeListPartition
	AstTypeListPartitionPtr
	AstTypeListPartitionSlice
	AstTypeNotExpr
	AstTypeNotExprPtr
	AstTypeNullIfExpr
	AstTypeNullIfExprPtr
	AstTypeNumVal
	AstTypeNumValPtr
	AstTypeOnConflict
	AstTypeOnConflictPtr
	AstTypeOrExpr
	AstTypeOrExprPtr
	AstTypeOrder
	AstTypeOrderPtr
	AstTypeOrderPtrSlice
	AstTypeParenExpr
	AstTypeParenExprPtr
	AstTypeParenSelect
	AstTypeParenSelectPtr
	AstTypePartitionBy
	AstTypePartitionByPtr
	AstTypePartitionMaxVal
	AstTypePartitionMaxValPtr
	AstTypePartitionMinVal
	AstTypePartitionMinValPtr
	AstTypePlaceholder
	AstTypePlaceholderPtr
	AstTypePrepare
	AstTypePreparePtr
	AstTypeRangeCond
	AstTypeRangeCondPtr
	AstTypeRangePartition
	AstTypeRangePartitionPtr
	AstTypeRangePartitionSlice
	AstTypeReleaseSavepoint
	AstTypeReleaseSavepointPtr
	AstTypeRelocate
	AstTypeRelocatePtr
	AstTypeRenameColumn
	AstTypeRenameColumnPtr
	AstTypeRenameDatabase
	AstTypeRenameDatabasePtr
	AstTypeRenameIndex
	AstTypeRenameIndexPtr
	AstTypeRenameTable
	AstTypeRenameTablePtr
	AstTypeResolvableFunctionReference
	AstTypeResolvableFunctionReferencePtr
	AstTypeRestore
	AstTypeRestorePtr
	AstTypeReturningClause
	AstTypeRevoke
	AstTypeRevokePtr
	AstTypeRevokeRole
	AstTypeRevokeRolePtr
	AstTypeRollbackToSavepoint
	AstTypeRollbackToSavepointPtr
	AstTypeRollbackTransaction
	AstTypeRollbackTransactionPtr
	AstTypeSavepoint
	AstTypeSavepointPtr
	AstTypeScatter
	AstTypeScatterPtr
	AstTypeScrub
	AstTypeScrubOption
	AstTypeScrubOptionSlice
	AstTypeScrubPtr
	AstTypeSelect
	AstTypeSelectClause
	AstTypeSelectClausePtr
	AstTypeSelectExpr
	AstTypeSelectExprPtr
	AstTypeSelectExprSlice
	AstTypeSelectPtr
	AstTypeSelectStatement
	AstTypeSequenceOption
	AstTypeSequenceOptionPtr
	AstTypeSequenceOptionSlice
	AstTypeSetClusterSetting
	AstTypeSetClusterSettingPtr
	AstTypeSetSessionCharacteristics
	AstTypeSetSessionCharacteristicsPtr
	AstTypeSetTracing
	AstTypeSetTracingPtr
	AstTypeSetTransaction
	AstTypeSetTransactionPtr
	AstTypeSetVar
	AstTypeSetVarPtr
	AstTypeSetZoneConfig
	AstTypeSetZoneConfigPtr
	AstTypeShowBackup
	AstTypeShowBackupPtr
	AstTypeShowClusterSetting
	AstTypeShowClusterSettingPtr
	AstTypeShowColumns
	AstTypeShowColumnsPtr
	AstTypeShowConstraints
	AstTypeShowConstraintsPtr
	AstTypeShowCreate
	AstTypeShowCreatePtr
	AstTypeShowDatabases
	AstTypeShowDatabasesPtr
	AstTypeShowFingerprints
	AstTypeShowFingerprintsPtr
	AstTypeShowGrants
	AstTypeShowGrantsPtr
	AstTypeShowHistogram
	AstTypeShowHistogramPtr
	AstTypeShowIndex
	AstTypeShowIndexPtr
	AstTypeShowJobs
	AstTypeShowJobsPtr
	AstTypeShowQueries
	AstTypeShowQueriesPtr
	AstTypeShowRanges
	AstTypeShowRangesPtr
	AstTypeShowRoleGrants
	AstTypeShowRoleGrantsPtr
	AstTypeShowRoles
	AstTypeShowRolesPtr
	AstTypeShowSchemas
	AstTypeShowSchemasPtr
	AstTypeShowSessions
	AstTypeShowSessionsPtr
	AstTypeShowSyntax
	AstTypeShowSyntaxPtr
	AstTypeShowTableStats
	AstTypeShowTableStatsPtr
	AstTypeShowTables
	AstTypeShowTablesPtr
	AstTypeShowTraceForSession
	AstTypeShowTraceForSessionPtr
	AstTypeShowTransactionStatus
	AstTypeShowTransactionStatusPtr
	AstTypeShowUsers
	AstTypeShowUsersPtr
	AstTypeShowVar
	AstTypeShowVarPtr
	AstTypeShowZoneConfig
	AstTypeShowZoneConfigPtr
	AstTypeSplit
	AstTypeSplitPtr
	AstTypeStatement
	AstTypeStrVal
	AstTypeStrValPtr
	AstTypeSubquery
	AstTypeSubqueryPtr
	AstTypeTableDef
	AstTypeTableDefSlice
	AstTypeTableExpr
	AstTypeTableExprSlice
	AstTypeTableName
	AstTypeTableNamePrefix
	AstTypeTableNamePrefixPtr
	AstTypeTableNamePtr
	AstTypeTableNameSlice
	AstTypeTableNameWithIndex
	AstTypeTableNameWithIndexPtr
	AstTypeTableNameWithIndexPtrSlice
	AstTypeTablePattern
	AstTypeTablePatternSlice
	AstTypeTargetList
	AstTypeTargetListPtr
	AstTypeTransactionModes
	AstTypeTransactionModesPtr
	AstTypeTruncate
	AstTypeTruncatePtr
	AstTypeTuple
	AstTypeTuplePtr
	AstTypeTupleStar
	AstTypeTupleStarPtr
	AstTypeTypedExpr
	AstTypeUnaryExpr
	AstTypeUnaryExprPtr
	AstTypeUnionClause
	AstTypeUnionClausePtr
	AstTypeUnqualifiedStar
	AstTypeUnqualifiedStarPtr
	AstTypeUnresolvedName
	AstTypeUnresolvedNamePtr
	AstTypeUpdate
	AstTypeUpdateExpr
	AstTypeUpdateExprPtr
	AstTypeUpdateExprPtrSlice
	AstTypeUpdatePtr
	AstTypeValuesClause
	AstTypeValuesClausePtr
	AstTypeValuesClauseWithNames
	AstTypeValuesClauseWithNamesPtr
	AstTypeVarName
	AstTypeVariableExpr
	AstTypeWhen
	AstTypeWhenPtr
	AstTypeWhenPtrSlice
	AstTypeWhere
	AstTypeWherePtr
	AstTypeWindowDef
	AstTypeWindowDefPtr
	AstTypeWindowDefPtrSlice
	AstTypeWindowFrame
	AstTypeWindowFrameBound
	AstTypeWindowFrameBoundPtr
	AstTypeWindowFrameBounds
	AstTypeWindowFrameBoundsPtr
	AstTypeWindowFramePtr
	AstTypeWith
	AstTypeWithPtr
	AstTypeZoneSpecifier
	AstTypeZoneSpecifierPtr
)

var astTypeIdNames = [...]string{
	"<NIL>",
	"AliasClause",
	"*AliasClause",
	"AllColumnsSelector",
	"*AllColumnsSelector",
	"AlterIndex",
	"AlterIndexCmd",
	"AlterIndexCmds",
	"*AlterIndex",
	"AlterSequence",
	"*AlterSequence",
	"AlterTable",
	"AlterTableCmd",
	"AlterTableCmds",
	"*AlterTable",
	"AlterUserSetPassword",
	"*AlterUserSetPassword",
	"AndExpr",
	"*AndExpr",
	"AnnotateTypeExpr",
	"*AnnotateTypeExpr",
	"Array",
	"ArrayFlatten",
	"*ArrayFlatten",
	"*Array",
	"ArraySubscript",
	"*ArraySubscript",
	"ArraySubscripts",
	"AsOfClause",
	"*AsOfClause",
	"Ast",
	"Backup",
	"*Backup",
	"BeginTransaction",
	"*BeginTransaction",
	"BinaryExpr",
	"*BinaryExpr",
	"CTE",
	"*CTE",
	"[]*CTE",
	"CancelQueries",
	"*CancelQueries",
	"CancelSessions",
	"*CancelSessions",
	"CaseExpr",
	"*CaseExpr",
	"CastExpr",
	"*CastExpr",
	"CoalesceExpr",
	"*CoalesceExpr",
	"CollateExpr",
	"*CollateExpr",
	"ColumnAccessExpr",
	"*ColumnAccessExpr",
	"ColumnItem",
	"*ColumnItem",
	"CommentOnTable",
	"*CommentOnTable",
	"CommitTransaction",
	"*CommitTransaction",
	"ComparisonExpr",
	"*ComparisonExpr",
	"CompositeDatum",
	"Constant",
	"ControlJobs",
	"*ControlJobs",
	"CopyFrom",
	"*CopyFrom",
	"CreateChangefeed",
	"*CreateChangefeed",
	"CreateDatabase",
	"*CreateDatabase",
	"CreateIndex",
	"*CreateIndex",
	"CreateRole",
	"*CreateRole",
	"CreateSequence",
	"*CreateSequence",
	"CreateStats",
	"*CreateStats",
	"CreateTable",
	"*CreateTable",
	"CreateUser",
	"*CreateUser",
	"CreateView",
	"*CreateView",
	"DArray",
	"*DArray",
	"DBitArray",
	"*DBitArray",
	"DCollatedString",
	"*DCollatedString",
	"DDecimal",
	"*DDecimal",
	"DIPAddr",
	"*DIPAddr",
	"DInterval",
	"*DInterval",
	"DJSON",
	"*DJSON",
	"DOid",
	"*DOid",
	"DOidWrapper",
	"*DOidWrapper",
	"DTimestamp",
	"*DTimestamp",
	"DTimestampTZ",
	"*DTimestampTZ",
	"DTuple",
	"*DTuple",
	"DUuid",
	"*DUuid",
	"Datum",
	"Datums",
	"Deallocate",
	"*Deallocate",
	"DefaultVal",
	"*DefaultVal",
	"Delete",
	"*Delete",
	"Discard",
	"*Discard",
	"DropDatabase",
	"*DropDatabase",
	"DropIndex",
	"*DropIndex",
	"DropRole",
	"*DropRole",
	"DropSequence",
	"*DropSequence",
	"DropTable",
	"*DropTable",
	"DropUser",
	"*DropUser",
	"DropView",
	"*DropView",
	"Execute",
	"*Execute",
	"Explain",
	"*Explain",
	"Export",
	"*Export",
	"Expr",
	"Exprs",
	"[]Exprs",
	"From",
	"*From",
	"FuncExpr",
	"*FuncExpr",
	"FunctionReference",
	"Grant",
	"*Grant",
	"GrantRole",
	"*GrantRole",
	"IfErrExpr",
	"*IfErrExpr",
	"IfExpr",
	"*IfExpr",
	"Import",
	"*Import",
	"IndexElem",
	"*IndexElem",
	"IndexElemList",
	"IndexedVar",
	"*IndexedVar",
	"IndirectionExpr",
	"*IndirectionExpr",
	"Insert",
	"*Insert",
	"InterleaveDef",
	"*InterleaveDef",
	"IsOfTypeExpr",
	"*IsOfTypeExpr",
	"KVOption",
	"*KVOption",
	"KVOptions",
	"Limit",
	"*Limit",
	"ListPartition",
	"*ListPartition",
	"[]ListPartition",
	"NotExpr",
	"*NotExpr",
	"NullIfExpr",
	"*NullIfExpr",
	"NumVal",
	"*NumVal",
	"OnConflict",
	"*OnConflict",
	"OrExpr",
	"*OrExpr",
	"Order",
	"*Order",
	"OrderBy",
	"ParenExpr",
	"*ParenExpr",
	"ParenSelect",
	"*ParenSelect",
	"PartitionBy",
	"*PartitionBy",
	"PartitionMaxVal",
	"*PartitionMaxVal",
	"PartitionMinVal",
	"*PartitionMinVal",
	"Placeholder",
	"*Placeholder",
	"Prepare",
	"*Prepare",
	"RangeCond",
	"*RangeCond",
	"RangePartition",
	"*RangePartition",
	"[]RangePartition",
	"ReleaseSavepoint",
	"*ReleaseSavepoint",
	"Relocate",
	"*Relocate",
	"RenameColumn",
	"*RenameColumn",
	"RenameDatabase",
	"*RenameDatabase",
	"RenameIndex",
	"*RenameIndex",
	"RenameTable",
	"*RenameTable",
	"ResolvableFunctionReference",
	"*ResolvableFunctionReference",
	"Restore",
	"*Restore",
	"ReturningClause",
	"Revoke",
	"*Revoke",
	"RevokeRole",
	"*RevokeRole",
	"RollbackToSavepoint",
	"*RollbackToSavepoint",
	"RollbackTransaction",
	"*RollbackTransaction",
	"Savepoint",
	"*Savepoint",
	"Scatter",
	"*Scatter",
	"Scrub",
	"ScrubOption",
	"ScrubOptions",
	"*Scrub",
	"Select",
	"SelectClause",
	"*SelectClause",
	"SelectExpr",
	"*SelectExpr",
	"SelectExprs",
	"*Select",
	"SelectStatement",
	"SequenceOption",
	"*SequenceOption",
	"SequenceOptions",
	"SetClusterSetting",
	"*SetClusterSetting",
	"SetSessionCharacteristics",
	"*SetSessionCharacteristics",
	"SetTracing",
	"*SetTracing",
	"SetTransaction",
	"*SetTransaction",
	"SetVar",
	"*SetVar",
	"SetZoneConfig",
	"*SetZoneConfig",
	"ShowBackup",
	"*ShowBackup",
	"ShowClusterSetting",
	"*ShowClusterSetting",
	"ShowColumns",
	"*ShowColumns",
	"ShowConstraints",
	"*ShowConstraints",
	"ShowCreate",
	"*ShowCreate",
	"ShowDatabases",
	"*ShowDatabases",
	"ShowFingerprints",
	"*ShowFingerprints",
	"ShowGrants",
	"*ShowGrants",
	"ShowHistogram",
	"*ShowHistogram",
	"ShowIndex",
	"*ShowIndex",
	"ShowJobs",
	"*ShowJobs",
	"ShowQueries",
	"*ShowQueries",
	"ShowRanges",
	"*ShowRanges",
	"ShowRoleGrants",
	"*ShowRoleGrants",
	"ShowRoles",
	"*ShowRoles",
	"ShowSchemas",
	"*ShowSchemas",
	"ShowSessions",
	"*ShowSessions",
	"ShowSyntax",
	"*ShowSyntax",
	"ShowTableStats",
	"*ShowTableStats",
	"ShowTables",
	"*ShowTables",
	"ShowTraceForSession",
	"*ShowTraceForSession",
	"ShowTransactionStatus",
	"*ShowTransactionStatus",
	"ShowUsers",
	"*ShowUsers",
	"ShowVar",
	"*ShowVar",
	"ShowZoneConfig",
	"*ShowZoneConfig",
	"Split",
	"*Split",
	"Statement",
	"StrVal",
	"*StrVal",
	"Subquery",
	"*Subquery",
	"TableDef",
	"TableDefs",
	"TableExpr",
	"TableExprs",
	"TableName",
	"TableNamePrefix",
	"*TableNamePrefix",
	"*TableName",
	"TableNames",
	"TableNameWithIndex",
	"*TableNameWithIndex",
	"TableNameWithIndexList",
	"TablePattern",
	"TablePatterns",
	"TargetList",
	"*TargetList",
	"TransactionModes",
	"*TransactionModes",
	"Truncate",
	"*Truncate",
	"Tuple",
	"*Tuple",
	"TupleStar",
	"*TupleStar",
	"TypedExpr",
	"UnaryExpr",
	"*UnaryExpr",
	"UnionClause",
	"*UnionClause",
	"UnqualifiedStar",
	"*UnqualifiedStar",
	"UnresolvedName",
	"*UnresolvedName",
	"Update",
	"UpdateExpr",
	"*UpdateExpr",
	"UpdateExprs",
	"*Update",
	"ValuesClause",
	"*ValuesClause",
	"ValuesClauseWithNames",
	"*ValuesClauseWithNames",
	"VarName",
	"VariableExpr",
	"When",
	"*When",
	"[]*When",
	"Where",
	"*Where",
	"WindowDef",
	"*WindowDef",
	"Window",
	"WindowFrame",
	"WindowFrameBound",
	"*WindowFrameBound",
	"WindowFrameBounds",
	"*WindowFrameBounds",
	"*WindowFrame",
	"With",
	"*With",
	"ZoneSpecifier",
	"*ZoneSpecifier",
}

// String is for debugging use only.
func (t AstTypeId) String() string {
	return astTypeIdNames[t]
}

type Ast interface {
	AstAbstract
	isAstType()
}

var (
	_ Ast = &AliasClause{}
	_ Ast = &AllColumnsSelector{}
	_ Ast = &AlterIndex{}
	_ Ast = &AlterSequence{}
	_ Ast = &AlterTable{}
	_ Ast = &AlterUserSetPassword{}
	_ Ast = &AndExpr{}
	_ Ast = &AnnotateTypeExpr{}
	_ Ast = &Array{}
	_ Ast = &ArrayFlatten{}
	_ Ast = &ArraySubscript{}
	_ Ast = &AsOfClause{}
	_ Ast = &Backup{}
	_ Ast = &BeginTransaction{}
	_ Ast = &BinaryExpr{}
	_ Ast = &CTE{}
	_ Ast = &CancelQueries{}
	_ Ast = &CancelSessions{}
	_ Ast = &CaseExpr{}
	_ Ast = &CastExpr{}
	_ Ast = &CoalesceExpr{}
	_ Ast = &CollateExpr{}
	_ Ast = &ColumnAccessExpr{}
	_ Ast = &ColumnItem{}
	_ Ast = &CommentOnTable{}
	_ Ast = &CommitTransaction{}
	_ Ast = &ComparisonExpr{}
	_ Ast = &ControlJobs{}
	_ Ast = &CopyFrom{}
	_ Ast = &CreateChangefeed{}
	_ Ast = &CreateDatabase{}
	_ Ast = &CreateIndex{}
	_ Ast = &CreateRole{}
	_ Ast = &CreateSequence{}
	_ Ast = &CreateStats{}
	_ Ast = &CreateTable{}
	_ Ast = &CreateUser{}
	_ Ast = &CreateView{}
	_ Ast = &DArray{}
	_ Ast = &DBitArray{}
	_ Ast = &DCollatedString{}
	_ Ast = &DDecimal{}
	_ Ast = &DIPAddr{}
	_ Ast = &DInterval{}
	_ Ast = &DJSON{}
	_ Ast = &DOid{}
	_ Ast = &DOidWrapper{}
	_ Ast = &DTimestamp{}
	_ Ast = &DTimestampTZ{}
	_ Ast = &DTuple{}
	_ Ast = &DUuid{}
	_ Ast = &Deallocate{}
	_ Ast = &DefaultVal{}
	_ Ast = &Delete{}
	_ Ast = &Discard{}
	_ Ast = &DropDatabase{}
	_ Ast = &DropIndex{}
	_ Ast = &DropRole{}
	_ Ast = &DropSequence{}
	_ Ast = &DropTable{}
	_ Ast = &DropUser{}
	_ Ast = &DropView{}
	_ Ast = &Execute{}
	_ Ast = &Explain{}
	_ Ast = &Export{}
	_ Ast = &From{}
	_ Ast = &FuncExpr{}
	_ Ast = &Grant{}
	_ Ast = &GrantRole{}
	_ Ast = &IfErrExpr{}
	_ Ast = &IfExpr{}
	_ Ast = &Import{}
	_ Ast = &IndexElem{}
	_ Ast = &IndexedVar{}
	_ Ast = &IndirectionExpr{}
	_ Ast = &Insert{}
	_ Ast = &InterleaveDef{}
	_ Ast = &IsOfTypeExpr{}
	_ Ast = &KVOption{}
	_ Ast = &Limit{}
	_ Ast = &ListPartition{}
	_ Ast = &NotExpr{}
	_ Ast = &NullIfExpr{}
	_ Ast = &NumVal{}
	_ Ast = &OnConflict{}
	_ Ast = &OrExpr{}
	_ Ast = &Order{}
	_ Ast = &ParenExpr{}
	_ Ast = &ParenSelect{}
	_ Ast = &PartitionBy{}
	_ Ast = &PartitionMaxVal{}
	_ Ast = &PartitionMinVal{}
	_ Ast = &Placeholder{}
	_ Ast = &Prepare{}
	_ Ast = &RangeCond{}
	_ Ast = &RangePartition{}
	_ Ast = &ReleaseSavepoint{}
	_ Ast = &Relocate{}
	_ Ast = &RenameColumn{}
	_ Ast = &RenameDatabase{}
	_ Ast = &RenameIndex{}
	_ Ast = &RenameTable{}
	_ Ast = &ResolvableFunctionReference{}
	_ Ast = &Restore{}
	_ Ast = &Revoke{}
	_ Ast = &RevokeRole{}
	_ Ast = &RollbackToSavepoint{}
	_ Ast = &RollbackTransaction{}
	_ Ast = &Savepoint{}
	_ Ast = &Scatter{}
	_ Ast = &Scrub{}
	_ Ast = &Select{}
	_ Ast = &SelectClause{}
	_ Ast = &SelectExpr{}
	_ Ast = &SequenceOption{}
	_ Ast = &SetClusterSetting{}
	_ Ast = &SetSessionCharacteristics{}
	_ Ast = &SetTracing{}
	_ Ast = &SetTransaction{}
	_ Ast = &SetVar{}
	_ Ast = &SetZoneConfig{}
	_ Ast = &ShowBackup{}
	_ Ast = &ShowClusterSetting{}
	_ Ast = &ShowColumns{}
	_ Ast = &ShowConstraints{}
	_ Ast = &ShowCreate{}
	_ Ast = &ShowDatabases{}
	_ Ast = &ShowFingerprints{}
	_ Ast = &ShowGrants{}
	_ Ast = &ShowHistogram{}
	_ Ast = &ShowIndex{}
	_ Ast = &ShowJobs{}
	_ Ast = &ShowQueries{}
	_ Ast = &ShowRanges{}
	_ Ast = &ShowRoleGrants{}
	_ Ast = &ShowRoles{}
	_ Ast = &ShowSchemas{}
	_ Ast = &ShowSessions{}
	_ Ast = &ShowSyntax{}
	_ Ast = &ShowTableStats{}
	_ Ast = &ShowTables{}
	_ Ast = &ShowTraceForSession{}
	_ Ast = &ShowTransactionStatus{}
	_ Ast = &ShowUsers{}
	_ Ast = &ShowVar{}
	_ Ast = &ShowZoneConfig{}
	_ Ast = &Split{}
	_ Ast = &StrVal{}
	_ Ast = &Subquery{}
	_ Ast = &TableName{}
	_ Ast = &TableNamePrefix{}
	_ Ast = &TableNameWithIndex{}
	_ Ast = &TargetList{}
	_ Ast = &TransactionModes{}
	_ Ast = &Truncate{}
	_ Ast = &Tuple{}
	_ Ast = &TupleStar{}
	_ Ast = &UnaryExpr{}
	_ Ast = &UnionClause{}
	_ Ast = &UnqualifiedStar{}
	_ Ast = &UnresolvedName{}
	_ Ast = &Update{}
	_ Ast = &UpdateExpr{}
	_ Ast = &ValuesClause{}
	_ Ast = &ValuesClauseWithNames{}
	_ Ast = &When{}
	_ Ast = &Where{}
	_ Ast = &WindowDef{}
	_ Ast = &WindowFrame{}
	_ Ast = &WindowFrameBound{}
	_ Ast = &WindowFrameBounds{}
	_ Ast = &With{}
	_ Ast = &ZoneSpecifier{}
)

func (*AliasClause) isAstType()                 {}
func (*AllColumnsSelector) isAstType()          {}
func (*AlterIndex) isAstType()                  {}
func (*AlterSequence) isAstType()               {}
func (*AlterTable) isAstType()                  {}
func (*AlterUserSetPassword) isAstType()        {}
func (*AndExpr) isAstType()                     {}
func (*AnnotateTypeExpr) isAstType()            {}
func (*Array) isAstType()                       {}
func (*ArrayFlatten) isAstType()                {}
func (*ArraySubscript) isAstType()              {}
func (*AsOfClause) isAstType()                  {}
func (*Backup) isAstType()                      {}
func (*BeginTransaction) isAstType()            {}
func (*BinaryExpr) isAstType()                  {}
func (*CTE) isAstType()                         {}
func (*CancelQueries) isAstType()               {}
func (*CancelSessions) isAstType()              {}
func (*CaseExpr) isAstType()                    {}
func (*CastExpr) isAstType()                    {}
func (*CoalesceExpr) isAstType()                {}
func (*CollateExpr) isAstType()                 {}
func (*ColumnAccessExpr) isAstType()            {}
func (*ColumnItem) isAstType()                  {}
func (*CommentOnTable) isAstType()              {}
func (*CommitTransaction) isAstType()           {}
func (*ComparisonExpr) isAstType()              {}
func (*ControlJobs) isAstType()                 {}
func (*CopyFrom) isAstType()                    {}
func (*CreateChangefeed) isAstType()            {}
func (*CreateDatabase) isAstType()              {}
func (*CreateIndex) isAstType()                 {}
func (*CreateRole) isAstType()                  {}
func (*CreateSequence) isAstType()              {}
func (*CreateStats) isAstType()                 {}
func (*CreateTable) isAstType()                 {}
func (*CreateUser) isAstType()                  {}
func (*CreateView) isAstType()                  {}
func (*DArray) isAstType()                      {}
func (*DBitArray) isAstType()                   {}
func (*DCollatedString) isAstType()             {}
func (*DDecimal) isAstType()                    {}
func (*DIPAddr) isAstType()                     {}
func (*DInterval) isAstType()                   {}
func (*DJSON) isAstType()                       {}
func (*DOid) isAstType()                        {}
func (*DOidWrapper) isAstType()                 {}
func (*DTimestamp) isAstType()                  {}
func (*DTimestampTZ) isAstType()                {}
func (*DTuple) isAstType()                      {}
func (*DUuid) isAstType()                       {}
func (*Deallocate) isAstType()                  {}
func (*DefaultVal) isAstType()                  {}
func (*Delete) isAstType()                      {}
func (*Discard) isAstType()                     {}
func (*DropDatabase) isAstType()                {}
func (*DropIndex) isAstType()                   {}
func (*DropRole) isAstType()                    {}
func (*DropSequence) isAstType()                {}
func (*DropTable) isAstType()                   {}
func (*DropUser) isAstType()                    {}
func (*DropView) isAstType()                    {}
func (*Execute) isAstType()                     {}
func (*Explain) isAstType()                     {}
func (*Export) isAstType()                      {}
func (*From) isAstType()                        {}
func (*FuncExpr) isAstType()                    {}
func (*Grant) isAstType()                       {}
func (*GrantRole) isAstType()                   {}
func (*IfErrExpr) isAstType()                   {}
func (*IfExpr) isAstType()                      {}
func (*Import) isAstType()                      {}
func (*IndexElem) isAstType()                   {}
func (*IndexedVar) isAstType()                  {}
func (*IndirectionExpr) isAstType()             {}
func (*Insert) isAstType()                      {}
func (*InterleaveDef) isAstType()               {}
func (*IsOfTypeExpr) isAstType()                {}
func (*KVOption) isAstType()                    {}
func (*Limit) isAstType()                       {}
func (*ListPartition) isAstType()               {}
func (*NotExpr) isAstType()                     {}
func (*NullIfExpr) isAstType()                  {}
func (*NumVal) isAstType()                      {}
func (*OnConflict) isAstType()                  {}
func (*OrExpr) isAstType()                      {}
func (*Order) isAstType()                       {}
func (*ParenExpr) isAstType()                   {}
func (*ParenSelect) isAstType()                 {}
func (*PartitionBy) isAstType()                 {}
func (*PartitionMaxVal) isAstType()             {}
func (*PartitionMinVal) isAstType()             {}
func (*Placeholder) isAstType()                 {}
func (*Prepare) isAstType()                     {}
func (*RangeCond) isAstType()                   {}
func (*RangePartition) isAstType()              {}
func (*ReleaseSavepoint) isAstType()            {}
func (*Relocate) isAstType()                    {}
func (*RenameColumn) isAstType()                {}
func (*RenameDatabase) isAstType()              {}
func (*RenameIndex) isAstType()                 {}
func (*RenameTable) isAstType()                 {}
func (*ResolvableFunctionReference) isAstType() {}
func (*Restore) isAstType()                     {}
func (*Revoke) isAstType()                      {}
func (*RevokeRole) isAstType()                  {}
func (*RollbackToSavepoint) isAstType()         {}
func (*RollbackTransaction) isAstType()         {}
func (*Savepoint) isAstType()                   {}
func (*Scatter) isAstType()                     {}
func (*Scrub) isAstType()                       {}
func (*Select) isAstType()                      {}
func (*SelectClause) isAstType()                {}
func (*SelectExpr) isAstType()                  {}
func (*SequenceOption) isAstType()              {}
func (*SetClusterSetting) isAstType()           {}
func (*SetSessionCharacteristics) isAstType()   {}
func (*SetTracing) isAstType()                  {}
func (*SetTransaction) isAstType()              {}
func (*SetVar) isAstType()                      {}
func (*SetZoneConfig) isAstType()               {}
func (*ShowBackup) isAstType()                  {}
func (*ShowClusterSetting) isAstType()          {}
func (*ShowColumns) isAstType()                 {}
func (*ShowConstraints) isAstType()             {}
func (*ShowCreate) isAstType()                  {}
func (*ShowDatabases) isAstType()               {}
func (*ShowFingerprints) isAstType()            {}
func (*ShowGrants) isAstType()                  {}
func (*ShowHistogram) isAstType()               {}
func (*ShowIndex) isAstType()                   {}
func (*ShowJobs) isAstType()                    {}
func (*ShowQueries) isAstType()                 {}
func (*ShowRanges) isAstType()                  {}
func (*ShowRoleGrants) isAstType()              {}
func (*ShowRoles) isAstType()                   {}
func (*ShowSchemas) isAstType()                 {}
func (*ShowSessions) isAstType()                {}
func (*ShowSyntax) isAstType()                  {}
func (*ShowTableStats) isAstType()              {}
func (*ShowTables) isAstType()                  {}
func (*ShowTraceForSession) isAstType()         {}
func (*ShowTransactionStatus) isAstType()       {}
func (*ShowUsers) isAstType()                   {}
func (*ShowVar) isAstType()                     {}
func (*ShowZoneConfig) isAstType()              {}
func (*Split) isAstType()                       {}
func (*StrVal) isAstType()                      {}
func (*Subquery) isAstType()                    {}
func (*TableName) isAstType()                   {}
func (*TableNamePrefix) isAstType()             {}
func (*TableNameWithIndex) isAstType()          {}
func (*TargetList) isAstType()                  {}
func (*TransactionModes) isAstType()            {}
func (*Truncate) isAstType()                    {}
func (*Tuple) isAstType()                       {}
func (*TupleStar) isAstType()                   {}
func (*UnaryExpr) isAstType()                   {}
func (*UnionClause) isAstType()                 {}
func (*UnqualifiedStar) isAstType()             {}
func (*UnresolvedName) isAstType()              {}
func (*Update) isAstType()                      {}
func (*UpdateExpr) isAstType()                  {}
func (*ValuesClause) isAstType()                {}
func (*ValuesClauseWithNames) isAstType()       {}
func (*When) isAstType()                        {}
func (*Where) isAstType()                       {}
func (*WindowDef) isAstType()                   {}
func (*WindowFrame) isAstType()                 {}
func (*WindowFrameBound) isAstType()            {}
func (*WindowFrameBounds) isAstType()           {}
func (*With) isAstType()                        {}
func (*ZoneSpecifier) isAstType()               {}
